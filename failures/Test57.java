// Generated by Java* Fuzzer test generator (1.0.001). Sat Aug 19 21:06:36 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3147595457L;
    public int iFld=-178;
    public static byte byFld=114;
    public static long lFld=965305236012772879L;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -60886);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, long l, int i5) {

        double d1=2.46454;
        int i6=-71, i7=-176;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -135L);

        d1 += l;
        lArr1[(-4 >>> 1) % N] = -12;
        i5 *= (int)2.744F;
        for (i6 = 14; 228 > i6; i6 += 2) {
            i5 -= (int)-8267048183311216661L;
        }
        i5 += i7;
        vMeth2_check_sum += i4 + l + i5 + Double.doubleToLongBits(d1) + i6 + i7 + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1() {

        int i8=21265, i9=13, i10=-14, i11=-184, i12=-1257;
        boolean b=true;
        float f2=0.580F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 61.805F);

        vMeth2(i8, Test.instanceCount, i8);
        i8 *= (int)14789L;
        for (i9 = 6; 158 > i9; ++i9) {
            i10 &= -6;
            for (i11 = 1; i11 < 10; ++i11) {
                i8 = i12;
                if (b) break;
                Test.byFld -= (byte)10;
                f2 = i11;
                i12 += (13031 + (i11 * i11));
                i10 = 14;
                i12 <<= (int)Test.instanceCount;
            }
            i12 = i11;
            fArr1 = FuzzerUtils.float1array(N, (float)-86.417F);
            Test.iArrFld[i9 + 1] += (int)Test.instanceCount;
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(float f1) {

        int i1=49671, i2=13, i3=-9, i13=-702, i14=-5134, i15=-10, i16=33940, i17=-3;
        boolean b1=false;
        float f3=-4.1010F;

        Test.instanceCount += Integer.reverseBytes((int)((Test.instanceCount * i1) + i1));
        for (i2 = 8; i2 < 133; i2 += 3) {
            vMeth1();
        }
        for (i13 = 2; i13 < 298; ++i13) {
            Test.iArrFld[i13 - 1] += (int)Test.instanceCount;
            i1 += (i13 | i13);
            i14 *= 182;
            if (b1) continue;
            Test.iArrFld = Test.iArrFld;
        }
        for (f3 = 8; 151 > f3; ++f3) {
            for (i16 = 1; i16 < 11; i16++) {
                Test.instanceCount = i3;
                Test.instanceCount = Test.byFld;
            }
            f1 *= -3;
            i17 += Test.byFld;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + i2 + i3 + i13 + i14 + (b1 ? 1 : 0) +
            Float.floatToIntBits(f3) + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i=124, i18=-54384, i19=30750, i20=-9, i21=52834, i22=-124, i23=-59212, i24=10, i25=6, i26=32291, i27=-29;
        double d=72.79297;
        float f=-1.836F, fArr[]=new float[N];
        long l1=16988L, lArr[]=new long[N];
        short s=-32745;
        boolean b2=true;

        FuzzerUtils.init(lArr, 19870L);
        FuzzerUtils.init(fArr, 1.858F);

        lArr[(i >>> 1) % N] += (long)(Integer.reverseBytes(i) - d);
        fArr[(iFld >>> 1) % N] -= (((i + iFld) * (Test.instanceCount + iFld)) - (Integer.reverseBytes(i) + (-58779 - (f
            + Test.byFld))));
        try {
            if (false) {
                Test.instanceCount = (long)(((Test.instanceCount + i) - -194) - ((d * iFld) + (-Test.instanceCount)));
                vMeth(0.642F);
                i &= i;
            }
            iFld -= i;
        }
        catch (UserDefinedExceptionTest exc1) {
            i *= -14;
        }
        for (i18 = 19; i18 < 374; i18++) {
            Test.byFld = (byte)i19;
        }
        for (l1 = 14; 292 > l1; ++l1) {
            for (i21 = 90; 1 < i21; --i21) {
                i22 ^= i20;
                i20 += (i21 * i21);
            }
        }
        i23 = 1;
        do {
            for (i24 = 5; 116 > i24; ++i24) {
                s = (short)i21;
                i25 += (((i24 * i21) + i) - f);
                for (i26 = i24; i26 < 2; ++i26) {
                    i22 += (i26 * i19);
                    iFld *= (int)Test.instanceCount;
                    Test.iArrFld[i26 - 1] >>= -148;
                    Test.instanceCount -= i24;
                    try {
                        i25 = (i23 % -104);
                        Test.iArrFld[i23 + 1] = (Test.iArrFld[i23] / i25);
                        i22 = (Test.iArrFld[i23] / 1980651964);
                    } catch (ArithmeticException a_e) {}
                    f -= -148;
                    i19 /= (int)(i22 | 1);
                    Test.lFld -= Test.instanceCount;
                    if (b2) break;
                }
                f -= -17585;
            }
        } while (++i23 < 216);

        FuzzerUtils.out.println("i d f = " + i + "," + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i18 i19 l1 = " + i18 + "," + i19 + "," + l1);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("s i26 i27 = " + s + "," + i26 + "," + i27);
        FuzzerUtils.out.println("b2 lArr fArr = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.lFld Test.iArrFld = " + Test.lFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

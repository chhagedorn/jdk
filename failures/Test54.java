// Generated by Java* Fuzzer test generator (1.0.001). Fri Aug 18 04:28:24 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=122L;
    public static double dFld=-1.21382;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 20826L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, byte by1, int i3) {

        int i4=-41672, i5=11, i7=-13, i8=112, i9=103, i10=-3, iArr1[]=new int[N];
        float f2=45.284F, f3=37.427F;
        boolean b=false;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 4L);
        FuzzerUtils.init(iArr1, -19974);

        Test.instanceCount = Test.instanceCount;
        i3 += (int)l;
        i3 = (int)l;
        for (i4 = 8; i4 < 255; ++i4) {
            lArr1[i4][i4] += i3;
            i5 += (-1 + (i4 * i4));
            i5 = (int)f2;
            if (false) {
                for (i7 = 7; 1 < i7; i7 -= 2) {
                    iArr1[i4] += -160;
                    i3 -= (int)Test.instanceCount;
                    i5 += (((i7 * i4) + i7) - f3);
                    for (i9 = 3; i4 < i9; --i9) {
                        if (b) continue;
                        try {
                            iArr1[i7 + 1] = (54869 % i4);
                            i5 = (i7 / -79);
                            i8 = (i7 / 59383);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }
        vMeth2_check_sum += l + by1 + i3 + i4 + i5 + Float.floatToIntBits(f2) + i7 + i8 + Float.floatToIntBits(f3) + i9
            + i10 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i) {

        byte by=-80;
        float f1=-1.311F, f4=1.782F;
        int i1=-17, i2=-2, i11=63965, i12=-60357, i13=27859, iArr[]=new int[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 68);
        FuzzerUtils.init(lArr, -19494L);

        i += (((i + i) << (by - i)) - Math.min(i, (int)(-200L + (f1--))));
        for (i1 = 1; i1 < 123; i1++) {
            short s=-17262;
            iArr[i1 + 1] += (int)(f1--);
            lArr[i1 + 1] = s;
            iArr[i1 + 1] *= (int)Test.instanceCount;
            vMeth2(-1586L, by, i);
            switch ((i1 % 10) + 12) {
            case 12:
                Test.instanceCount += (12 + (i1 * i1));
                i2 += (((i1 * i) + i2) - Test.instanceCount);
                break;
            case 13:
                i2 = (int)f1;
                break;
            case 14:
                for (i11 = 1; i11 < 13; ++i11) {
                    switch ((i1 % 4) + 84) {
                    case 84:
                        for (f4 = 1; f4 < 2; f4 += 2) {
                            i2 *= (int)Test.dFld;
                            i13 += i12;
                        }
                        break;
                    case 85:
                        i12 -= (int)-2.263F;
                        break;
                    case 86:
                    case 87:
                        i13 -= i12;
                        break;
                    default:
                        i += i11;
                    }
                }
            case 15:
                f1 = i2;
                break;
            case 16:
                lArr[i1] -= -13;
                break;
            case 17:
                by |= (byte)i11;
                break;
            case 18:
                iArr[i1 - 1] -= i13;
                break;
            case 19:
                i += -50150;
            case 20:
                if (b1) break;
                break;
            case 21:
                i12 += -79;
            default:
                i12 -= i;
            }
        }
        vMeth1_check_sum += i + by + Float.floatToIntBits(f1) + i1 + i2 + i11 + i12 + Float.floatToIntBits(f4) + i13 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(float f) {

        int i15=194, i16=-18892, i17=1, i19=-92, i20=-30193, i21=8, iArr2[]=new int[N];
        byte by2=-28;
        float f5=0.16F, fArr[]=new float[N];
        boolean b2=false;

        FuzzerUtils.init(iArr2, -13591);
        FuzzerUtils.init(fArr, 1.117F);

        try {
            vMeth1(i15);
            i15 >>= i15;
            i15 = i15;
            i15 += by2;
            for (i16 = 16; i16 < 317; i16++) {
                Test.lArrFld[(i17 >>> 1) % N] *= 0;
                Test.instanceCount >>= i17;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            for (f5 = 23; 393 > f5; ++f5) {
                if (i16 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + i15 + by2 + i16 + i17 + Float.floatToIntBits(f5) + i19
                        + (b2 ? 1 : 0) + i20 + i21 + FuzzerUtils.checkSum(iArr2) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                b2 = true;
            }
            for (float f6 : fArr) {
                for (i20 = 4; i20 > 1; --i20) {
                    f += i21;
                    f6 += (((i20 * i19) + i20) - i19);
                }
            }
        }
        finally {
            i21 -= i17;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i15 + by2 + i16 + i17 + Float.floatToIntBits(f5) + i19 + (b2 ? 1 :
            0) + i20 + i21 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i22=-90, i23=11, i24=7, i25=222, i26=2468, i27=-49806, i28=-2730, iArr3[][]=new int[N][N];
        float f7=1.373F;
        boolean b3=true;
        byte by3=-81;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr3, 40873);
        FuzzerUtils.init(dArr, -99.122868);

        vMeth(0.526F);
        for (i22 = 3; i22 < 328; i22++) {
            for (i24 = 2; i24 < 77; ++i24) {
                iArr3[i22 - 1][i22 + 1] = 1;
                Test.instanceCount = (long)f7;
                i25 *= (int)-7446861295959284768L;
                iArr3[i22][i24 + 1] = i22;
                if (b3) {
                    i25 >>= -20;
                    Test.instanceCount -= i22;
                    iArr3[i24 + 1] = iArr3[i22 - 1];
                } else {
                    iArr3[i22][i24] = -223;
                    i23 >>>= (int)Test.instanceCount;
                    i25 >>= i23;
                    Test.instanceCount += (((i24 * Test.instanceCount) + i25) - by3);
                }
                i25 += (((i24 * i24) + Test.instanceCount) - i25);
                i23 *= (int)Test.instanceCount;
                switch ((((i25 >>> 1) % 2) * 5) + 100) {
                case 105:
                    dArr[i24][i22 - 1] -= f7;
                case 104:
                    f7 %= 53157;
                    for (i26 = 2; i26 > i22; --i26) {
                        f7 += f7;
                        i23 = (int)Test.instanceCount;
                        try {
                            iArr3[i26][i22 - 1] = (i26 / 169);
                            iArr3[i24 + 1][i24 + 1] = (i23 % 681487234);
                            i23 = (i24 % -176);
                        } catch (ArithmeticException a_e) {}
                        i25 <<= (int)Test.instanceCount;
                    }
                    i27 += i24;
                }
            }
            iArr3[i22 - 1][i22] = i22;
            i28 = 1;
            while (++i28 < 77) {
                iArr3[i28][i28] &= i24;
                Test.instanceCount = i25;
            }
        }

        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 f7 b3 = " + i25 + "," + Float.floatToIntBits(f7) + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("by3 i26 i27 = " + by3 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 iArr3 dArr = " + i28 + "," + FuzzerUtils.checkSum(iArr3) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.lArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

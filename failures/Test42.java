// Generated by Java* Fuzzer test generator (1.0.001). Thu Jul 27 07:39:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=825277367L;
    public byte byFld=111;
    public static boolean bFld=true;
    public static volatile double dFld=-1.67729;
    public static short sFld=-17121;
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1756068830L);
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i10, int i11, double d1) {

        byte by=-38;
        float f1=87.950F, f2=-113.96F, fArr1[]=new float[N];
        int i12=28, i13=-408, i14=-191, i15=251, iArr2[]=new int[N];
        short s1=15177;

        FuzzerUtils.init(iArr2, -11);
        FuzzerUtils.init(fArr1, -38.366F);

        iArr2[(i10 >>> 1) % N] <<= i10;
        Test.instanceCount += Test.instanceCount;
        Test.instanceCount = i11;
        by %= (byte)(i10 | 1);
        iArr2 = iArr2;
        i11 = (int)Test.instanceCount;
        fArr1[(i10 >>> 1) % N] += 1103356941253513830L;
        iArr2[(i11 >>> 1) % N] = i10;
        for (f1 = 3; f1 < 281; ++f1) {
            i12 = i12;
            for (i13 = 1; i13 < 6; ++i13) {
                i11 += (((i13 * Test.instanceCount) + s1) - i10);
                f2 += i13;
                Test.instanceCount += (long)f2;
            }
        }
        iArr2 = iArr2;
        i15 = 1;
        while (++i15 < 182) {
            d1 = by;
            i12 += (-24880 + (i15 * i15));
            fArr1[i15 + 1] *= (float)d1;
            Test.instanceCount <<= -11433;
        }
        long meth_res = i10 + i11 + Double.doubleToLongBits(d1) + by + Float.floatToIntBits(f1) + i12 + i13 + i14 + s1
            + Float.floatToIntBits(f2) + i15 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(short s) {

        long l3=-62L, lArr1[][]=new long[N][N];
        int i9=10, i17=-25, i18=13013, i19=44778, i20=-12, i21=-13267, i22=2;
        float f=57.40F;
        double d2=0.104291;
        byte by1=-42;

        FuzzerUtils.init(lArr1, -4846524668231492587L);

        lArr1 = (lArr1 = (lArr1 = (Test.lArrFld = Test.lArrFld)));
        for (l3 = 1; l3 < 136; l3++) {
            f = (-((++i9) * iMeth1(-191, i9, d2)));
            i9 += (int)(l3 ^ l3);
            i9 |= (int)l3;
            if (i9 != 0) {
                vMeth1_check_sum += s + l3 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i17 + i18 +
                    i19 + i20 + by1 + i21 + i22 + FuzzerUtils.checkSum(lArr1);
                return;
            }
            i9 = (int)Test.instanceCount;
            for (i17 = 1; 12 > i17; ++i17) {
                for (i19 = 1; 2 > i19; i19 += 2) {
                    by1 += (byte)(i19 * i19);
                    try {
                        i20 = (36417 / i20);
                        i18 = (i20 % -91);
                        i18 = (i18 % i17);
                    } catch (ArithmeticException a_e) {}
                    if (Test.bFld) continue;
                    i20 |= i20;
                    Test.iArrFld[i17] -= i19;
                    i18 += (11 + (i19 * i19));
                }
                Test.iArrFld[i17] >>= i17;
                for (i21 = 1; i21 < 2; i21++) {
                    Test.lArrFld[i17 + 1][i21 + 1] += i22;
                    if (Test.bFld) continue;
                    if (i22 != 0) {
                        vMeth1_check_sum += s + l3 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i17 +
                            i18 + i19 + i20 + by1 + i21 + i22 + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                }
            }
        }
        vMeth1_check_sum += s + l3 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i17 + i18 + i19 + i20
            + by1 + i21 + i22 + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(long l, long l1, long l2) {

        short s2=-10897, sArr[]=new short[N];
        int i23=-250, i24=6, i25=12, i26=-13, i27=37, i28=-13215;
        byte by2=22, byArr[][]=new byte[N][N];
        float fArr2[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr2, 2.426F);
        FuzzerUtils.init(sArr, (short)-30347);
        FuzzerUtils.init(byArr, (byte)6);
        FuzzerUtils.init(dArr, 29.7246);

        vMeth1(s2);
        Test.instanceCount <<= l2;
        for (float f3 : fArr2) {
            sArr = FuzzerUtils.short1array(N, (short)22162);
            for (i23 = 1; i23 < 4; i23 += 2) {
                l2 += (((i23 * Test.instanceCount) + l1) - by2);
                i24 *= i24;
            }
            Test.dFld *= l1;
            if (Test.bFld) break;
            Test.iArrFld = Test.iArrFld;
        }
        byArr[(-59931 >>> 1) % N] = byArr[(4 >>> 1) % N];
        sArr[(i24 >>> 1) % N] = (short)i23;
        by2 = (byte)i24;
        dArr[(9 >>> 1) % N] *= i24;
        Test.lArrFld[(i23 >>> 1) % N][(i23 >>> 1) % N] -= i24;
        for (i25 = 4; 133 > i25; ++i25) {
            Test.iArrFld[i25] >>= i26;
        }
        for (i27 = 2; i27 < 186; i27++) {
            l = i27;
            i28 -= by2;
        }
        vMeth_check_sum += l + l1 + l2 + s2 + i23 + i24 + by2 + i25 + i26 + i27 + i28 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public int iMeth(int i6) {

        int i7=-40, i8=-63567, i29=-166, i30=-13, i31=14, i32=0, iArr1[]=new int[N];
        float f4=93.233F;

        FuzzerUtils.init(iArr1, -5);

        Test.bFld = (Test.bFld && Test.bFld);
        i7 = 1;
        while (++i7 < 185) {
            iArr1[i7 + 1] <<= i7;
            if (i6 != 0) {
            }
            i8 = 1;
            do {
                vMeth(-1215984262L, Test.instanceCount, -5L);
            } while (++i8 < 9);
            Test.instanceCount = i8;
            i6 += (((i7 * Test.instanceCount) + i8) - Test.instanceCount);
            i6 = (int)Test.instanceCount;
            for (i29 = 9; i29 > 1; --i29) {
                Test.dFld += f4;
                Test.iArrFld = iArr1;
                for (i31 = 1; i31 < 2; ++i31) {
                    if (Test.bFld) {
                        i32 = (int)Test.instanceCount;
                        byFld += (byte)(i31 * i31);
                        i30 = (int)Test.instanceCount;
                        Test.instanceCount = i8;
                    } else {
                        if (false) continue;
                        iArr1[i31] = i7;
                    }
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i29 + i30 + Float.floatToIntBits(f4) + i31 + i32 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=154, i1=225, i2=128, i3=-45112, i4=45293, i5=-11, i34=14, i35=-44, i36=33746, i37=154, i38=-210,
            i39=48300, i40=-56718, i41=-56674, iArr[]=new int[N], iArr3[][]=new int[N][N];
        double d=-2.89094, dArr1[]=new double[N];
        boolean b=false;
        long lArr[]=new long[N];
        float fArr[]=new float[N];
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(fArr, -43.991F);
        FuzzerUtils.init(iArr, -32533);
        FuzzerUtils.init(dArr1, 99.62605);
        FuzzerUtils.init(byArr1, (byte)23);
        FuzzerUtils.init(iArr3, -82);

        i = 1;
        do {
            i1 = 1;
            while (++i1 < 82) {
                Test.instanceCount += (i1 | Test.instanceCount);
                lArr = (lArr = (lArr = (lArr = lArr)));
            }
            byFld += (byte)(((i * i) + i) - i);
            lArr = lArr;
            lArr[i + 1] *= 71;
            for (i2 = 82; i < i2; i2 -= 3) {
                i3 += (int)(byFld - fArr[i]);
                for (i4 = i2; i4 < 1; ++i4) {
                    int i33=-13;
                    Test.instanceCount <<= Math.max(Math.min(iArr[i4], 59369), i);
                    Test.bFld = (Math.sqrt(d) < Math.min(iMeth(i), i33));
                    i33 -= i2;
                    i33 = byFld;
                    dArr1[i4] *= Test.instanceCount;
                    d *= Test.dFld;
                }
            }
            Test.iArrFld = Test.iArrFld;
        } while (++i < 308);
        byArr1[(i1 >>> 1) % N] >>>= (byte)Test.instanceCount;
        Test.bFld = Test.bFld;
        i34 = 1;
        while (++i34 < 233) {
            Test.bFld = Test.bFld;
        }
        i5 = Test.sFld;
        for (i35 = 6; i35 < 127; i35++) {
            float f5=0.261F;
            f5 -= i34;
            Test.instanceCount = Test.instanceCount;
            i5 >>= byFld;
            Test.instanceCount = 8356L;
            byFld += (byte)i35;
            Test.instanceCount = i1;
            i37 = 1;
            while (++i37 < 207) {
                byFld += (byte)(((i37 * f5) + i5) - f5);
                for (i38 = 1; i38 < 1; i38++) {
                    Test.bFld = b;
                }
                if (b) break;
                Test.instanceCount = 874597721929483260L;
                iArr3 = iArr3;
                Test.iArrFld[i37] >>= 0;
                for (i40 = 1; i40 < 1; ++i40) {
                    i39 <<= (int)Test.instanceCount;
                    Test.instanceCount -= i5;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("d i34 i35 = " + Double.doubleToLongBits(d) + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 b i40 = " + i39 + "," + (b ? 1 : 0) + "," + i40);
        FuzzerUtils.out.println("i41 lArr fArr = " + i41 + "," + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("iArr dArr1 byArr1 = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," + FuzzerUtils.checkSum(byArr1));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.bFld = " + Test.instanceCount + "," + byFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.sFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.sFld + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

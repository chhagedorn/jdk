// Generated by Java* Fuzzer test generator (1.0.001). Thu May 18 13:37:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2997L;
    public byte byFld=-84;
    public volatile short sFld=-32370;
    public static double dFld=-119.40235;
    public int iFld=-14;
    public static long lFld=101L;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -46.417F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l) {

        int i1=-25937, i2=-92, i3=-211, i4=27260, i5=10, i6=31163, iArr[][]=new int[N][N];
        float f=88.684F, f1=1.188F;
        boolean b=true;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-10348);
        FuzzerUtils.init(iArr, -43);
        FuzzerUtils.init(lArr, -2L);

        sArr[(i1 >>> 1) % N] >>= (short)i1;
        for (i2 = 14; 317 > i2; i2++) {
            iArr = iArr;
            for (f = 1; f < 5; f++) {
                lArr[i2] *= i2;
                try {
                    iArr[(int)(f + 1)][i2] = (i3 / iArr[i2][i2 + 1]);
                    i3 = (i4 % i2);
                    i4 = (i4 % 1591434683);
                } catch (ArithmeticException a_e) {}
                l = Test.instanceCount;
                i4 += (int)(f * f);
                switch ((i2 % 2) + 14) {
                case 14:
                    f1 = i4;
                    break;
                case 15:
                    for (i5 = 1; i5 < 2; ++i5) {
                        i4 -= i6;
                        iArr[(int)(f - 1)][(int)(f - 1)] -= i5;
                        b = b;
                        i6 = (int)f;
                    }
                default:
                    iArr[(int)(f)][i2 + 1] = (int)l;
                }
            }
        }
        vMeth2_check_sum += l + i1 + i2 + i3 + Float.floatToIntBits(f) + i4 + Float.floatToIntBits(f1) + i5 + i6 + (b ?
            1 : 0) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth1(int i) {

        int i7=-21742, i8=-2, i9=14006, iArr1[]=new int[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 63522);
        FuzzerUtils.init(lArr1, 14L);

        Test.instanceCount = (long)(((i / (i | 1)) + -10.86328) * ((i / (sFld | 1)) * (i--)));
        vMeth2(-253L);
        iArr1[(i >>> 1) % N] <<= i;
        i7 = 1;
        do {
            lArr1[i7][i7 - 1] *= i7;
            i |= i;
            iArr1[i7 + 1] <<= i7;
            Test.instanceCount *= i7;
            for (i8 = 1; i8 < 5; i8++) {
                i -= i8;
                lArr1[i8][i8] >>= i7;
                i9 >>= i7;
                byFld <<= (byte)i7;
                Test.dFld += i7;
                i9 = 32;
            }
        } while (++i7 < 360);
        vMeth1_check_sum += i + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth() {

        int i10=53536, i11=13, i12=42330, i13=4, i14=23959, i15=-50850, i16=-39, i17=-10;
        float f2=-2.102F;

        vMeth1(i10);
        Test.instanceCount = i10;
        for (i11 = 5; i11 < 220; ++i11) {
            for (i13 = 1; i13 < 7; ++i13) {
                i12 = i10;
            }
            i14 += (((i11 * i13) + i13) - i10);
        }
        i15 = 1;
        while (++i15 < 358) {
            Test.instanceCount /= (i15 | 1);
        }
        for (i16 = 386; 14 < i16; i16--) {
            switch (((i16 % 4) * 5) + 27) {
            case 39:
                Test.dFld *= i16;
                Test.fArrFld[i16] = Test.instanceCount;
                Test.instanceCount -= 25584;
                break;
            case 32:
                i10 += i16;
            case 44:
                f2 *= i10;
                break;
            case 30:
                Test.instanceCount <<= i15;
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i18=41581, i19=-246, i20=-14, i21=-35228, i22=-1, iArr2[][]=new int[N][N];
        float f3=1.168F;
        double dArr[]=new double[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr2, 251);
        FuzzerUtils.init(dArr, 0.9263);
        FuzzerUtils.init(lArr2, -15709L);

        Test.instanceCount = byFld;
        vMeth();
        i18 = 1;
        do {
            Test.instanceCount = i18;
            for (i19 = 75; i19 > 4; i19 -= 3) {
                i20 = iFld;
                for (i21 = i18; i21 < 4; ++i21) {
                    switch ((i19 % 2) + 44) {
                    case 44:
                        iArr2[i21 - 1][i18 + 1] = (int)f3;
                        switch (((i19 % 2) * 5) + 41) {
                        case 47:
                            i20 += -2;
                            Test.instanceCount <<= i20;
                            i20 -= -12;
                            break;
                        case 48:
                            Test.instanceCount *= 55206;
                        }
                        try {
                            iFld = (53432 % iFld);
                            i22 = (i19 / -79);
                            iFld = (i22 / 630883426);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 45:
                        Test.instanceCount >>= i20;
                        i22 += i21;
                        dArr[(i22 >>> 1) % N] = i18;
                        i22 -= i21;
                        break;
                    default:
                        f3 += byFld;
                        switch ((i18 % 9) + 101) {
                        case 101:
                            i22 -= i18;
                            iFld |= (int)Test.instanceCount;
                            break;
                        case 102:
                            Test.lFld <<= i21;
                            break;
                        case 103:
                            i22 -= (int)Test.dFld;
                            Test.instanceCount -= Test.lFld;
                            i22 %= (int)(i18 | 1);
                            iFld = i22;
                            break;
                        case 104:
                            i22 *= (int)Test.lFld;
                            i22 = 161;
                        case 105:
                            iFld <<= i19;
                            break;
                        case 106:
                            lArr2[i21 + 1] += i20;
                        case 107:
                            f3 += sFld;
                            break;
                        case 108:
                            f3 -= i18;
                            break;
                        case 109:
                            iFld = i18;
                        }
                    }
                }
            }
        } while (++i18 < 335);

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 f3 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("iArr2 dArr lArr2 = " + FuzzerUtils.checkSum(iArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount byFld sFld = " + Test.instanceCount + "," + byFld + "," + sFld);
        FuzzerUtils.out.println("Test.dFld iFld Test.lFld = " + Double.doubleToLongBits(Test.dFld) + "," + iFld + "," +
            Test.lFld);
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

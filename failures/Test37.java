// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug  2 23:16:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-250L;
    public static double dFld=1.46263;
    public static byte byFld=-104;
    public static short sFld=6157;
    public float fFld=-57.202F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -41384);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i8=-13, i9=-22, i10=-39331, i11=-34844, i12=-211, i13=50483;
        boolean b=false;
        float f3=2.785F;

        Test.iArrFld[(i8 >>> 1) % N] -= i8;
        for (i9 = 3; 265 > i9; ++i9) {
            i8 += -172;
            for (i11 = 6; i11 > i9; i11 -= 3) {
                if (b) {
                    if (b) break;
                } else {
                    Test.iArrFld[i11] >>= (int)Test.instanceCount;
                    for (f3 = 1; 1 > f3; f3 += 2) {
                        Test.instanceCount = (long)120.113550;
                        i8 = i13;
                    }
                    Test.dFld -= i10;
                    switch ((((i12 >>> 1) % 1) * 5) + 71) {
                    case 75:
                        i13 += i13;
                        i8 += (((i11 * i8) + i8) - i13);
                    }
                }
                i8 = (int)Test.instanceCount;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + Float.floatToIntBits(f3) + i13;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, long l1, int i5) {

        int i6=-43302, i7=-10, i14=14, i15=-98, i16=-47479, i17=-14;
        float f2=120.182F;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -39.7010);

        for (i6 = 11; i6 < 317; ++i6) {
            Test.iArrFld[i6] <<= (Test.sFld + (Test.byFld >> (i5 - i5)));
            i5 -= (int)Long.reverseBytes(Long.reverseBytes((long)(Test.dFld - i5)));
            f2 *= i7;
            if (b1) {
                i7 -= (int)(-(iMeth1() + l1));
            } else {
            }
            i7 -= i6;
            dArr[i6] *= -18137;
        }
        i4 -= -243;
        Test.iArrFld = Test.iArrFld;
        for (i14 = 5; i14 < 367; ++i14) {
            for (i16 = 1; i16 < 5; ++i16) {
                if (true) break;
                f2 = i6;
                i5 = i14;
            }
        }
        long meth_res = i4 + l1 + i5 + i6 + i7 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, long l) {

        int i=-122, i1=-24566, i2=-5, i3=-19974, i18=37728, i19=184, i20=5, i21=4;
        float f1=-45.1016F;
        short s=11193;

        for (i = 3; i < 177; ++i) {
            for (f1 = i; f1 < 9; f1++) {
                try {
                    i2 = (1216 % Test.iArrFld[(int)(f1 - 1)]);
                    i1 = (-39814 / i);
                    i2 = (i1 % i2);
                } catch (ArithmeticException a_e) {}
                l >>= (--i2);
            }
            Test.iArrFld = Test.iArrFld;
        }
        i3 = 1;
        do {
            s = (short)((Test.dFld++) - (-180 + (--i1)));
        } while (++i3 < 327);
        Test.byFld = (byte)iMeth(i, l, i1);
        for (i18 = 2; i18 < 346; ++i18) {
            l += (i18 + i18);
            try {
                Test.iArrFld[i18 - 1] = (i / -228);
                i2 = (i % -41417);
                i1 = (i2 / i2);
            } catch (ArithmeticException a_e) {}
            for (i20 = 5; i20 > 1; i20 -= 3) {
                i1 >>>= i21;
                if (i20 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + l + i + i1 + Float.floatToIntBits(f1) + i2 + i3 + s +
                        i18 + i19 + i20 + i21;
                    return;
                }
                i1 *= i18;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i + i1 + Float.floatToIntBits(f1) + i2 + i3 + s + i18 + i19 +
            i20 + i21;
    }

    public void mainTest(String[] strArr1) {

        int i22=157, i23=56931, i24=-3847, i25=-79, i26=-64157, i27=-168;
        boolean b2=true;
        long l2=-202L, lArr[]=new long[N];
        double dArr1[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr1, 2.79800);
        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(sArr, (short)-6463);

        vMeth(fFld, Test.instanceCount);
        for (i22 = 2; i22 < 319; ++i22) {
            i23 -= (int)Test.instanceCount;
        }
        i24 = 348;
        do {
            Test.sFld = (short)i22;
            i23 += (int)fFld;
            Test.instanceCount += (i24 * i24);
            Test.iArrFld[i24 - 1] %= (int)(Test.instanceCount | 1);
        } while (--i24 > 0);
        i23 += (int)Test.dFld;
        i23 <<= i22;
        dArr1[(0 >>> 1) % N] -= i23;
        try {
            Test.iArrFld[(i22 >>> 1) % N] = i22;
        }
        catch (ArithmeticException exc1) {
        }
        i23 -= 2;
        if (b2) {
            Test.iArrFld[(i23 >>> 1) % N] -= (int)fFld;
            b2 = b2;
            for (i25 = 9; i25 < 231; i25++) {
                Test.iArrFld[i25 + 1] = (int)-24286L;
                i26 ^= i23;
                for (l2 = i25; l2 < 113; l2 += 3) {
                    lArr[(int)(l2)] = Test.instanceCount;
                    Test.instanceCount += (5 + (l2 * l2));
                    sArr[(int)(l2 - 1)] = (short)i22;
                }
                i23 = i27;
                i27 >>= 64;
                if (b2) break;
                Test.instanceCount >>= Test.instanceCount;
                i23 += i27;
            }
            sArr[(i22 >>> 1) % N] |= (short)i27;
        }

        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("b2 i25 i26 = " + (b2 ? 1 : 0) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("l2 i27 dArr1 = " + l2 + "," + i27 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("lArr sArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.sFld fFld Test.iArrFld = " + Test.sFld + "," + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 16 20:58:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4241449432L;
    public static volatile float fFld=0.321F;
    public static double dFld=1.97394;
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {


        Test.fFld = (float)116.72356;
        vMeth2_check_sum += i4;
    }

    public static void vMeth1(float f, float f1, int i3) {

        int i5=-250, i6=-41621, i7=-24639, i8=34, i9=-23716, i10=-5991, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -20);

        iArr[(i3 >>> 1) % N] -= (int)f1;
        vMeth2(i3);
        for (i5 = 7; i5 < 188; ++i5) {
            i3 += i5;
            i3 = -2;
            i6 &= -44;
            for (i7 = i5; i7 < 9; i7++) {
                for (i9 = 1; i9 < 1; ++i9) {
                    Test.fFld += i9;
                    i6 -= i7;
                    Test.instanceCount += i7;
                    Test.instanceCount = i3;
                    if (i3 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i3 + i5 + i6 + i7 + i8
                            + i9 + i10 + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.instanceCount += (i9 - i7);
                    i6 += i10;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i3 + i5 + i6 + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, long l1) {

        int i=-15467, i1=162, i2=-12, i11=-32857, i12=-9, i13=5;
        byte by=51;
        float f2=-2.48F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1625264649L);

        for (i = 2; i < 228; i++) {
            l1 -= i1;
            by += (byte)((i1--) - ((Test.instanceCount * l1) + (i + l)));
            i2 = 1;
            do {
                vMeth1(0.540F, Test.fFld, -59360);
            } while (++i2 < 7);
            Test.instanceCount += l;
            i1 = i2;
        }
        i1 -= i2;
        l1 = i2;
        lArr[(i2 >>> 1) % N] >>= i1;
        for (f2 = 153; f2 > 4; f2--) {
            for (i12 = (int)(f2); i12 < 11; i12++) {
                i11 = i2;
                l1 >>= i2;
                i1 += 3;
            }
        }
        vMeth_check_sum += l + l1 + i + i1 + by + i2 + Float.floatToIntBits(f2) + i11 + i12 + i13 +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=-13, i15=11, i16=167, i17=-22976, i18=-8, i19=0, i20=-250, i21=-184, i22=7, i23=149, i24=26198,
            iArr1[]=new int[N];
        byte by1=118;

        FuzzerUtils.init(iArr1, -34289);

        vMeth(Test.instanceCount, Test.instanceCount);
        Test.fFld += i14;
        i14 *= i14;
        iArr1[(i14 >>> 1) % N] += (int)Test.instanceCount;
        i14 >>= i14;
        i14 >>= i14;
        iArr1 = iArr1;
        i14 = i14;
        for (i15 = 8; 135 > i15; i15++) {
            by1 += (byte)(i15 * i14);
            for (i17 = 7; i17 < 197; i17 += 2) {
                for (i19 = i17; 3 > i19; i19++) {
                    float f3=-2.453F;
                    Test.instanceCount = i16;
                    switch ((i17 % 1) + 121) {
                    case 121:
                        i14 *= (int)Test.dFld;
                        i14 %= (int)2364690325L;
                        f3 -= Test.instanceCount;
                        i18 += (i19 * i19);
                        break;
                    }
                    fArrFld[i15 + 1] = i17;
                    iArr1[i17 + 1] >>= i14;
                }
                i14 -= (int)Test.instanceCount;
            }
            for (i21 = 3; 197 > i21; i21++) {
                Test.instanceCount = 3;
                for (i23 = 2; i23 > i21; i23 -= 3) {
                    Test.instanceCount &= by1;
                    iArr1 = iArr1;
                    iArr1[i23 + 1] += i16;
                }
                try {
                    i14 = (1881281947 % i19);
                    i16 = (iArr1[i15 - 1] % i20);
                    iArr1[i15 + 1] = (i18 / i24);
                } catch (ArithmeticException a_e) {}
                i18 <<= i19;
            }
            iArr1[i15 - 1] >>= 5;
        }

        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("by1 i17 i18 = " + by1 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

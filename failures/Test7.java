// Generated by Java* Fuzzer test generator (1.0.001). Thu Jun 15 02:21:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=119L;
    public static long lFld=3884205345L;
    public static double dFld=-2.46225;
    public int iFld=0;
    public volatile short sFld=27264;
    public byte byArrFld[]=new byte[N];
    public long lArrFld[]=new long[N];
    public float fArrFld[][]=new float[N][N];

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth(boolean b, short s) {

        int i=-60354, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 6);

        Test.instanceCount = (-(++iArr[(i >>> 1) % N]));
        long meth_res = (b ? 1 : 0) + s + i + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i3=-173, i4=41790, i5=10900, i6=0;
        byte by=-65;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 57.130561);
        FuzzerUtils.init(lArr, 1L);

        dArr[(i3 >>> 1) % N] += -11399;
        i4 = 1;
        do {
            if (i4 != 0) {
                vMeth_check_sum += i3 + i4 + by + i5 + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                    FuzzerUtils.checkSum(lArr);
                return;
            }
            i3 = i4;
            lArr[i4] += i3;
            i3 += (0 + (i4 * i4));
            by <<= (byte)i4;
            for (i5 = 1; i5 < 5; i5 += 2) {
                try {
                    i6 = (i3 / i3);
                    i3 = (i6 / 156);
                    i6 = (-54 / i3);
                } catch (ArithmeticException a_e) {}
                i3 += (int)Test.instanceCount;
                i6 += (47591 + (i5 * i5));
            }
            i3 <<= -7;
            i3 -= i3;
            i6 -= (int)Test.instanceCount;
            Test.instanceCount -= Test.instanceCount;
        } while (++i4 < 317);
        vMeth_check_sum += i3 + i4 + by + i5 + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public int iMeth1() {

        float f1=0.155F, fArr[]=new float[N];
        int i7=-6, i8=-91, i9=160, i10=5, i11=-4, i12=101, i13=-68, iArr1[]=new int[N];
        boolean b1=false;
        double d=-50.9755;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-1405);
        FuzzerUtils.init(iArr1, -11);
        FuzzerUtils.init(fArr, 2.196F);

        vMeth();
        f1 -= Test.instanceCount;
        sArr[(i7 >>> 1) % N] <<= (short)i7;
        if (b1) {
            for (i8 = 7; 358 > i8; ++i8) {
                for (i10 = 1; i10 < 5; ++i10) {
                    switch (((i10 % 6) * 5) + 100) {
                    case 105:
                        i9 = i10;
                        i7 += (i10 * i11);
                        iArr1[i8 + 1] = (int)f1;
                        for (i12 = 2; 1 < i12; i12--) {
                            iArr1[i8 + 1] = i11;
                            if (b1) break;
                            i11 += i11;
                            fArr[i10] -= f1;
                        }
                        break;
                    case 120:
                        d = Test.lFld;
                    case 125:
                        i13 -= i8;
                    case 128:
                        i7 = (int)Test.lFld;
                        break;
                    case 119:
                        i9 -= (int)-30443L;
                        break;
                    case 114:
                        Test.lFld |= i12;
                    default:
                        iArr1[i10] = 4;
                    }
                }
            }
        } else {
            i7 = (int)d;
        }
        long meth_res = Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public boolean bMeth(int i1) {

        int i2=-6, i14=-29589, i15=215, i16=-19016;
        float f=104.772F;
        long l=-186L;
        short s1=4325;

        i1 = (int)((i1 + (i1 * i1)) - ((Test.instanceCount * 45932) + (i1 + i1)));
        i2 = 1;
        while (++i2 < 362) {
            Test.instanceCount = (long)(f++);
            i1 *= iMeth1();
            if (false) {
                i1 += (53869 + (i2 * i2));
                Test.lFld &= i2;
                f *= i14;
            } else {
                for (l = 1; 5 > l; l++) {
                    i16 = 1;
                    while (++i16 < 2) {
                        i14 >>= 51242;
                        s1 = (short)i1;
                        f += i16;
                        byArrFld[i16 + 1] *= (byte)Test.dFld;
                        i14 &= 24482;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + Float.floatToIntBits(f) + i14 + l + i15 + i16 + s1;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i17=-57116, i18=249, i19=-227, i20=140, i21=18823, i22=6, i23=-6, i24=161, i25=-27176, iArr2[]=new int[N],
            iArr3[]=new int[N];
        double d1=-45.107888;
        float f2=-1.147F;
        byte by1=24;
        boolean b2=true;

        FuzzerUtils.init(iArr2, 2);
        FuzzerUtils.init(iArr3, -55119);

        iMeth(bMeth(iFld), (short)(-19137));
        iArr2[(iFld >>> 1) % N] = iFld;
        for (i17 = 240; i17 > 8; i17--) {
            for (i19 = 1; i19 < 108; i19++) {
                for (d1 = 1; d1 < 2; d1++) {
                    i21 = i20;
                    i21 = (int)1303882787042679874L;
                    Test.lFld += (-44 + (d1 * d1));
                    sFld = (short)188;
                    sFld &= (short)Test.lFld;
                    lArrFld[i19] -= sFld;
                    Test.lFld -= -3994853380L;
                }
            }
            for (i22 = 1; 108 > i22; i22++) {
                f2 += i17;
                switch ((i17 % 6) + 103) {
                case 103:
                    iArr2[i22] <<= i18;
                    Test.lFld = by1;
                    by1 += (byte)i22;
                    iArr2[i17 - 1] -= i23;
                    break;
                case 104:
                    Test.instanceCount = Test.lFld;
                    break;
                case 105:
                    Test.instanceCount *= 122;
                    if (b2) {
                        iArr2[i22 + 1] -= i20;
                    } else {
                        iArr3 = iArr2;
                    }
                    for (i24 = 2; i24 > i22; i24--) {
                        Test.lFld = i22;
                        iFld = i17;
                        f2 += i24;
                        Test.dFld = f2;
                        fArrFld[i24][i17 + 1] *= -26292;
                    }
                    break;
                case 106:
                    i20 <<= i23;
                case 107:
                    f2 -= i23;
                    break;
                case 108:
                    i25 += -5;
                    break;
                default:
                    if (b2) continue;
                }
            }
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 d1 i21 = " + i20 + "," + Double.doubleToLongBits(d1) + "," + i21);
        FuzzerUtils.out.println("i22 i23 f2 = " + i22 + "," + i23 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("by1 b2 i24 = " + by1 + "," + (b2 ? 1 : 0) + "," + i24);
        FuzzerUtils.out.println("i25 iArr2 iArr3 = " + i25 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.dFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iFld sFld byArrFld = " + iFld + "," + sFld + "," + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("lArrFld fArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Wed Jul  5 07:48:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4179414821137159137L;
    public static volatile float fFld=-2.34F;
    public int iFld=-248;
    public static byte byFld=-86;
    public static double dFld=-49.55165;
    public static boolean bFld=true;
    public static volatile short sFld=13042;
    public long lFld=-2707142144618784895L;
    public static int iArrFld[]=new int[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 25501);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(byte by) {

        int i6=31550, i7=-42912, i8=11, i9=-235, i10=-227, i11=5, i12=-34393, i13=6943, iArr[]=new int[N];
        short s=20092;
        boolean b=false;
        long l=4055167146L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-83);
        FuzzerUtils.init(iArr, 22527);

        i6 = i6;
        for (i7 = 3; i7 < 397; i7++) {
            Test.dFld += i6;
            byArr[i7 + 1] += (byte)Test.fFld;
            Test.instanceCount /= 37L;
            i9 = -91;
            for (i10 = 1; i10 < 4; ++i10) {
                s += (short)i10;
                for (i12 = 1; i12 < 2; i12++) {
                    if (b) break;
                    switch ((i10 % 1) + 50) {
                    case 50:
                        l += (((i12 * i6) + i7) - Test.instanceCount);
                        break;
                    default:
                        if (b) {
                            iArr[i7 + 1] -= (int)Test.fFld;
                        }
                    }
                }
                Test.byFld += (byte)(-3313207712L + (i10 * i10));
            }
        }
        long meth_res = by + i6 + i7 + i8 + i9 + i10 + i11 + s + i12 + i13 + (b ? 1 : 0) + l +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i5=-4, i14=156, i15=7, i16=-7, i17=61035, iArr1[]=new int[N];
        boolean b1=false;
        short s1=-9500;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -54.347F);
        FuzzerUtils.init(iArr1, -105);

        fArr[(i5 >>> 1) % N] -= fMeth(Test.byFld);
        switch (((i5 >>> 1) % 1) + 90) {
        case 90:
            Test.fFld -= i5;
            for (i14 = 11; i14 < 299; ++i14) {
                i15 -= i15;
                b1 = b1;
                for (i16 = 1; i16 < 6; i16++) {
                    Test.fFld -= i14;
                    i15 += i17;
                    Test.instanceCount += (((i16 * Test.instanceCount) + Test.byFld) - i15);
                    switch (((i16 % 9) * 5) + 50) {
                    case 68:
                        switch (((i16 % 9) * 5) + 4) {
                        case 26:
                            b1 = b1;
                            s1 *= (short)-1.885F;
                            i17 += (((i16 * Test.instanceCount) + i14) - i15);
                        case 25:
                            Test.dFld = i17;
                        case 34:
                            i17 = i16;
                            break;
                        case 5:
                            i15 >>= i14;
                        case 43:
                            i17 += (i16 - Test.instanceCount);
                            break;
                        case 16:
                            if (b1) continue;
                            break;
                        case 20:
                            if (i14 != 0) {
                                vMeth_check_sum += i5 + i14 + i15 + (b1 ? 1 : 0) + i16 + i17 + s1 +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                            break;
                        case 9:
                            i15 = i16;
                            break;
                        case 18:
                            i17 *= (int)377362048L;
                            break;
                        }
                    case 57:
                        i15 += (int)Test.instanceCount;
                    case 83:
                        iArr1[i14 + 1] += i14;
                    case 74:
                        i17 = (int)Test.instanceCount;
                        break;
                    case 53:
                        i5 = i17;
                    case 92:
                        Test.instanceCount += (long)Test.fFld;
                        break;
                    case 84:
                        Test.instanceCount += (i16 * i16);
                        break;
                    case 56:
                        iArr1[i14] |= -172;
                        break;
                    case 55:
                        i17 <<= i17;
                        break;
                    default:
                        iArr1[i16] += (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += i5 + i14 + i15 + (b1 ? 1 : 0) + i16 + i17 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(float f, int i1, int i2) {

        int i3=-106, i4=-120, i18=-60955;

        for (i3 = 10; 236 > i3; i3++) {
            i4 += (i3 ^ Test.instanceCount);
            vMeth();
            Test.byFld += (byte)(((i3 * i2) + i3) - iFld);
            i1 += i3;
            iFld = iFld;
            if (iFld != 0) {
            }
            Test.instanceCount = i3;
        }
        i18 = 397;
        do {
            if (Test.bFld) continue;
            Test.dFld += -1.733F;
            i1 += iFld;
            Test.instanceCount -= (long)f;
            Test.fFld += -126.564F;
            Test.dFld -= Test.sFld;
        } while ((i18 -= 3) > 0);
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-42776, i19=193, i20=12, i21=-138, i22=-22551, i23=1;
        short sArr[]=new short[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(sArr, (short)-1718);
        FuzzerUtils.init(fArr1, 101.664F);

        Test.fFld -= -31221;
        switch (((((int)(-5.199F * iFld)) >>> 1) % 7) + 66) {
        case 66:
            i = 1;
            do {
                Test.byFld <<= (byte)iMeth(Test.fFld, iFld, iFld);
                Test.instanceCount += (((i * Test.fFld) + i) - iFld);
                iFld &= i;
                Test.fFld -= 43;
                i19 = 1;
                while (++i19 < 160) {
                    Test.fFld *= Test.byFld;
                }
                for (i20 = 160; i20 > 1; --i20) {
                    sArr = FuzzerUtils.short1array(N, (short)-1158);
                    i21 >>>= i20;
                    iFld -= 405;
                    i21 *= i;
                    Test.sFld += (short)(-14895 + (i20 * i20));
                    Test.sFld += (short)(((i20 * Test.instanceCount) + i) - i);
                    iFld += (-9333 + (i20 * i20));
                    for (i22 = 2; i22 > i20; --i22) {
                        Test.byFld >>>= (byte)Test.instanceCount;
                        i23 += (159 + (i22 * i22));
                        Test.dFld += lFld;
                        try {
                            i21 = (i20 / -2082);
                            iFld = (iFld / -149);
                            i21 = (i19 / Test.iArrFld[i22]);
                        } catch (ArithmeticException a_e) {}
                        i21 *= (int)Test.dFld;
                        i23 += i22;
                        i23 = 9;
                        switch (((i20 % 7) * 5) + 49) {
                        case 59:
                            Test.dFld = 38297;
                            iFld += i;
                            i23 = i23;
                            break;
                        case 82:
                            fArr1[i + 1] -= -29621L;
                        case 55:
                            i21 -= (int)Test.instanceCount;
                            break;
                        case 61:
                            lFld = lFld;
                            break;
                        case 63:
                            fArrFld = fArrFld;
                        case 67:
                            Test.iArrFld[i22 + 1] += (int)Test.dFld;
                            break;
                        case 54:
                            iFld ^= i19;
                            break;
                        default:
                            i23 = i19;
                        }
                    }
                }
            } while (++i < 157);
            break;
        case 67:
            Test.dFld = i23;
            break;
        case 68:
            Test.instanceCount = i23;
            break;
        case 69:
            iFld += i19;
            break;
        case 70:
            i23 *= 49658;
            break;
        case 71:
            lFld = Test.instanceCount;
            break;
        case 72:
            Test.dFld = -70;
            break;
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("sArr fArr1 = " + FuzzerUtils.checkSum(sArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + iFld);
        FuzzerUtils.out.println("Test.byFld Test.dFld Test.bFld = " + Test.byFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld lFld Test.iArrFld = " + Test.sFld + "," + lFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

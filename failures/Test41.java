// Generated by Java* Fuzzer test generator (1.0.001). Thu Jul 27 18:43:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-958134829L;
    public static float fFld=112.732F;
    public static volatile byte byFld=107;
    public static volatile int iFld=10;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-13765);
    }

    public static long dMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=-23873, i6=61034, i7=-1886;
        long l=-7L;
        boolean b=false;

        i5 = (int)-8L;
        i6 = 1;
        do {
            Test.instanceCount += i6;
            Test.fFld = -25.906F;
            if (b) {
                Test.byFld -= (byte)244;
                for (l = 1; l < 13; l++) {
                    i7 = (int)Test.instanceCount;
                    i5 = i5;
                    if (b) continue;
                    i5 /= (int)((long)(Test.fFld) | 1);
                    switch (((i6 % 9) * 5) + 84) {
                    case 106:
                        Test.instanceCount = i7;
                        break;
                    case 91:
                        Test.iFld = i6;
                        break;
                    case 112:
                        i5 += (int)(l * l);
                        break;
                    case 123:
                        i7 -= (int)l;
                        break;
                    case 98:
                        Test.sArrFld[(int)(l)] = (short)Test.iFld;
                    case 86:
                        if (i7 != 0) {
                            vMeth_check_sum += i5 + i6 + l + i7 + (b ? 1 : 0);
                            return;
                        }
                        break;
                    case 117:
                    case 113:
                        Test.byFld = (byte)Test.iFld;
                        break;
                    case 124:
                        Test.iFld %= (int)-98.83778;
                    }
                }
            }
        } while ((i6 += 2) < 237);
        vMeth_check_sum += i5 + i6 + l + i7 + (b ? 1 : 0);
    }

    public static byte byMeth(int i3) {

        int i4=-7, i8=102, i9=3, i10=6868, i11=-11, iArr[]=new int[N];
        double d1=-15.27574;

        FuzzerUtils.init(iArr, 6);

        i3 *= (int)Test.instanceCount;
        i4 = 1;
        do {
            vMeth();
            i3 += i4;
            for (i8 = 6; i8 > i4; i8 -= 2) {
                d1 = 12;
                i9 += (i8 - i4);
                Test.iFld += i8;
                for (i10 = i8; i10 < 1; i10++) {
                    Test.fFld += i9;
                    iArr[i10 - 1] = i8;
                    Test.iFld = Test.byFld;
                    Test.instanceCount >>= i11;
                    iArr[i8 + 1] >>= Test.iFld;
                    i3 -= (int)Test.instanceCount;
                }
            }
        } while (++i4 < 281);
        long meth_res = i3 + i4 + i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static double dMeth() {

        int i=5, i1=-14693, i2=10, i12=212, iArr1[]=new int[N];
        double d=-50.43848;
        boolean b1=true, b2=false, b3=true;
        short s=18895;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)78);
        FuzzerUtils.init(iArr1, -7);

        byArr[(i >>> 1) % N] = (byte)(-((d++) * (++Test.fFld)));
        for (i1 = 10; i1 < 233; ++i1) {
            i = (-(Integer.reverseBytes(i) - byMeth(i2)));
            Test.iFld += i1;
            Test.iFld += (int)2.435F;
            i2 += (((i1 * i1) + i2) - Test.byFld);
            i += i1;
            Test.fFld *= i1;
            Test.fFld = 62546;
            b1 = b2;
            b3 = true;
        }
        i12 = 372;
        do {
            i2 -= i12;
            s += (short)i2;
            iArr1[i12 + 1] = -10727;
        } while ((i12 -= 3) > 0);
        long meth_res = i + Double.doubleToLongBits(d) + i1 + i2 + (b1 ? 1 : 0) + (b2 ? 1 : 0) + (b3 ? 1 : 0) + i12 + s
            + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=10, i14=-115, i15=4, i16=59964, i17=59916, i18=192, i19=48720, i20=-51705, iArr2[]=new int[N];
        short s1=-5756;
        boolean b4=true;
        double d2=23.121945, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -58800L);
        FuzzerUtils.init(iArr2, 199);
        FuzzerUtils.init(dArr, 0.122852);

        Test.instanceCount += Math.max((int)(dMeth() - -6), Test.iFld);
        for (i13 = 5; i13 < 131; i13++) {
            for (i15 = 8; 199 > i15; ++i15) {
                i16 = (int)Test.fFld;
                Test.iFld -= (int)Test.instanceCount;
                i14 += (i15 * Test.fFld);
                lArr[i13] = Test.instanceCount;
                i14 += i15;
                Test.iFld -= (int)Test.instanceCount;
                i16 += (int)-1126506950L;
                for (i17 = 2; 1 < i17; i17--) {
                    iArr2[i17] = i14;
                    i16 *= i14;
                    if (b4) {
                        iArr2[i13] -= (int)Test.fFld;
                    } else if (b4) {
                        Test.byFld += (byte)s1;
                    } else if (b4) {
                        i16 -= -95;
                    } else {
                        Test.iFld = i18;
                        dArr[i15 - 1] -= Test.fFld;
                        try {
                            i16 = (iArr2[i13] / iArr2[i13]);
                            i18 = (i16 % iArr2[i17 - 1]);
                            i14 = (-20253 % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                    }
                    i14 += (i17 - Test.instanceCount);
                    Test.iFld += i14;
                    Test.fFld *= -63756;
                    lArr[i17 - 1] = i13;
                    d2 = i13;
                    iArr2[i15] -= (int)-24390L;
                    try {
                        Test.iFld = (1941215168 / i14);
                        Test.iFld = (i13 / i15);
                        Test.iFld = (Test.iFld / 172710210);
                    } catch (ArithmeticException a_e) {}
                }
                for (i19 = 1; i19 < 2; i19 += 3) {
                    Test.instanceCount = Test.instanceCount;
                    Test.fFld = 22686;
                }
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("s1 b4 d2 = " + s1 + "," + (b4 ? 1 : 0) + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i19 i20 lArr = " + i19 + "," + i20 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("iArr2 dArr = " + FuzzerUtils.checkSum(iArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iFld Test.sArrFld = " + Test.iFld + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  byMeth ->  byMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

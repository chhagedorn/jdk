// Generated by Java* Fuzzer test generator (1.0.001). Sat Jul 29 20:07:23 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-99L;
    public int iFld=248;
    public volatile float fFld=28.756F;
    public boolean bFld=false;
    public double dFld=-2.85920;
    public short sFld=10380;
    public static boolean bArrFld[]=new boolean[N];
    public double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld, -20421);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public long lMeth(int i10) {

        float f2=-2.348F, f3=-13.118F;
        long l=9426L;
        int i11=-5, i12=-191, i13=64, i14=-57882, i15=-6, i16=-100, i17=-40706;
        boolean b1=false, bArr[][]=new boolean[N][N];
        byte by=66;

        FuzzerUtils.init(bArr, false);

        Test.instanceCount -= Test.instanceCount;
        iFld *= iFld;
        f2 = 1;
        while (++f2 < 202) {
            fFld += (((f2 * iFld) + i10) - l);
        }
        for (i11 = 148; 3 < i11; i11 -= 2) {
            try {
                i10 = (i10 / 179);
                i10 = (61952 / i10);
                i10 = (-13953 / iFld);
            } catch (ArithmeticException a_e) {}
        }
        for (f3 = 3; f3 < 262; f3++) {
            if (true) {
                for (i14 = 1; i14 < 6; ++i14) {
                    i15 += (i14 * i14);
                    l <<= iFld;
                    b1 = b1;
                    i12 = i13;
                    for (i16 = 1; i16 < 2; ++i16) {
                        i12 -= by;
                        i17 = i13;
                        fFld += (-65 + (i16 * i16));
                        bArr[i14][(int)(f3 - 1)] = b1;
                        iFld <<= iFld;
                        b1 = b1;
                    }
                }
            } else if (b1) {
                i15 >>= i16;
            } else {
                Test.bArrFld[(int)(f3 - 1)] = b1;
            }
        }
        long meth_res = i10 + Float.floatToIntBits(f2) + l + i11 + i12 + Float.floatToIntBits(f3) + i13 + i14 + i15 +
            (b1 ? 1 : 0) + i16 + i17 + by + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth1() {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -80.303F);

        fArr[(iFld >>> 1) % N] = ((-(-120 - iFld)) - lMeth(iFld));
        vMeth1_check_sum += Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public boolean bMeth(float f, int i2) {

        float f1=-21.183F, f4=-2.742F;
        int i3=-3, i4=48, i5=-8716, i6=-2, i7=251, i8=18140, i9=-112;
        double d=-29.48216;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2581644555L);

        for (f1 = 330; f1 > 4; f1 -= 2) {
            Test.instanceCount = (--i4);
            Test.instanceCount -= 0L;
        }
        for (i5 = 245; i5 > 13; i5--) {
            for (i7 = 1; i7 < 7; i7 += 3) {
                for (d = 1; d < 4; d++) {
                    if (i2 != 0) {
                        return ((int)(Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7
                            + i8 + Double.doubleToLongBits(d) + i9 + Float.floatToIntBits(f4) +
                            FuzzerUtils.checkSum(lArr1))) % 2 > 0;
                    }
                    Test.instanceCount *= (long)(i8 += (int)((i3 - i7) * (9 * (++f))));
                    i8 -= (int)Test.instanceCount;
                    switch ((i5 % 8) + 57) {
                    case 57:
                        i4 = (int)((-118 - (i3 - i4)) - ((f + Test.instanceCount) + (Test.instanceCount /
                            (Test.instanceCount | 1))));
                        break;
                    case 58:
                        Test.instanceCount += (long)d;
                        f = (lArr1[i5 + 1] - ((Test.instanceCount + i3) + (Test.instanceCount ^ i2)));
                        break;
                    case 59:
                        iFld += (int)(((d * Test.instanceCount) + i8) - i5);
                        if (i9 != 0) {
                            return ((int)(Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 +
                                i7 + i8 + Double.doubleToLongBits(d) + i9 + Float.floatToIntBits(f4) +
                                FuzzerUtils.checkSum(lArr1))) % 2 > 0;
                        }
                        vMeth1();
                        Test.instanceCount += (long)(d - i3);
                        i3 = i9;
                        break;
                    case 60:
                        i4 <<= (int)-1L;
                        iFld += (int)((long)d ^ Test.instanceCount);
                        break;
                    case 61:
                    case 62:
                        dArrFld[i7] += f4;
                        break;
                    case 63:
                        if (false) break;
                        break;
                    case 64:
                        if (bFld) break;
                        break;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(d) + i9 + Float.floatToIntBits(f4) + FuzzerUtils.checkSum(lArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void vMeth() {

        int i=244, i1=246, i18=-41117, i19=126, i20=4;
        short s=14047;
        boolean b=true;
        byte by1=50;
        double d1=-2.57967;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 62861L);

        iFld += (iFld++);
        if (bFld) {
            for (i = 10; i < 195; ++i) {
                s += (short)(i | i);
                lArr[i + 1] <<= ((i1--) + (-(iFld + s)));
                b = (b = (bMeth(-14.978F, i) ^ b));
                i18 = 1;
                do {
                    iFld += (i18 * i18);
                    lArr[i] -= 3;
                    for (i19 = 1; i19 < 3; i19++) {
                        lArr = FuzzerUtils.long1array(N, (long)-790002045L);
                        iFld >>>= s;
                        by1 += (byte)iFld;
                        i20 -= i20;
                        if (bFld) break;
                        i20 += (((i19 * i1) + Test.instanceCount) - i18);
                        if (i19 != 0) {
                            vMeth_check_sum += i + i1 + s + (b ? 1 : 0) + i18 + i19 + i20 + by1 +
                                Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                    }
                    fFld += fFld;
                    Test.iArrFld[i18 + 1] += (int)Test.instanceCount;
                    fFld += (float)d1;
                } while ((i18 += 2) < 9);
            }
        } else {
            iFld = i18;
        }
        vMeth_check_sum += i + i1 + s + (b ? 1 : 0) + i18 + i19 + i20 + by1 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=14, i22=31347, i23=197, i24=4708, i25=95, i26=-70, i27=27269, i28=11183, i29=-11, i30=23771, i31=49502,
            i32=-14, i33=-88;
        long l1=50L, l2=-3609977332L;
        double d2=127.6097;
        byte by2=-22;
        float f6=119.818F;

        vMeth();
        iFld >>= -136;
        fFld = (float)-14.51796;
        for (i21 = 5; i21 < 300; ++i21) {
            i22 = i21;
            i22 = (int)Test.instanceCount;
            fFld *= (float)dFld;
            for (l1 = 1; l1 < 85; ++l1) {
                i22 += (int)fFld;
            }
        }
        i23 -= i23;
        fFld -= l1;
        i24 = 1;
        do {
            float f5=-2.726F;
            f5 = (float)d2;
            Test.instanceCount += l1;
            Test.instanceCount -= Test.instanceCount;
            for (l2 = 158; l2 > i24; l2--) {
                i22 = by2;
            }
            i22 *= iFld;
            i26 = 158;
            do {
                fFld += fFld;
            } while (--i26 > 0);
            Test.instanceCount = sFld;
            Test.instanceCount += (43 + (i24 * i24));
            dFld += i22;
            i22 += (i24 * l1);
        } while (++i24 < 159);
        i27 = (int)l2;
        for (i28 = 344; i28 > 10; --i28) {
            Test.iArrFld[i28 - 1] -= i22;
            iFld += (i28 - i29);
            i27 >>>= (int)l1;
            i25 >>= (int)l1;
            bFld = bFld;
            for (i30 = i28; i30 < 75; ++i30) {
                try {
                    i23 = (i22 % i28);
                    i29 = (-63624 / i26);
                    i27 = (Test.iArrFld[i28] % i31);
                } catch (ArithmeticException a_e) {}
                lArrFld[i28 + 1] -= i31;
                Test.instanceCount *= i30;
                i27 += (i30 * i30);
                for (i32 = 1; i32 > i28; i32 -= 2) {
                    Test.iArrFld[i32 + 1] *= i32;
                }
            }
            sFld += (short)(((i28 * f6) + l2) - l1);
            Test.iArrFld[i28 + 1] = sFld;
        }

        FuzzerUtils.out.println("i21 i22 l1 = " + i21 + "," + i22 + "," + l1);
        FuzzerUtils.out.println("i23 i24 d2 = " + i23 + "," + i24 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("l2 i25 by2 = " + l2 + "," + i25 + "," + by2);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 f6 = " + i32 + "," + i33 + "," + Float.floatToIntBits(f6));

        FuzzerUtils.out.println("Test.instanceCount iFld fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("bFld dFld sFld = " + (bFld ? 1 : 0) + "," + Double.doubleToLongBits(dFld) + "," +
            sFld);
        FuzzerUtils.out.println("Test.bArrFld dArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 bMeth vMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

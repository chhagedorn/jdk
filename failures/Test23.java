// Generated by Java* Fuzzer test generator (1.0.001). Thu Jul  6 03:42:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-40582L;
    public static int iFld=-19647;
    public static float fFld=-4.186F;
    public volatile byte byFld=-117;
    public static int iFld1=9;
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -5.5617);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1, int i2, short s) {

        int i3=60, i4=36887, i5=1, i6=-198, i7=-223, iArr1[]=new int[N];
        boolean b=false;
        float fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 252);
        FuzzerUtils.init(fArr, 2.552F);
        FuzzerUtils.init(lArr, 3030544112896558077L);

        i3 = 1;
        while (++i3 < 136) {
            i2 -= -238;
            iArr1 = FuzzerUtils.int1array(N, (int)35996);
            fArr = fArr;
            for (i4 = 1; i4 < 12; ++i4) {
                switch ((i3 % 1) + 63) {
                case 63:
                    i2 -= i5;
                    break;
                default:
                    Test.fFld = Test.instanceCount;
                }
                for (i6 = 2; i6 > i3; i6 -= 2) {
                    if (i1 != 0) {
                        vMeth1_check_sum += i1 + i2 + s + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    iArr1[i6 + 1] *= i7;
                    lArr[i4 + 1][i6] = 95;
                    if (b) continue;
                    iArr1[i3 - 1] |= i5;
                    iArr1[i4 + 1] <<= i1;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + s + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(byte by, long l) {

        float f=2.1000F;
        double d=124.93417;
        short s1=-26741;
        int i8=-12, i9=2, i10=2, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -218);

        Test.iFld *= (int)(++f);
        d += (6 - iArr[(Test.iFld >>> 1) % N][(-59597 >>> 1) % N]);
        vMeth1(Test.iFld, Test.iFld, s1);
        iArr[(-116 >>> 1) % N][(Test.iFld >>> 1) % N] = (int)Test.fFld;
        Test.iFld += Test.iFld;
        Test.iFld += Test.iFld;
        d *= Test.iFld;
        for (i8 = 292; i8 > 8; i8 -= 2) {
            Test.iFld -= i8;
        }
        i10 = Test.iFld;
        vMeth_check_sum += by + l + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + s1 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i) {

        byte by1=-109;

        vMeth(by1, Test.instanceCount);
        i = -58;
        long meth_res = i + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i11=160, i12=-5, i13=0, i14=-161, i15=-100, i16=20964, i17=130, i18=-7, i19=57627, i20=-64505, i21=205,
            iArr2[]=new int[N];
        boolean b1=true;
        short s2=-20895;
        byte by2=-78;
        long lArr1[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr2, 13);
        FuzzerUtils.init(lArr1, -1L);
        FuzzerUtils.init(fArr1, -75.963F);

        Test.instanceCount <<= iMeth(Test.iFld);
        for (i11 = 290; i11 > 11; --i11) {
            i12 += (i11 * i11);
            i13 = 1;
            while (++i13 < 90) {
                i14 = 1;
                do {
                    Test.dArrFld[i13 + 1][i14 - 1] -= Test.fFld;
                    Test.instanceCount -= byFld;
                    i12 = i12;
                    Test.iFld += i14;
                    Test.iFld += i13;
                } while (--i14 > 0);
                if (b1) break;
            }
            if (b1) continue;
            s2 ^= (short)40514;
            for (i15 = 2; i15 < 90; i15++) {
                i12 |= i16;
                switch (((i15 % 9) * 5) + 26) {
                case 28:
                    iArr2 = iArr2;
                    for (i17 = 1; i17 < 2; i17++) {
                        Test.iFld = i15;
                        i12 += (101 + (i17 * i17));
                    }
                    switch (((i15 % 2) * 5) + 45) {
                    case 47:
                        lArr1[i11] = 57913L;
                        i16 -= i16;
                        Test.iFld1 = 90;
                        by2 += (byte)i19;
                    case 50:
                        switch ((i11 % 4) + 86) {
                        case 86:
                            for (i20 = 1; i20 < 2; ++i20) {
                                fArr1[i15] -= i20;
                            }
                            Test.instanceCount = i20;
                            if (b1) break;
                        case 87:
                            Test.iFld1 += -8267;
                        case 88:
                            Test.iFld1 /= -38042;
                            break;
                        case 89:
                            Test.fFld += i19;
                            break;
                        default:
                            Test.instanceCount = Test.iFld1;
                        }
                        break;
                    default:
                        i19 += (9 + (i15 * i15));
                    }
                case 44:
                    i12 -= -15585;
                    break;
                case 29:
                    i19 += 4;
                    break;
                case 27:
                    i18 += (((i15 * i17) + i21) - Test.instanceCount);
                    break;
                case 51:
                    i18 = (int)50.891F;
                    break;
                case 41:
                    Test.instanceCount += (long)(-103.874F + (i15 * i15));
                case 56:
                    iArr2[i15 + 1] = i17;
                case 52:
                    i12 += (((i15 * i13) + i14) - i17);
                    break;
                case 47:
                    if (b1) break;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 b1 s2 = " + i14 + "," + (b1 ? 1 : 0) + "," + s2);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 by2 i19 = " + i18 + "," + by2 + "," + i19);
        FuzzerUtils.out.println("i20 i21 iArr2 = " + i20 + "," + i21 + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("lArr1 fArr1 = " + FuzzerUtils.checkSum(lArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("byFld Test.iFld1 Test.dArrFld = " + byFld + "," + Test.iFld1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

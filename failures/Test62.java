// Generated by Java* Fuzzer test generator (1.0.001). Sat Sep 16 12:14:21 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-253L;
    public static short sFld=-21218;
    public static float fFld=1.998F;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld1[][]=new int[N][N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -106);
        FuzzerUtils.init(Test.fArrFld, 93.138F);
        FuzzerUtils.init(Test.lArrFld, 57150L);
        FuzzerUtils.init(Test.iArrFld1, -53806);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth() {

        int i=-38871, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -8291);

        i |= (int)(((Test.instanceCount--) * (i *= i)) * (i++));
        iArr[(i >>> 1) % N] = (--iArr[(i >>> 1) % N]);
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i4, long l1, double d) {

        int i5=20434, i6=-10, i7=132, i8=-6, i9=-19234, i10=-32;
        float f=127.30F;
        byte by=32;
        boolean b=false;

        i5 = 1;
        while (++i5 < 366) {
            switch (((i5 % 9) * 5) + 37) {
            case 68:
                f -= -12774;
                for (i6 = 1; i6 < 5; i6++) {
                    i4 += (((i6 * Test.instanceCount) + Test.instanceCount) - i7);
                    i8 = 1;
                    do {
                        i7 = -62760;
                        i4 = i7;
                        d -= i4;
                        d += i5;
                        Test.fArrFld[i6 - 1] /= ((long)(d) | 1);
                        i4 = i4;
                    } while (++i8 < 2);
                    for (i9 = 1; i9 < 2; ++i9) {
                        Test.iArrFld[i5] += i7;
                        i4 -= by;
                    }
                }
                break;
            case 74:
                l1 = i5;
                break;
            case 57:
                if (b) continue;
                break;
            case 73:
                f += i9;
                break;
            case 61:
                i7 += (i5 - i10);
                break;
            case 63:
                Test.iArrFld[i5 + 1] = (int)l1;
                break;
            case 79:
                i10 &= i7;
                break;
            case 45:
                Test.iArrFld[i5 - 1] -= (int)d;
                break;
            case 66:
                i10 -= i9;
                break;
            default:
                i10 += i8;
            }
        }
        long meth_res = i4 + l1 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 +
            by + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth1(int i2, int i3, short s) {

        double d1=52.25966;
        float f1=1.293F, f2=-17.1014F;
        int i11=-13, i12=-187, i13=-9, i14=1, i15=111;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6781387057156130320L);

        switch (((iMeth(-25905, Test.instanceCount, d1) >>> 1) % 2) + 63) {
        case 63:
            Test.iArrFld[(i3 >>> 1) % N] = i3;
            for (f1 = 5; 173 > f1; f1++) {
                for (i12 = 1; 9 > i12; ++i12) {
                    Test.iArrFld[i12 - 1] >>= (int)Test.instanceCount;
                    for (i14 = 1; i14 < 2; i14++) {
                        i13 -= i11;
                        Test.instanceCount <<= i13;
                        f2 += (((i14 * f1) + i14) - Test.instanceCount);
                        f2 *= i14;
                        f2 -= f2;
                        i13 += (int)d1;
                        Test.iArrFld[i14 - 1] -= -119;
                        i15 += 14;
                        b1 = b1;
                    }
                }
            }
            break;
        case 64:
            lArr[(i11 >>> 1) % N] = -33253;
            break;
        }
        long meth_res = i2 + i3 + s + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 +
            i15 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(long l) {

        int i16=-2, i17=-31751, i18=53986, i19=29095, i20=-98, i21=164;
        boolean b2=false;
        double d2=0.2527;

        lMeth1(i16, i16, Test.sFld);
        for (i17 = 14; i17 < 246; i17++) {
            switch ((i17 % 4) + 87) {
            case 87:
                if (b2) {
                    if (i17 != 0) {
                    }
                    l += (((i17 * i16) + i16) - Test.fFld);
                    for (i19 = 1; i19 < 7; i19++) {
                        i16 = -226;
                        l <<= -535017426498653153L;
                        i18 = (int)Test.instanceCount;
                        i16 += (int)(-9192L + (i19 * i19));
                        i20 += i16;
                        i21 = 1;
                        do {
                            Test.fFld += (1605838843L + (i21 * i21));
                            i20 += (((i21 * Test.fFld) + i17) - Test.instanceCount);
                        } while (++i21 < 2);
                    }
                } else {
                    Test.sFld = (short)i20;
                }
                break;
            case 88:
                i16 += Test.sFld;
            case 89:
                i16 >>= i18;
                break;
            case 90:
                d2 *= 0.372F;
                break;
            default:
                Test.instanceCount &= i18;
            }
        }
        long meth_res = l + i16 + i17 + i18 + i19 + i20 + i21 + (b2 ? 1 : 0) + Double.doubleToLongBits(d2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=43040, i22=-9, i23=-37645, i24=209, i25=-157, i26=13, i27=-15067, i28=-203, i29=-145, i30=34841;
        double d3=0.18358, dArr[]=new double[N];
        byte by1=-73;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, 65.10587);

        for (int smallinvoc=0; smallinvoc<651; smallinvoc++) vSmallMeth();
        Test.iArrFld[(-66 >>> 1) % N] = (--i1);
        Test.iArrFld[(3 >>> 1) % N] -= (int)lMeth(Test.instanceCount);
        Test.lArrFld[(i1 >>> 1) % N] = i1;
        for (i22 = 18; i22 < 342; ++i22) {
            Test.instanceCount = i23;
            i1 += (((i22 * i23) + i23) - i23);
            bArr = bArr;
            Test.fFld -= Test.instanceCount;
            for (i24 = 3; i24 < 78; i24++) {
                d3 -= i24;
                Test.iArrFld[i24] = (int)Test.instanceCount;
                i1 += (i24 * i24);
                i25 -= 28078;
                Test.lArrFld[i22] >>= 114;
                Test.iArrFld1 = Test.iArrFld1;
                for (i26 = 2; i26 > i22; --i26) {
                    switch ((i24 % 1) + 70) {
                    case 70:
                        Test.instanceCount += (((i26 * by1) + i22) - i1);
                        Test.instanceCount *= i1;
                        Test.iArrFld1[i26][i24 + 1] = by1;
                        sArrFld[i24] += (short)i26;
                    }
                }
                by1 = (byte)i1;
                dArr[i24] -= i25;
                i23 -= (int)d3;
            }
            d3 += Test.instanceCount;
            for (i28 = 78; i28 > 3; --i28) {
                i30 = 1;
                while (++i30 < 2) {
                    Test.iArrFld1[(i29 >>> 1) % N] = Test.iArrFld1[i30 - 1];
                    d3 = Test.fFld;
                }
            }
        }

        FuzzerUtils.out.println("i1 i22 i23 = " + i1 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 d3 = " + i24 + "," + i25 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i26 i27 by1 = " + i26 + "," + i27 + "," + by1);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("bArr dArr = " + FuzzerUtils.checkSum(bArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Thu Jul 13 15:49:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5413L;
    public static volatile double dFld=0.122699;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, short s) {

        int i4=85, i5=12345, i6=-10, i7=4222, i8=-49, i9=0;
        float f2=-2.353F;
        boolean b=false;
        byte by1=36, byArr[]=new byte[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)-64);
        FuzzerUtils.init(lArr1, -173L);

        for (i4 = 2; i4 < 177; ++i4) {
            i5 += i4;
            for (i6 = 1; 9 > i6; ++i6) {
                Test.instanceCount = 188;
                switch (((i5 >>> 1) % 5) + 51) {
                case 51:
                    i3 = s;
                    Test.instanceCount += (long)Test.dFld;
                    byArr[i4] >>= (byte)i7;
                    Test.instanceCount += (long)f2;
                    break;
                case 52:
                    f2 += -54229L;
                    switch ((i4 % 2) + 56) {
                    case 56:
                        b = b;
                    case 57:
                        for (i8 = 2; i8 > i6; i8 -= 3) {
                            if (b) break;
                            lArr1[i8][i8] >>= i5;
                        }
                        break;
                    }
                    break;
                case 53:
                    Test.dFld -= 57465;
                    break;
                case 54:
                    by1 += (byte)i6;
                    break;
                case 55:
                    if (i6 != 0) {
                    }
                    break;
                }
            }
        }
        long meth_res = i3 + s + i4 + i5 + i6 + i7 + Float.floatToIntBits(f2) + (b ? 1 : 0) + i8 + i9 + by1 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, byte by) {

        int i2=-8869, i10=-141, i11=850, i12=-6, i13=-50, iArr[]=new int[N];
        short s1=2877;
        boolean b1=false;

        FuzzerUtils.init(iArr, 17437);

        i2 -= (int)lMeth(58785, (short)(24839));
        i10 = 1;
        while ((i10 += 2) < 351) {
            for (i11 = 9; i11 > 1; i11--) {
                i2 += i11;
                by += (byte)i11;
                if (b1) {
                    i13 = 1;
                    do {
                        float f3=-65.467F;
                        i2 = -3614;
                        l -= (long)f3;
                        switch ((i13 % 2) + 125) {
                        case 125:
                            i2 -= i2;
                            l += (i13 ^ i13);
                            try {
                                iArr[i13] = (i2 / i11);
                                i2 = (1677211903 / i12);
                                i2 = (i11 / 5805);
                            } catch (ArithmeticException a_e) {}
                        case 126:
                            iArr[i11 - 1] = i12;
                            if (i12 != 0) {
                                vMeth_check_sum += l + by + i2 + i10 + i11 + i12 + i13 + s1 + (b1 ? 1 : 0) +
                                    FuzzerUtils.checkSum(iArr);
                                return;
                            }
                            break;
                        default:
                            i12 = (int)Test.dFld;
                        }
                    } while (++i13 < 2);
                } else if (b1) {
                    l += (i11 * i11);
                    vMeth_check_sum += l + by + i2 + i10 + i11 + i12 + i13 + s1 + (b1 ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                } else if (b1) {
                    i2 = s1;
                }
            }
        }
        vMeth_check_sum += l + by + i2 + i10 + i11 + i12 + i13 + s1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(float f1, int i1) {

        int i14=-45058, i15=26604, i16=12, i17=-6;
        byte by2=78;
        boolean b2=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -1582625356L);

        vMeth(-530542299950599910L, (byte)(-103));
        for (i14 = 6; i14 < 344; i14++) {
            lArr2 = FuzzerUtils.long1array(N, (long)46444L);
            i16 = 1;
            do {
                i17 = 1;
                while (++i17 < 1) {
                    lArr2 = lArr2;
                    by2 -= (byte)i16;
                    if (i15 != 0) {
                    }
                    f1 += i16;
                    Test.instanceCount -= i15;
                    Test.instanceCount >>= Test.instanceCount;
                    if (i17 != 0) {
                    }
                    i1 -= -81;
                }
                if (b2) continue;
                i1 |= i17;
            } while (++i16 < 5);
        }
        long meth_res = Float.floatToIntBits(f1) + i1 + i14 + i15 + i16 + i17 + by2 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-174, i18=-1, i19=24, i20=6969, i21=5, i22=16671, iArr1[][]=new int[N][N];
        float f=76.475F;
        byte by3=19;
        long l1=2724L, lArr[][]=new long[N][N];
        boolean b4=true;

        FuzzerUtils.init(lArr, 2L);
        FuzzerUtils.init(iArr1, 25);

        lArr[(i >>> 1) % N][(i >>> 1) % N] = (long)(((++f) + Test.dFld) - iMeth(f, i));
        i -= (int)f;
        lArr[(-99 >>> 1) % N][(i >>> 1) % N] = Test.instanceCount;
        f -= i;
        for (i18 = 11; i18 < 194; i18++) {
            i19 += (i18 * i18);
            i19 >>= by3;
            i19 <<= -23209;
            lArr[i18 - 1][i18] = i18;
            i += i19;
            l1 = 1;
            while (++l1 < 137) {
                boolean b3=false;
                if (b3) break;
                Test.instanceCount <<= i19;
                if (false) continue;
                i19 = (int)Test.instanceCount;
            }
            i &= i18;
            f -= i18;
            f -= l1;
            b4 = b4;
        }
        Test.instanceCount = 203L;
        for (i20 = 3; i20 < 208; ++i20) {
            by3 += (byte)(i20 * i);
            i += i20;
            i21 += by3;
            i22 = 1;
            while (++i22 < 122) {
                iArr1[i22][i22] = i22;
                switch (((123 >>> 1) % 6) + 12) {
                case 12:
                    iArr1[i20][i22] = 26085;
                    iArr1[i20 + 1][i20] >>= i;
                    i19 >>= (int)Test.instanceCount;
                    break;
                case 13:
                case 14:
                    i19 = (int)Test.instanceCount;
                    break;
                case 15:
                    if (b4) continue;
                    break;
                case 16:
                    Test.instanceCount = i18;
                    break;
                case 17:
                    f = i18;
                    break;
                default:
                    try {
                        i21 = (i20 % -50481);
                        i21 = (i21 % 1442412899);
                        i21 = (i19 % i20);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }

        FuzzerUtils.out.println("i f i18 = " + i + "," + Float.floatToIntBits(f) + "," + i18);
        FuzzerUtils.out.println("i19 by3 l1 = " + i19 + "," + by3 + "," + l1);
        FuzzerUtils.out.println("b4 i20 i21 = " + (b4 ? 1 : 0) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 lArr iArr1 = " + i22 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Sat Aug 19 07:13:47 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-118L;
    public static volatile byte byFld=79;
    public static boolean bFld=false;
    public int iArrFld[][]=new int[N][N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4037L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i4=2, i5=144, i6=-14883, i7=-5439, i8=-73, i9=-198, iArr[]=new int[N];
        float f2=-55.493F;
        boolean b=true;

        FuzzerUtils.init(iArr, 213);

        Test.instanceCount >>= -24512;
        i4 = 1;
        while (++i4 < 284) {
            for (i5 = 1; i5 < 6; i5++) {
                byte by=-111;
                by = (byte)Test.instanceCount;
                Test.lArrFld[i4 + 1] += (long)f2;
            }
            for (i7 = 1; i7 < 6; ++i7) {
                i8 = i7;
                if (b) continue;
                i9 = 1;
                while (++i9 < 2) {
                    Test.byFld = (byte)i7;
                    iArr[i4] += (int)f2;
                    if (i7 != 0) {
                        vMeth_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 + (b ? 1 : 0) + i9 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i8 = i5;
                    iArr[i9] <<= i5;
                    iArr[i4 - 1] <<= i4;
                }
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 + (b ? 1 : 0) + i9 +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i3) {


        vMeth();
        long meth_res = i3;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f, float f1, double d) {

        double d1=-2.53294;
        int i2=-52246, i10=-3, i11=-83, i12=-41594, iArr1[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.765F);
        FuzzerUtils.init(iArr1, 51120);

        for (d1 = 163; d1 > 9; d1--) {
            fArr[(int)(d1 + 1)] = Float.intBitsToFloat(i2--);
            Test.lArrFld[(int)(d1)] >>= (long)(((Test.instanceCount - 0.282F) - i2) + ((i2 - d) / ((i2 + i2) | 1)));
        }
        fArr[(i2 >>> 1) % N] += lMeth(i2);
        f = 51786;
        try {
            for (i10 = 5; 146 > i10; ++i10) {
                i11 += (int)Test.instanceCount;
                f -= i10;
                i11 = i11;
                f1 = -34313L;
                i12 = 1;
                while (++i12 < 11) {
                    i11 += (i12 * i12);
                    try {
                        i2 = (i11 / -39);
                        iArr1[i12 + 1] = (i2 % 53);
                        i2 = (i11 / i11);
                    } catch (ArithmeticException a_e) {}
                    Test.byFld |= (byte)i11;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            iArr1[(i11 >>> 1) % N] += -25646;
        }
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(d1) + i2 + i10 + i11 + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=6, i1=-24584, i13=-10, i14=6, i15=-22220, i16=32222;
        float f3=-127.603F;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 0.130680);
        FuzzerUtils.init(lArr, 21970L);

        Test.instanceCount += (long)(++dArr[(9325 >>> 1) % N]);
        i = (int)(i * Long.reverseBytes(Test.instanceCount));
        i *= (int)((iArrFld[(i >>> 1) % N][(i >>> 1) % N] = (i += 236)) * (++lArr[(i >>> 1) % N]));
        i1 = 1;
        do {
            Test.instanceCount -= Integer.reverseBytes((int)((Test.instanceCount + i1) + iMeth(f3, 0.141F, 37.27560)));
            i <<= (int)-1834L;
            Test.instanceCount += (14 + (i1 * i1));
            Test.byFld += (byte)Test.instanceCount;
            for (i13 = 3; i13 < 171; i13++) {
                iArrFld[i1][i1 + 1] = i1;
                switch ((i13 % 6) + 1) {
                case 1:
                    iArrFld[i1][i13] >>= 7;
                    i += (i13 * i13);
                    Test.lArrFld[i1 - 1] = i13;
                    break;
                case 2:
                case 3:
                    i14 = i;
                    i14 |= i13;
                    break;
                case 4:
                    i ^= i;
                case 5:
                    for (i15 = 2; i15 > i1; i15 -= 2) {
                        switch (((i16 >>> 1) % 4) + 67) {
                        case 67:
                        case 68:
                            switch ((i13 % 3) + 27) {
                            case 27:
                                try {
                                    i16 = (iArrFld[i13 - 1][i15 - 1] / i1);
                                    iArrFld[i15 + 1][i13 - 1] = (i14 % 1764607650);
                                    i = (-12010 / i14);
                                } catch (ArithmeticException a_e) {}
                                Test.bFld = Test.bFld;
                            case 28:
                            case 29:
                                lArr[i15 - 1] += i14;
                            default:
                                try {
                                    i16 = (i14 % i14);
                                    i16 = (130 % iArrFld[i13][i15]);
                                    iArrFld[i15][i13 + 1] = (-237 % i1);
                                } catch (ArithmeticException a_e) {}
                                if (Test.bFld) continue;
                                Test.instanceCount -= i16;
                                lArr[i15] &= i13;
                            }
                            i16 = i1;
                            break;
                        case 69:
                            i16 += (i15 * i15);
                            break;
                        case 70:
                            i14 = (int)12L;
                        default:
                            iArrFld[i15 - 1][i13 + 1] <<= 32737;
                        }
                    }
                    break;
                case 6:
                    if (Test.bFld) continue;
                    break;
                default:
                    Test.instanceCount += (long)f3;
                }
            }
        } while (++i1 < 147);

        FuzzerUtils.out.println("i i1 f3 = " + i + "," + i1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 dArr lArr = " + i16 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount + "," + Test.byFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Wed Jul  5 20:49:50 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3714789216469668157L;
    public static float fFld=0.281F;
    public static short sFld=1478;
    public static int iFld=-11;
    public static byte byFld=-64;
    public double dFld=0.102606;
    public static volatile float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 13.688F);
        FuzzerUtils.init(Test.iArrFld, 9860);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, long l1) {

        int i3=-34871, i4=5, i5=-34911, i6=-6, i7=-13, i8=-156;
        double d=-2.121399;

        i3 -= i3;
        Test.fFld = Test.fFld;
        Test.fFld = Test.instanceCount;
        for (i4 = 10; i4 < 383; ++i4) {
            Test.instanceCount = i3;
            i3 >>= i3;
            Test.fFld = Test.sFld;
            for (i6 = 1; i6 < 5; ++i6) {
                d = i6;
                i8 = 2;
                do {
                    Test.fArrFld[i6] -= i3;
                } while (--i8 > 0);
                i3 = (int)d;
                if (false) continue;
                i5 += i6;
                Test.iArrFld = Test.iArrFld;
            }
        }
        vMeth2_check_sum += l + l1 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8;
    }

    public static void vMeth1(int i) {

        int i1=-7, i2=-5, iArr[]=new int[N];
        boolean b=false;
        byte by=64;

        FuzzerUtils.init(iArr, 43);

        for (i1 = 316; i1 > 16; i1--) {
            switch ((i1 % 7) + 61) {
            case 61:
                i += i1;
                if ((Test.fFld--) != i1) continue;
                break;
            case 62:
                Test.fFld = (iArr[i1 - 1]++);
                break;
            case 63:
                Test.instanceCount += i1;
                i2 = (--i2);
                i += (((i1 * Test.sFld) + i1) - Test.instanceCount);
                b = ((i2++) != ((-(++iArr[i1])) - (Test.fFld + Test.sFld)));
                break;
            case 64:
                i2 += (int)(-123.307F + (i1 * i1));
                Test.sFld >>= (short)((Test.instanceCount + 47996) - ((11 + iArr[i1 - 1]) + (-196 + i2)));
                iArr[i1 - 1] *= (int)(++Test.instanceCount);
                i2 += by;
            case 65:
                vMeth2(Test.instanceCount, Test.instanceCount);
                Test.fFld += (i1 * Test.sFld);
                break;
            case 66:
                i2 += i;
                break;
            case 67:
                iArr[i1] <<= (int)Test.instanceCount;
                break;
            default:
                i2 = (int)11L;
            }
        }
        vMeth1_check_sum += i + i1 + i2 + (b ? 1 : 0) + by + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth() {

        int i9=-13, i10=80, i11=-11, i12=238, i13=-28964;
        byte by1=93;

        vMeth1(Test.iFld);
        Test.iFld += 21587;
        Test.iFld /= (int)-115L;
        Test.iFld += (int)-6.126491;
        for (i9 = 13; 236 > i9; i9++) {
            Test.fFld %= (Test.instanceCount | 1);
            by1 += (byte)i9;
            lArrFld[i9 + 1] = Test.iFld;
        }
        i11 = 1;
        while (++i11 < 204) {
            for (i12 = 8; i12 > 1; i12--) {
                i13 = 1;
                Test.instanceCount += (i12 - Test.iFld);
                Test.instanceCount = i11;
                Test.iArrFld[i12 + 1] = (int)Test.instanceCount;
            }
            lArrFld[i11 + 1] = Test.instanceCount;
        }
        vMeth_check_sum += i9 + i10 + by1 + i11 + i12 + i13;
    }

    public void mainTest(String[] strArr1) {

        int i14=10, i15=571, i16=-194, i17=-8, i18=-1, i19=12432, i20=-12680;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -53.109076);

        vMeth();
        Test.instanceCount -= (long)Test.fFld;
        i14 = 1;
        while (++i14 < 146) {
            for (i15 = 5; 172 > i15; i15++) {
                if (false) break;
                for (i17 = 2; i17 > i14; i17 -= 2) {
                    Test.iFld += (4 + (i17 * i17));
                    i16 = i16;
                    Test.instanceCount |= i18;
                    i18 <<= Test.sFld;
                    Test.instanceCount *= i17;
                    Test.instanceCount += (((i17 * Test.instanceCount) + Test.fFld) - i15);
                    b1 = b1;
                    Test.instanceCount = i18;
                    if (b1) break;
                    try {
                        Test.iArrFld[i15] = (-57117 / i15);
                        Test.iFld = (Test.iArrFld[i14 - 1] % -1332698518);
                        Test.iFld = (Test.iArrFld[i17 + 1] % i16);
                    } catch (ArithmeticException a_e) {}
                }
                for (i19 = 1; i19 < 2; ++i19) {
                    i20 = 5;
                    i18 = i17;
                    dArr[i19 + 1] += -37416;
                    Test.instanceCount = Test.instanceCount;
                    lArrFld[i15] >>>= Test.iFld;
                    Test.fFld += (i19 * i19);
                    Test.fFld += Test.byFld;
                    i20 *= (int)dFld;
                }
                Test.iArrFld[i15 + 1] += (int)Test.instanceCount;
                Test.sFld -= (short)Test.instanceCount;
                Test.iArrFld[i14] = i16;
                Test.iArrFld[i14 - 1] *= Test.sFld;
            }
            Test.iFld |= Test.iFld;
        }

        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 b1 = " + i17 + "," + i18 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i19 i20 dArr = " + i19 + "," + i20 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld Test.byFld dFld = " + Test.iFld + "," + Test.byFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld) +
            "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

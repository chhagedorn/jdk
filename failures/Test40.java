// Generated by Java* Fuzzer test generator (1.0.001). Wed Jul 26 21:53:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3962053527L;
    public static volatile int iFld=145;
    public static byte byFld=118;
    public static boolean bFld=false;
    public static float fFld=-1.547F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2() {

        double d2=-23.34284;
        int i6=4, i7=-121, i8=-175, i9=1, i10=-24;
        float f1=-92.975F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 723609425L);

        lArr2[(Test.iFld >>> 1) % N] = -94;
        for (d2 = 2; d2 < 157; d2++) {
            i7 = 1;
            while (++i7 < 10) {
                Test.iFld = i6;
                i6 = Test.iFld;
                i6 += (i7 * i7);
                Test.iFld -= -21456;
                for (i8 = 1; 1 > i8; i8++) {
                    double d3=2.52115;
                    Test.instanceCount -= i9;
                    i9 |= i8;
                    f1 -= i7;
                    f1 = 128;
                    Test.instanceCount += i8;
                    Test.instanceCount += (((i8 * i6) + i10) - Test.instanceCount);
                    d3 = Test.instanceCount;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d2) + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 +
            FuzzerUtils.checkSum(lArr2);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        int i1=-132, i2=12, i3=-50935, i4=9, i5=-100;
        float f=24.492F, fArr[]=new float[N];
        long l2=7670L, lArr1[]=new long[N];
        double d1=-27.78829;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr1, 209L);
        FuzzerUtils.init(fArr, -86.700F);
        FuzzerUtils.init(bArr, false);

        lArr1[(Test.iFld >>> 1) % N] = (long)((--Test.iFld) + ((-(4 + (Test.byFld - Test.iFld))) * (fArr[(Test.iFld >>>
            1) % N]--)));
        for (i1 = 8; 262 > i1; ++i1) {
            for (i3 = 6; i3 > i1; i3 -= 2) {
                f -= (++Test.instanceCount);
                for (l2 = 1; l2 > i3; l2 -= 3) {
                    Test.iFld = (int)(Math.min(--Test.iArrFld[i1 - 1], i4++) - Test.instanceCount);
                    Test.iFld >>= -93;
                    Test.instanceCount += Test.instanceCount;
                    d1 -= Test.iFld;
                    Test.iArrFld[i1 + 1] -= -36045;
                    i5 >>= (int)(f * ((i1 * i2) + i3));
                    Test.iArrFld[(int)(l2 - 1)] += i4;
                    Test.iArrFld[(int)(l2 + 1)] += (iMeth2() - i3);
                }
                bArr[i3 - 1] = Test.bFld;
            }
            i2 += i5;
        }
        long meth_res = i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + l2 + i5 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, byte by) {

        double d=-94.29863;
        long l1=-34308L, lArr[]=new long[N];
        int i11=-63457, i12=27280;

        FuzzerUtils.init(lArr, -363495692L);

        Test.iArrFld[(i >>> 1) % N] = (-(by++));
        d += (i++);
        i -= (int)Test.instanceCount;
        for (long l : lArr) {
            Test.instanceCount -= Integer.reverseBytes(Test.iArrFld[(-140 >>> 1) % N]--);
            l1 = 1;
            while (++l1 < 4) {
                iMeth1();
                i11 = 1;
                do {
                    i &= -247;
                    i <<= i12;
                    Test.bFld = Test.bFld;
                    if (i11 != 0) {
                    }
                } while (++i11 < 1);
                i12 += (int)(((l1 * Test.iFld) + i12) - i11);
                Test.iFld >>= i;
                Test.instanceCount -= Test.iFld;
            }
        }
        long meth_res = i + by + Double.doubleToLongBits(d) + l1 + i11 + i12 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=0, i14=-61131, i15=17895, i16=36, i17=96, i18=-22337;
        short s=-6696;
        double d4=0.70701;
        long lArr3[][]=new long[N][N];

        FuzzerUtils.init(lArr3, -2825303953L);

        iMeth(-49938, (byte)(78));
        Test.iArrFld[(-55434 >>> 1) % N] = Test.iFld;
        switch (((Test.iFld >>> 1) % 2) + 92) {
        case 92:
            Test.iFld -= (int)Test.fFld;
            Test.iArrFld[(-122 >>> 1) % N] = Test.iFld;
            Test.instanceCount >>= Test.iFld;
        case 93:
            for (i13 = 367; i13 > 18; i13--) {
                i14 = (int)Test.instanceCount;
                for (i15 = 1; i15 < 72; ++i15) {
                    switch (((i15 >>> 1) % 4) + 76) {
                    case 76:
                    case 77:
                        i14 += (((i15 * i16) + i16) - Test.iFld);
                        Test.iFld += i15;
                        Test.instanceCount = 236L;
                        break;
                    case 78:
                        Test.instanceCount *= i16;
                        for (i17 = 1; 2 > i17; i17++) {
                            if (Test.bFld) {
                                lArr3[i13 - 1][i15 + 1] -= Test.instanceCount;
                                i16 |= (int)Test.instanceCount;
                            } else if (false) {
                                switch ((i13 % 2) + 101) {
                                case 101:
                                    Test.iFld = i14;
                                    Test.bFld = Test.bFld;
                                    Test.bFld = Test.bFld;
                                case 102:
                                    Test.instanceCount += (((i17 * Test.instanceCount) + s) - i13);
                                    switch (((i15 % 7) * 5) + 4) {
                                    case 39:
                                        d4 = i16;
                                        Test.iArrFld[i13] = i15;
                                        Test.iArrFld[i13 + 1] += i16;
                                        i16 = i13;
                                    case 29:
                                        lArr3[i13 - 1][i17] += Test.iFld;
                                        Test.bFld = Test.bFld;
                                        break;
                                    case 26:
                                        Test.instanceCount -= i13;
                                        break;
                                    case 11:
                                        i14 = (int)Test.instanceCount;
                                        break;
                                    case 12:
                                        Test.byFld ^= (byte)i14;
                                        break;
                                    case 32:
                                        i16 = (int)Test.instanceCount;
                                        break;
                                    case 37:
                                        i16 <<= i16;
                                    }
                                    break;
                                }
                            } else if (Test.bFld) {
                                Test.instanceCount += (i17 * Test.iFld);
                            } else {
                                i18 -= i14;
                            }
                        }
                        break;
                    case 79:
                    default:
                        Test.instanceCount = i13;
                    }
                }
            }
            break;
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("s d4 lArr3 = " + s + "," + Double.doubleToLongBits(d4) + "," +
            FuzzerUtils.checkSum(lArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.fFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

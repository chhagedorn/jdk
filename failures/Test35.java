// Generated by Java* Fuzzer test generator (1.0.001). Thu Jul 20 11:08:23 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3077824406010460508L;
    public static volatile byte byFld=107;
    public static int iFld=60639;
    public static volatile short sFld=-2798;
    public static double dFld=-10.46052;
    public int iFld1=10;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld1[][]=new long[N][N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 10L);
        FuzzerUtils.init(Test.iArrFld, 224);
        FuzzerUtils.init(Test.sArrFld, (short)-31689);
        FuzzerUtils.init(Test.lArrFld1, -3872534370L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long vMeth3_check_sum = 0;

    public static void vMeth3(boolean b1, int i1, byte by) {

        int i2=-7, i3=40, i4=83, i5=3, i6=-11, i7=106, i8=11, i9=25, i10=-3, iArr[]=new int[N];
        double d=29.837;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(byArr, (byte)-46);

        for (i2 = 1; i2 < 141; i2++) {
            Test.instanceCount += i2;
            iArr = FuzzerUtils.int1array(N, (int)99);
            i3 = i1;
            Test.instanceCount >>>= Test.instanceCount;
            Test.instanceCount -= i2;
            byArr[i2] -= (byte)i1;
        }
        for (i4 = 21; 371 > i4; ++i4) {
            Test.instanceCount -= Test.instanceCount;
            if (b1) {
                for (i6 = 1; i6 < 5; ++i6) {
                    for (i8 = 1; i8 < 2; i8++) {
                        i10 ^= (int)Test.instanceCount;
                        b1 = false;
                    }
                    iArr[i4] = i6;
                    try {
                        iArr[i6] = (i8 / i6);
                        i9 = (i10 % i7);
                        i7 = (60921 % i8);
                    } catch (ArithmeticException a_e) {}
                    d -= 9L;
                }
                i3 = (int)d;
                i5 = (int)Test.instanceCount;
                Test.lArrFld[i4] += -10;
            } else {
                iArr[i4] = i7;
            }
        }
        vMeth3_check_sum += (b1 ? 1 : 0) + i1 + by + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth2(boolean b, float f, int i) {

        float f1=-39.294F;
        int i11=-8, i12=6, i13=249, i14=53428, i15=-24486, i16=251, i17=-248, i18=-1;
        long l=-4L;
        short s=-3322;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -74.30080);

        vMeth3(b, 44969, Test.byFld);
        for (f1 = 8; f1 < 209; ++f1) {
            for (l = 1; 8 > l; l++) {
                i12 ^= i12;
            }
        }
        Test.byFld = (byte)l;
        i13 = 1;
        do {
            for (i14 = 1; i14 < 12; ++i14) {
                for (i16 = 2; i16 > i14; i16 -= 3) {
                    if (b) {
                        i12 += s;
                        s <<= (short)i12;
                        dArr[i16 - 1] += i14;
                        Test.iArrFld[i14 + 1] = i15;
                        switch (((i13 >>> 1) % 1) + 97) {
                        case 97:
                            i17 += (((i16 * i) + i18) - l);
                            Test.iArrFld[i16] >>= (int)l;
                            i = i14;
                            b = b;
                        default:
                            if (true) continue;
                            Test.instanceCount >>= 251;
                        }
                    } else {
                        i += i16;
                        vMeth2_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f) + i + Float.floatToIntBits(f1) + i11
                            + l + i12 + i13 + i14 + i15 + i16 + i17 + s + i18 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                }
            }
        } while (++i13 < 129);
        vMeth2_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f) + i + Float.floatToIntBits(f1) + i11 + l + i12 + i13
            + i14 + i15 + i16 + i17 + s + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {

        boolean b2=false;
        double d1=0.93372;
        int i19=14, i20=-6, i21=-44489, i22=-16, i23=157, i24=4379, i25=-63729, i26=-28219;
        long l1=-3809023602L;
        float f2=-40.783F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.271F);

        vMeth2(b2, 3.399F, -6853);
        d1 *= -29989;
        for (i19 = 8; i19 < 148; i19++) {
            Test.instanceCount = Test.instanceCount;
            for (i21 = 1; i21 < 11; ++i21) {
                try {
                    i22 = (-67 % Test.iArrFld[i19 - 1]);
                    i20 = (i22 % 19);
                    Test.iArrFld[i19 + 1] = (i20 % i23);
                } catch (ArithmeticException a_e) {}
                for (l1 = 2; 1 < l1; l1 -= 2) {
                    i23 = -18664;
                    i22 *= (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount += l1;
                    f2 += l1;
                    Test.instanceCount = l1;
                }
            }
            i25 = 11;
            while (--i25 > 0) {
                fArr[i19] -= i24;
                i26 = 1;
                do {
                    Test.sArrFld[i25] >>>= (short)4;
                    Test.iArrFld[i26 - 1] += (int)-4L;
                } while (--i26 > 0);
                Test.instanceCount -= -53603;
                Test.byFld -= (byte)7L;
            }
        }
        vMeth1_check_sum += (b2 ? 1 : 0) + Double.doubleToLongBits(d1) + i19 + i20 + i21 + i22 + i23 + l1 + i24 +
            Float.floatToIntBits(f2) + i25 + i26 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i27=-14573, i28=-4, i29=-14, i30=-64, i31=-139;
        long l2=-13L;
        float f3=2.875F;

        vMeth1();
        Test.iFld = -10;
        Test.sFld >>>= (short)Test.iFld;
        for (i27 = 143; i27 > 3; i27--) {
            for (l2 = 1; l2 < 11; ++l2) {
                Test.lArrFld1 = FuzzerUtils.long2array(N, (long)-9L);
                Test.iFld ^= Test.iFld;
                Test.instanceCount = Test.sFld;
                Test.iFld += (int)(((l2 * Test.sFld) + l2) - Test.iFld);
                f3 += (l2 * l2);
                try {
                    Test.iArrFld[i27] = (-1450612971 % i28);
                    Test.iFld = (-50 % i27);
                    i28 = (i27 % 4201);
                } catch (ArithmeticException a_e) {}
                i29 += (int)Test.instanceCount;
                Test.instanceCount += (l2 | (long)f3);
            }
        }
        for (i30 = 6; i30 < 176; ++i30) {
            switch ((((i29 >>> 1) % 2) * 5) + 26) {
            case 32:
                i31 -= i29;
                Test.iArrFld[i30 + 1] += (int)-109.470F;
                Test.byFld |= (byte)l2;
                Test.iFld += (int)Test.dFld;
                if (i27 != 0) {
                    vMeth_check_sum += i27 + i28 + l2 + i29 + Float.floatToIntBits(f3) + i30 + i31;
                    return;
                }
                break;
            case 27:
                Test.instanceCount = Test.iFld;
                break;
            default:
                i31 = i27;
            }
        }
        vMeth_check_sum += i27 + i28 + l2 + i29 + Float.floatToIntBits(f3) + i30 + i31;
    }

    public void mainTest(String[] strArr1) {

        boolean b3=true;
        double d2=0.97331, d3=2.29296;
        int i33=-174, i34=-9504, i35=52916, i36=-14, i37=86, i38=-147, i39=-2998, i40=23, iArr1[]=new int[N];
        float f4=-33.974F;

        FuzzerUtils.init(iArr1, -238);

        vMeth();
        for (int i32 : Test.iArrFld) {
            bArrFld = bArrFld;
            if (b3) continue;
            for (d2 = 1; d2 < 63; ++d2) {
                Test.dFld += f4;
                Test.instanceCount -= Test.instanceCount;
                switch ((int)((d2 % 4) + 50)) {
                case 50:
                    for (d3 = 1; 2 > d3; d3++) {
                        Test.iArrFld[(int)(d2 - 1)] <<= i32;
                        i32 = i34;
                        Test.byFld <<= (byte)11;
                        Test.instanceCount += (long)d3;
                        Test.instanceCount += Test.iFld;
                        f4 += Test.instanceCount;
                        i33 >>= Test.iFld;
                        if (b3) continue;
                        Test.instanceCount <<= Test.sFld;
                    }
                    Test.instanceCount -= Test.instanceCount;
                    Test.sFld += (short)(((d2 * Test.instanceCount) + iFld1) - Test.instanceCount);
                    Test.instanceCount += Test.instanceCount;
                    iFld1 = i33;
                case 51:
                    for (i35 = 1; i35 < 2; ++i35) {
                        if (b3) break;
                        f4 += Test.instanceCount;
                        i34 *= i34;
                    }
                    for (i37 = 1; i37 < 2; i37++) {
                        f4 -= 6;
                        Test.instanceCount += (i37 - Test.instanceCount);
                        i38 &= i36;
                        Test.instanceCount -= i37;
                        Test.iArrFld = Test.iArrFld;
                    }
                case 52:
                    i36 &= i34;
                    f4 += (float)d2;
                    Test.lArrFld[(int)(d2 - 1)] = -48;
                    for (i39 = 2; 1 < i39; i39--) {
                        iArr1[(int)(d2 + 1)] = (int)d3;
                        iFld1 += Test.iFld;
                        Test.iArrFld[(int)(d2)] ^= (int)Test.instanceCount;
                        Test.sFld = (short)i34;
                    }
                case 53:
                    i32 += (int)((long)d2 ^ (long)f4);
                    break;
                }
            }
        }

        FuzzerUtils.out.println("b3 d2 i33 = " + (b3 ? 1 : 0) + "," + Double.doubleToLongBits(d2) + "," + i33);
        FuzzerUtils.out.println("f4 d3 i34 = " + Float.floatToIntBits(f4) + "," + Double.doubleToLongBits(d3) + "," +
            i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 i40 = " + i38 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.dFld iFld1 = " + Test.sFld + "," + Double.doubleToLongBits(Test.dFld) +
            "," + iFld1);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.lArrFld1 bArrFld = " + FuzzerUtils.checkSum(Test.lArrFld1) + "," +
            FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("vMeth3_check_sum: " + vMeth3_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  vMeth3 ->  vMeth3 vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul 10 22:31:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5064800599660999005L;
    public static float fFld=0.15F;
    public static int iFld=7;
    public static short sFld=7000;
    public static boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 5);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i6, float f1, int i7) {

        int i8=9, i9=-51932, i10=-55343, i11=46524, i12=-87, i13=2;

        i8 = 1;
        while (++i8 < 304) {
            Test.iFld = (int)Test.instanceCount;
            if (Test.bFld) {
                Test.sFld = (short)i8;
                Test.instanceCount *= Test.iFld;
                if (i6 != 0) {
                }
            }
            Test.iFld = i7;
            for (i9 = 5; i9 > 1; --i9) {
                Test.bFld = Test.bFld;
                for (i11 = 1; i11 < 2; i11++) {
                    i6 += i11;
                    try {
                        i10 = (i13 % -30829);
                        i6 = (Test.iArrFld1[i11 - 1] % i9);
                        Test.iArrFld1[i11] = (Test.iArrFld1[i8] % -133);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld += i8;
                }
            }
        }
        long meth_res = i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + i12 + i13;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(float f, int i5) {

        double d2=1.42326;
        byte by1=-46;
        float f2=2.470F, fArr[]=new float[N];
        int i14=7899;
        long l=5069300313012413617L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, 0.300F);
        FuzzerUtils.init(bArr, true);

        Test.fFld = Test.iFld;
        d2 = fArr[(i5 >>> 1) % N];
        dMeth(i5, Test.fFld, -5);
        Test.iArrFld1[(Test.iFld >>> 1) % N] += by1;
        i5 -= (int)-1.20911;
        bArr[(i5 >>> 1) % N] = Test.bFld;
        for (f2 = 318; 14 < f2; --f2) {
            i14 <<= (int)-248L;
            i14 += (int)(((f2 * i14) + i14) - i5);
            l = 1;
            do {
                if (Test.bFld) break;
                Test.instanceCount = (long)f2;
                i14 += (int)(((l * i5) + l) - l);
            } while (++l < 5);
            if (Test.bFld) break;
        }
        Test.sFld >>>= (short)-31;
        long meth_res = Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d2) + by1 + Float.floatToIntBits(f2) +
            i14 + l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(double d1) {

        int i1=13, i2=11, i3=12, i4=144, i15=-32564, iArr[]=new int[N];
        float f3=0.772F;

        FuzzerUtils.init(iArr, -100);

        Test.instanceCount -= Test.iFld;
        Test.iFld = (int)Double.longBitsToDouble(Test.instanceCount);
        Test.iFld += (-12 - Test.iFld);
        Test.fFld += iArr[(Test.iFld >>> 1) % N];
        for (i1 = 1; i1 < 143; ++i1) {
            for (i3 = 1; i3 < 11; ++i3) {
                i2 += (int)(-325059875221268346L + (i3 * i3));
                if (Test.iFld != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d1) + i1 + i2 + i3 + i4 + Float.floatToIntBits(f3) + i15
                        + FuzzerUtils.checkSum(iArr);
                    return;
                }
                Test.fFld *= (float)(((d1 + Test.instanceCount) - (Test.iFld * i3)) + i3);
                Test.sFld >>>= (short)lMeth(-114.461F, Test.iFld);
                Test.iFld = i1;
            }
            try {
                Test.iFld = (-106 % i1);
                i4 = (940637187 % i3);
                i4 = (21014 % i2);
            } catch (ArithmeticException a_e) {}
            for (f3 = 1; f3 < 11; f3++) {
                i15 += i2;
                Test.iFld += i2;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i1 + i2 + i3 + i4 + Float.floatToIntBits(f3) + i15 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=14, i16=144, i17=-122, i18=244, i19=54646, i20=14, i21=-32;
        byte by=-53;
        double d=0.78825;
        long l1=-128L, l2=2464996927292823582L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 556339245L);

        Test.instanceCount *= (long)((Test.fFld++) - ((++iArrFld[(i >>> 1) % N]) + (i + i)));
        i = (int)((lArr[(i >>> 1) % N] = by) * Math.abs(d));
        vMeth(d);
        i = Test.iFld;
        Test.iFld += (int)Test.fFld;
        Test.iFld *= (int)Test.instanceCount;
        for (l1 = 15; l1 < 321; l1++) {
            i16 = Test.iFld;
            Test.fFld += (l1 - Test.iFld);
            for (i17 = 1; i17 < 82; ++i17) {
                for (l2 = i17; l2 < 2; l2++) {
                    i = i17;
                    Test.iFld += (int)l1;
                    Test.sFld = (short)i17;
                    Test.instanceCount <<= i16;
                    Test.iFld *= by;
                    i16 >>>= i;
                    i19 &= (int)l1;
                    Test.instanceCount = l1;
                    i16 += (int)l1;
                }
                i16 += i18;
                switch ((int)(((l1 % 4) * 5) + 94)) {
                case 105:
                    for (i20 = 2; i20 > i17; i20 -= 2) {
                        i18 += (int)d;
                        if (Test.bFld) break;
                        Test.iArrFld1[i20 + 1] += (int)10L;
                        i18 >>= 38;
                        Test.instanceCount += i20;
                        i16 -= i;
                    }
                    Test.bFld = Test.bFld;
                    break;
                case 110:
                    Test.instanceCount >>= i21;
                    break;
                case 111:
                    iArrFld[(int)(l1 - 1)] = i20;
                    break;
                case 98:
                    i -= by;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i by d = " + i + "," + by + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("l1 i16 i17 = " + l1 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 l2 i19 = " + i18 + "," + l2 + "," + i19);
        FuzzerUtils.out.println("i20 i21 lArr = " + i20 + "," + i21 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.bFld iArrFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

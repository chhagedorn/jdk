// Generated by Java* Fuzzer test generator (1.0.001). Sun Jul 16 14:42:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public double dFld=2.124227;
    public static short sFld=-19278;
    public static double dFld1=-79.26172;
    public static double dFld2=0.97766;
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static volatile boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 48);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth() {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 2);

        iArr = iArr;
        vMeth_check_sum += FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(int i1) {


        vMeth();
        vMeth();
        vSmallMeth_check_sum += i1;
    }

    public static void vMeth1(boolean b, int i17, long l) {

        int i18=-152, i19=-56709, i20=8, i21=12, iArr3[]=new int[N];
        long l1=-4068369513L, lArr[][]=new long[N][N];
        float f3=-70.356F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, -6195114863107911254L);
        FuzzerUtils.init(iArr3, -237);

        for (i18 = 13; i18 < 215; ++i18) {
            Test.instanceCount -= l;
            l1 = 1;
            while (++l1 < 8) {
                switch (((i18 >>> 1) % 1) + 50) {
                case 50:
                    switch ((((i18 >>> 1) % 7) * 5) + 55) {
                    case 69:
                        l -= i19;
                        l += (long)f3;
                        f3 = (float)Test.dFld2;
                        l -= Test.sFld;
                        for (i20 = 1; i20 < 1; ++i20) {
                            i19 = (int)f3;
                            bArr = bArr;
                            lArr[i20][i20 - 1] = (long)f3;
                            iArr3[i20 + 1] = i17;
                            i19 <<= i21;
                            b = b;
                            l -= i17;
                            iArr3[i20] /= (int)-13.516F;
                            f3 += (float)-18.96539;
                            f3 -= (float)Test.dFld2;
                        }
                        break;
                    case 67:
                        l = i18;
                        break;
                    case 73:
                        i17 = -14779;
                        break;
                    case 70:
                        i17 -= i18;
                    case 79:
                        i19 /= (int)(Test.instanceCount | 1);
                        break;
                    case 75:
                    case 84:
                        f3 = l1;
                        break;
                    default:
                        f3 += 8447;
                    }
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i17 + l + i18 + i19 + l1 + Float.floatToIntBits(f3) + i20 + i21 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr3);
    }

    public static long lMeth(float f2, int i14) {

        int i15=-58121, i16=-5683;
        boolean b1=false;
        byte by1=125;

        i14 ^= i14;
        for (i15 = 4; i15 < 316; ++i15) {
            vMeth1(b1, i14, Test.instanceCount);
            i16 += i15;
            Test.instanceCount -= i14;
            i14 <<= i14;
            if (b1) break;
            Test.iArrFld = Test.iArrFld;
            Test.instanceCount = (long)1.112F;
            Test.instanceCount += (long)f2;
            if (i14 != 0) {
            }
        }
        by1 -= (byte)i14;
        long meth_res = Float.floatToIntBits(f2) + i14 + i15 + i16 + (b1 ? 1 : 0) + by1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(int i13) {

        float f4=-30.436F, fArr[]=new float[N];
        int i22=71, i23=-54424, i24=21381, i25=136, i26=2, i27=186, i28=41259, i29=10;
        byte by2=50;

        FuzzerUtils.init(fArr, 53.942F);

        lMeth(f4, i13);
        i22 = 1;
        do {
            f4 *= 6594;
            i13 += i13;
        } while (++i22 < 160);
        Test.dFld2 -= Test.instanceCount;
        for (i23 = 10; 188 > i23; ++i23) {
            fArr = fArr;
        }
        i25 = 1;
        while (++i25 < 123) {
            i13 += (((i25 * Test.instanceCount) + i13) - i13);
            Test.iArrFld = Test.iArrFld;
            for (i26 = 1; i26 < 13; i26++) {
                for (i28 = 1; i28 < 2; ++i28) {
                    Test.iArrFld[i25] ^= (int)Test.instanceCount;
                    fArr[i28 + 1] += Test.instanceCount;
                    Test.iArrFld[i25 + 1] += i26;
                    i29 = (int)Test.instanceCount;
                    i24 *= i22;
                    i29 *= by2;
                    i24 += i28;
                    Test.instanceCount *= i23;
                }
            }
        }
        long meth_res = i13 + Float.floatToIntBits(f4) + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + by2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i8=-55791, i9=-1, i10=-2, i11=5, i12=-2, i30=-64393, i31=-25, iArr2[]=new int[N];
        float f1=-1.642F;

        FuzzerUtils.init(iArr2, 54124);

        i8 = 134;
        while ((i8 -= 3) > 0) {
            iArr2 = (iArr2 = iArr2);
            vMeth();
            switch (((((i8 - i8) >>> 1) % 10) * 5) + 68) {
            case 77:
                i9 += Math.abs(++iArr2[i8 + 1]);
                i9 = (int)(((Test.instanceCount + Test.instanceCount) * (Test.sFld << i9)) - i9);
                i10 = 1;
                while (++i10 < 34) {
                    Test.dFld1 -= ((Test.instanceCount++) - Test.instanceCount);
                    for (i11 = 1; i11 < 1; ++i11) {
                        iArr2[i10] -= i12;
                        f1 = iMeth1(159);
                        i12 = i9;
                        i12 = i12;
                        try {
                            i9 = (Test.iArrFld[i11 - 1] % -91);
                            i12 = (i11 % -693837975);
                            i12 = (i11 % 30974);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount -= 102;
                    }
                    Test.dFld2 -= i9;
                }
                Test.instanceCount += i8;
                for (i30 = 1; i30 < 34; ++i30) {
                    i9 += i11;
                    Test.sFld += (short)i11;
                }
            case 88:
                i12 -= Test.sFld;
                break;
            case 76:
                Test.instanceCount = (long)Test.dFld1;
                break;
            case 115:
                i12 *= i9;
            case 86:
                if (i10 != 0) {
                }
                break;
            case 78:
                Test.instanceCount = Test.sFld;
            case 111:
                f1 += i8;
                break;
            case 71:
                i31 <<= i10;
                break;
            case 70:
                Test.bArrFld = Test.bArrFld;
                break;
            case 91:
                Test.instanceCount = (long)2.403F;
                break;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + i30 + i31 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=44139, i2=-152, i3=133, i4=63, i5=-5, i6=10, i7=437, iArr1[]=new int[N], iArr4[][]=new int[N][N];
        float f=-60.12F;
        byte by=65;
        boolean b2=true;
        double dArr[]=new double[N], dArr1[][]=new double[N][N];

        FuzzerUtils.init(iArr1, -25687);
        FuzzerUtils.init(dArr, -2.94988);
        FuzzerUtils.init(iArr4, 150);
        FuzzerUtils.init(dArr1, 0.44252);

        i = 1;
        while (++i < 278) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(iArr1[i - 1]++);
            for (i2 = 90; i2 > 4; --i2) {
                vMeth();
            }
            dFld += (iArr1[i + 1]--);
            switch ((i % 2) + 25) {
            case 25:
                iArr1[i] %= (int)(((++Test.instanceCount) - i3) | 1);
                f += (--Test.instanceCount);
                break;
            case 26:
                Test.instanceCount -= (long)(-((-dFld) - (-222 - (by <<= (byte)i2))));
                i3 = (++i3);
                lArrFld[i] = lArrFld[i + 1];
                Test.sFld = (short)2673;
                break;
            }
            for (i4 = 4; i4 < 90; ++i4) {
                for (i6 = 2; i < i6; i6 -= 3) {
                    switch ((i4 % 2) + 97) {
                    case 97:
                        dFld *= (--i7);
                        by *= (byte)(dArr[i6] + (Test.sFld + lArrFld[i - 1]));
                        i7 >>= (++i3);
                        Test.instanceCount -= Test.instanceCount;
                        i7 -= (i3++);
                        Test.sFld += (short)i6;
                        break;
                    case 98:
                        f += (Math.max(i4, iMeth()) + i5);
                        lArrFld[i4] = i6;
                        switch ((((i2 >>> 1) % 2) * 5) + 89) {
                        case 91:
                        case 97:
                            Test.instanceCount -= Test.instanceCount;
                            if (b2) {
                                Test.sFld += (short)Test.dFld1;
                                if (b2) break;
                                i5 += 30603;
                            } else if (b2) {
                                Test.instanceCount += i6;
                                b2 = b2;
                                Test.instanceCount -= Test.instanceCount;
                            } else if (b2) {
                                iArr4 = FuzzerUtils.int2array(N, (int)67);
                            } else {
                                i3 += (i6 ^ i4);
                                by += (byte)(i6 ^ i);
                                dArr = dArr;
                            }
                            i3 -= (int)Test.dFld1;
                            dArr1 = dArr1;
                            break;
                        }
                        break;
                    }
                    dFld *= Test.instanceCount;
                    f += i6;
                }
            }
        }

        FuzzerUtils.out.println("i i2 i3 = " + i + "," + i2 + "," + i3);
        FuzzerUtils.out.println("f by i4 = " + Float.floatToIntBits(f) + "," + by + "," + i4);
        FuzzerUtils.out.println("i5 i6 i7 = " + i5 + "," + i6 + "," + i7);
        FuzzerUtils.out.println("b2 iArr1 dArr = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("iArr4 dArr1 = " + FuzzerUtils.checkSum(iArr4) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld1 Test.dFld2 lArrFld = " + Double.doubleToLongBits(Test.dFld1) + "," +
            Double.doubleToLongBits(Test.dFld2) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

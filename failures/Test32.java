// Generated by Java* Fuzzer test generator (1.0.001). Sun Jul 16 19:48:33 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static int iFld=-28900;
    public static short sFld=-29273;
    public static double dFld=-1.32890;
    public volatile boolean bFld=true;
    public int iFld1=21;
    public float fFld=2.559F;
    public volatile int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i2=-33, i3=28, i4=-113, i5=70, i6=1, i7=-216, i8=-14, iArr[][]=new int[N][N];
        float f1=-2.173F;

        FuzzerUtils.init(iArr, 214);

        i2 = 1;
        do {
            i3 = 1;
            while (++i3 < 4) {
                for (i4 = 1; i4 < 1; ++i4) {
                    Test.iFld += (i4 | Test.iFld);
                }
                for (i6 = 1; i6 < 1; ++i6) {
                    i7 <<= (int)Test.instanceCount;
                    i7 |= i7;
                    Test.dFld += Test.iFld;
                    i7 += (((i6 * f1) + Test.instanceCount) - i4);
                    switch ((((i7 >>> 1) % 7) * 5) + 36) {
                    case 62:
                        i8 >>>= i6;
                        iArr = FuzzerUtils.int2array(N, (int)-1);
                        f1 += (((i6 * Test.instanceCount) + i7) - i8);
                        Test.iFld += (int)Test.instanceCount;
                    case 51:
                        f1 += (-27661L + (i6 * i6));
                        break;
                    case 68:
                        i8 += (((i6 * Test.instanceCount) + i3) - i6);
                    case 58:
                        Test.instanceCount = i8;
                        break;
                    case 48:
                    case 38:
                        Test.iFld -= (int)f1;
                        break;
                    case 41:
                        i5 &= i5;
                        break;
                    default:
                        Test.iFld >>>= 7;
                    }
                }
            }
        } while (++i2 < 387);
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, double d, float f) {

        int i9=-14, i10=4050, i11=-227, i12=56643, i13=-50032, iArr1[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr1, -189);

        d *= (Test.iFld++);
        Test.instanceCount -= (iMeth1() / (i1 | 1));
        i9 ^= (int)Test.instanceCount;
        i10 = 1;
        while (++i10 < 251) {
            for (i11 = 6; i11 > i10; i11 -= 2) {
                i13 = 1;
                do {
                    iArr1[i11 - 1] = i12;
                    if (b) continue;
                    if (i1 != 0) {
                        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i9 + i10 + i11 +
                            i12 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    iArr1[i13] -= (int)Test.instanceCount;
                    i9 += i13;
                    i9 >>= i9;
                    i12 = (int)-96.94186;
                    i12 += i12;
                    i12 += Test.iFld;
                } while (--i13 > 0);
            }
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + (b
            ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(int i) {

        float f2=-1.1004F;
        int i14=-10, i15=24501, i16=46362;
        long l1=0L;
        byte by=-122;

        Test.dFld *= iArrFld[(Test.iFld >>> 1) % N];
        vMeth(i, -30.110642, f2);
        for (i14 = 8; i14 < 229; ++i14) {
            for (l1 = i14; l1 < 7; l1++) {
                Test.instanceCount = 2;
                Test.iFld -= by;
                f2 += -4340805827550068206L;
                Test.iFld &= i14;
                if (bFld) break;
                Test.dFld += 209;
                Test.instanceCount = i15;
                i += -10217;
            }
            iArrFld[i14 - 1] = (int)0L;
            i16 >>= (int)Test.instanceCount;
            f2 = i15;
        }
        long meth_res = i + Float.floatToIntBits(f2) + i14 + i15 + l1 + i16 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-2288713317L, lArr[]=new long[N];
        int i17=-23351, i18=-2, i19=47563, i20=121, i21=2, i22=11136, i23=151, i24=38, i25=-133, i26=-73, i27=-33840;

        FuzzerUtils.init(lArr, -535302269L);

        l = 1;
        do {
            Test.iFld += (int)(((Test.iFld++) + (Test.iFld - 156)) + ((Test.instanceCount - Test.iFld) *
                (--Test.instanceCount)));
            Test.sFld += (short)l;
            iArrFld[(int)(l)] = Math.max(Test.iFld, iMeth(Test.iFld));
            for (i17 = 99; i17 > 5; --i17) {
                iFld1 += (int)-3963573946L;
                lArr[(int)(l)] = 50296;
                Test.instanceCount += i18;
                Test.instanceCount -= (long)Test.dFld;
                fFld = i17;
                for (i19 = 1; i19 < 2; ++i19) {
                    fFld += l;
                    Test.dFld *= -67L;
                    fFld += (float)Test.dFld;
                    Test.instanceCount += i19;
                    i18 *= iFld1;
                    iFld1 *= i17;
                    iFld1 <<= (int)Test.instanceCount;
                    Test.instanceCount -= (long)Test.dFld;
                    Test.instanceCount = -31;
                }
                iFld1 -= iFld1;
            }
            for (i21 = 2; 99 > i21; i21++) {
                i20 += Test.iFld;
            }
            for (i23 = (int)(l); 99 > i23; ++i23) {
                Test.dFld = l;
                i25 = 1;
                do {
                    try {
                        i18 = (i19 / iArrFld[i23 + 1]);
                        iArrFld[i25 - 1] = (60681 / i23);
                        i18 = (i21 / i17);
                    } catch (ArithmeticException a_e) {}
                } while (++i25 < 1);
                for (i26 = 1; i26 < 1; ++i26) {
                    i27 <<= i25;
                    try {
                        iArrFld[(int)(l + 1)] = (i26 % -237);
                        i27 = (i17 / -33556);
                        iFld1 = (i22 / iFld1);
                    } catch (ArithmeticException a_e) {}
                }
            }
        } while (++l < 254);

        FuzzerUtils.out.println("l i17 i18 = " + l + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld bFld iFld1 = " + Double.doubleToLongBits(Test.dFld) + "," + (bFld ? 1 : 0) +
            "," + iFld1);
        FuzzerUtils.out.println("fFld iArrFld = " + Float.floatToIntBits(fFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Thu Sep  7 17:01:22 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=195L;
    public static double dFld=-60.95003;
    public static short sFld=-5201;
    public static int iFld=155;
    public static float fFld=-125.252F;
    public static boolean bFld=true;
    public int iFld1=-102;
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1727840423L);
        FuzzerUtils.init(Test.iArrFld, 34203);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static void vMeth(long l, long l1, int i) {

        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -50L);

        Test.lArrFld = (lArr = (lArr = (Test.lArrFld = lArr)));
        vMeth_check_sum += l + l1 + i + FuzzerUtils.checkSum(lArr);
    }

    public static short sMeth(int i8, long l3) {

        int i9=144, i10=138, i11=-197, i12=125, i13=15, i14=63345, i15=-9, i16=-13, iArr[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        short s=-17594;
        float f1=103.352F, fArr[][]=new float[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(fArr, 13.289F);

        i9 = 1;
        while (++i9 < 209) {
            i8 >>= i8;
            for (i10 = 1; 8 > i10; i10++) {
                switch ((i9 % 1) + 2) {
                case 2:
                    for (i12 = 2; i12 > 1; i12--) {
                        b = b;
                        bArr = FuzzerUtils.boolean1array(N, (boolean)true);
                    }
                    i14 = 1;
                    while (++i14 < 2) {
                        Test.instanceCount += (i14 * i14);
                    }
                    for (i15 = 2; i15 > i9; i15--) {
                        i11 += (((i15 * s) + i10) - f1);
                        i13 -= i9;
                        Test.instanceCount %= (i16 | 1);
                        iArr = iArr;
                        Test.lArrFld[i15][i10] = l3;
                        i11 = i11;
                    }
                    fArr = fArr;
                    Test.instanceCount = -28166;
                    if (i8 != 0) {
                    }
                    break;
                }
                i11 = i13;
            }
        }
        long meth_res = i8 + l3 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) + i14 + i15 + i16 + s +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth2(long l2, int i6, int i7) {

        int i17=135, i18=220, i19=-125, i20=-97, iArr1[]=new int[N];
        boolean b1=false;
        float f2=0.275F, fArr1[]=new float[N];
        byte by1=-53;
        double d=-15.91504, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 2.63139);
        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(fArr1, 0.29F);

        i6 += i6;
        Test.instanceCount &= (long)((dArr1[(i6 >>> 1) % N] - (4 - (i7 << Test.instanceCount))) + sMeth(i6,
            1451791528099216575L));
        i17 = 1;
        do {
            iArr1[i17] *= -14;
            b1 = b1;
            i18 = 6;
            do {
                i6 += (int)-1.573F;
                i6 >>= 36281;
                switch ((i17 % 1) + 55) {
                case 55:
                    f2 = by1;
                    iArr1[i17] >>= 11;
                    break;
                }
                fArr1[i17 - 1] *= i6;
                i6 += (i18 - i18);
            } while (--i18 > 0);
            d /= (Test.instanceCount | 1);
            l2 += (((i17 * f2) + f2) - f2);
        } while (++i17 < 251);
        for (i19 = 2; i19 < 124; ++i19) {
            i6 = 45495;
            iArr1 = iArr1;
            iArr1 = iArr1;
        }
        i7 *= (int)1.102F;
        vMeth2_check_sum += l2 + i6 + i7 + i17 + (b1 ? 1 : 0) + i18 + Float.floatToIntBits(f2) + by1 +
            Double.doubleToLongBits(d) + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth1(byte by) {

        int i2=-2419, i3=-28300, i4=-56, i5=-12, i21=-202, iArr2[][]=new int[N][N];
        short s1=-881, sArr[]=new short[N];
        boolean b2=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -28.28518);
        FuzzerUtils.init(sArr, (short)-23987);
        FuzzerUtils.init(iArr2, -32103);

        for (i2 = 2; i2 < 268; ++i2) {
            for (i4 = i2; i4 < 6; i4++) {
                float f3=-1.14F;
                dArr = (dArr = (dArr = (dArr = dArr)));
                vMeth2(Test.instanceCount, i4, i3);
                sArr[i4] &= (short)i5;
                iArr2[i4 - 1] = iArr2[i4 + 1];
                Test.instanceCount += i2;
                switch ((i4 % 8) + 86) {
                case 86:
                    if (i21 != 0) {
                        vMeth1_check_sum += by + i2 + i3 + i4 + i5 + i21 + s1 + (b2 ? 1 : 0) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr) +
                            FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    f3 += f3;
                    Test.instanceCount &= i5;
                    s1 = (short)i2;
                    by = (byte)Test.instanceCount;
                    b2 = true;
                    break;
                case 87:
                    Test.instanceCount -= i4;
                    iArr2[i2] = iArr2[i4];
                    i3 -= i3;
                    if (b2) continue;
                    break;
                case 88:
                    iArr2 = iArr2;
                    if (i21 != 0) {
                        vMeth1_check_sum += by + i2 + i3 + i4 + i5 + i21 + s1 + (b2 ? 1 : 0) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr) +
                            FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    break;
                case 89:
                    i5 += i4;
                    break;
                case 90:
                    if (b2) continue;
                    break;
                case 91:
                    Test.instanceCount += s1;
                case 92:
                    i3 += i4;
                    break;
                case 93:
                    i21 *= i21;
                    break;
                default:
                    iArr2[(-39383 >>> 1) % N] = iArr2[i4];
                }
            }
        }
        vMeth1_check_sum += by + i2 + i3 + i4 + i5 + i21 + s1 + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static long lMeth() {

        int i1=-13, i22=58860, i23=-46, i24=49849, i25=7, i26=48350;
        float f=2.289F, fArr2[]=new float[N];
        byte by2=71;
        boolean b3=true;
        double dArr2[][]=new double[N][N];

        FuzzerUtils.init(dArr2, -35.25934);
        FuzzerUtils.init(fArr2, 0.572F);

        i1 -= -24595;
        f -= (Test.instanceCount--);
        vMeth1(by2);
        for (i22 = 17; i22 < 377; ++i22) {
            for (i24 = 1; i24 < 5; i24++) {
                Test.iArrFld[i22][i22 + 1] >>= (int)Test.instanceCount;
                if (i1 != 0) {
                }
                switch (((i24 >>> 1) % 8) + 117) {
                case 117:
                    Test.dFld += i22;
                    i25 %= (int)(i1 | 1);
                    switch (((i24 % 9) * 5) + 51) {
                    case 76:
                        i26 = 1;
                        do {
                            Test.sFld -= (short)i23;
                            i1 += i26;
                            Test.lArrFld[i22][i22] += -9;
                            Test.instanceCount = -246L;
                            i23 = (int)Test.instanceCount;
                            i23 *= i22;
                            i25 += i25;
                            Test.lArrFld[i26][i24] += i23;
                        } while (++i26 < 2);
                        break;
                    case 84:
                        i23 -= (int)124L;
                        break;
                    case 96:
                        Test.iFld -= i26;
                        break;
                    case 83:
                        b3 = b3;
                    case 93:
                        Test.iFld += (((i24 * i25) + f) - i25);
                        break;
                    case 55:
                        i25 = -15718;
                        break;
                    case 92:
                        Test.iFld -= (int)-23.746F;
                        break;
                    case 85:
                        Test.iArrFld[i24 + 1][i22 + 1] <<= (int)Test.instanceCount;
                        break;
                    case 57:
                        Test.iArrFld[i24][i22 + 1] = i23;
                        break;
                    }
                    break;
                case 118:
                    dArr2[i22][i24 + 1] *= Test.instanceCount;
                case 119:
                    Test.iFld = (int)Test.instanceCount;
                case 120:
                    Test.instanceCount = i26;
                case 121:
                    i25 = i24;
                case 122:
                    Test.iFld += (i24 + Test.instanceCount);
                    break;
                case 123:
                    fArr2[i24] -= f;
                    break;
                case 124:
                    if (true) break;
                    break;
                default:
                    Test.iArrFld[i24 + 1][i24 - 1] >>= i22;
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + by2 + i22 + i23 + i24 + i25 + i26 + (b3 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i27=14, i28=253, i29=67, i30=-91, i31=18164, i32=9569, i33=0, i34=57160, i35=145, i36=46344, i37=-36471,
            i38=-9;
        short s2=-1335;
        byte by3=-11;
        float f4=28.439F, fArr3[]=new float[N];
        long l4=3160752093L;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(fArr3, 2.898F);

        vMeth(Long.reverseBytes(--Test.instanceCount), lMeth(), Test.iFld);
        Test.iFld += (int)Test.fFld;
        Test.instanceCount *= Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += Test.iFld;
        for (i27 = 17; 309 > i27; i27 += 3) {
            for (i29 = 11; i29 < 258; i29 += 2) {
                for (i31 = 1; i31 < 3; ++i31) {
                    bArr1[i27 - 1] = Test.bFld;
                    Test.fFld = (float)Test.dFld;
                    Test.iFld += i31;
                    Test.instanceCount = (long)Test.fFld;
                }
                s2 = by3;
                i32 *= i27;
                i30 += (int)Test.instanceCount;
            }
            Test.iFld = i28;
            for (i33 = 12; 258 > i33; i33++) {
                switch ((((i30 >>> 1) % 6) * 5) + 13) {
                case 17:
                    Test.iArrFld[i27][i33 - 1] += i33;
                    if (Test.bFld) break;
                    Test.lArrFld[i27 + 1][i27] <<= 1;
                    i30 = i32;
                    i32 += (int)(-36L + (i33 * i33));
                    i30 = (int)Test.dFld;
                    break;
                case 28:
                case 14:
                    for (f4 = 1; f4 < 2; f4++) {
                        Test.bFld = Test.bFld;
                        Test.iFld += (int)(((f4 * by3) + i28) - i29);
                        Test.iFld += s2;
                        iFld1 = (int)Test.fFld;
                        fArr3[(int)(f4)] *= Test.sFld;
                    }
                    Test.iFld += (i33 | s2);
                    Test.lArrFld[i27][i33 + 1] -= (long)-2.811F;
                case 43:
                    for (i36 = 1; 2 > i36; ++i36) {
                        i34 <<= Test.iFld;
                        try {
                            i35 = (Test.iFld / Test.iArrFld[i36][i36 - 1]);
                            Test.iArrFld[i33][i36 + 1] = (-8238 % Test.iArrFld[i36 - 1][i33]);
                            Test.iArrFld[i27 + 1][i27 - 1] = (i31 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        i28 = (int)Test.instanceCount;
                        i32 = i38;
                        Test.lArrFld[i27 + 1][i33 + 1] *= i29;
                        i38 <<= (int)Test.instanceCount;
                        i30 += (((i36 * l4) + Test.instanceCount) - Test.fFld);
                        i38 += i27;
                    }
                    break;
                case 26:
                    i28 += i33;
                case 16:
                    if (Test.bFld) break;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("s2 by3 i33 = " + s2 + "," + by3 + "," + i33);
        FuzzerUtils.out.println("i34 f4 i35 = " + i34 + "," + Float.floatToIntBits(f4) + "," + i35);
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("l4 bArr1 fArr3 = " + l4 + "," + FuzzerUtils.checkSum(bArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr3)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld Test.fFld Test.bFld = " + Test.iFld + "," + Float.floatToIntBits(Test.fFld)
            + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("iFld1 Test.lArrFld Test.iArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld)
            + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 lMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth2 vMeth1 lMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

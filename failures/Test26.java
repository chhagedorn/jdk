// Generated by Java* Fuzzer test generator (1.0.001). Thu Jul  6 04:50:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=162L;
    public int iFld=48463;
    public static byte byFld=96;
    public double dFld=0.119881;
    public static short sFld=29440;
    public boolean bFld=false;
    public long lFld=4L;
    public static boolean bArrFld[][]=new boolean[N][N];
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.lArrFld, 22616L);
        FuzzerUtils.init(Test.iArrFld, -26305);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        float f=0.968F, f1=0.951F;
        int i5=10992, i6=-13, i8=1, i9=-17639, i10=60060, i11=45612;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1998766819577165385L);

        f = -207L;
        Test.iArrFld = Test.iArrFld;
        for (long l : lArr) {
            f1 = 1;
            while (++f1 < 4) {
                for (i5 = 1; i5 < 1; ++i5) {
                    Test.instanceCount -= l;
                }
                i6 += (int)(f1 * i6);
            }
            Test.lArrFld[(i6 >>> 1) % N][(i5 >>> 1) % N] = i5;
            for (i8 = 1; i8 < 4; ++i8) {
                switch ((((i6 >>> 1) % 9) * 5) + 58) {
                case 78:
                    Test.byFld *= (byte)i8;
                    break;
                case 88:
                    if (i9 != 0) {
                        vMeth2_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + i8 + i9 +
                            i10 + i11 + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    for (i10 = 1; 2 > i10; i10++) {
                        boolean b=false;
                        Test.instanceCount &= l;
                        b = true;
                    }
                    break;
                case 73:
                case 91:
                    i11 += i8;
                    break;
                case 66:
                    f *= i9;
                    break;
                case 98:
                    i9 += (int)f1;
                    break;
                case 82:
                case 92:
                    i9 += i8;
                case 80:
                    i6 = i6;
                default:
                    l = -2;
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i4) {

        long l1=-3288050299L;
        int i12=-19529, i13=-11108;
        short s=-30735;
        float f2=33.857F;

        vMeth2();
        i4 -= i4;
        Test.iArrFld[(i4 >>> 1) % N] -= (int)Test.instanceCount;
        Test.instanceCount = i4;
        for (l1 = 8; l1 < 228; ++l1) {
            i13 = 1;
            while (++i13 < 7) {
                i4 = 22;
                s += (short)f2;
                Test.instanceCount -= l1;
                i12 -= i12;
                i4 += i4;
                if (i13 != 0) {
                    vMeth1_check_sum += i4 + l1 + i12 + i13 + s + Float.floatToIntBits(f2);
                    return;
                }
                i12 *= i4;
                f2 += (i13 - s);
                Test.instanceCount += (-16386 + (i13 * i13));
            }
        }
        vMeth1_check_sum += i4 + l1 + i12 + i13 + s + Float.floatToIntBits(f2);
    }

    public static void vMeth(int i) {

        int i1=8, i2=-219, i3=46928, i14=-21718, i15=14, i16=1, iArr[][]=new int[N][N];
        double d1=1.70342;
        boolean b1=false;

        FuzzerUtils.init(iArr, -78);

        i1 = 1;
        do {
            i += (4227 + (i1 * i1));
            if (Test.bArrFld[i1][i1 + 1] = ((Math.min(3723974139146391395L, Test.instanceCount) + (++Test.lArrFld[i1 +
                1][i1 + 1])) == iArr[i1 + 1][i1])) continue;
            for (i2 = i1; i2 < 7; ++i2) {
                double d=23.80996;
                Test.lArrFld[i2 - 1][i2] ^= (long)(227 - ((d - i1) + (i3 - Test.instanceCount)));
                vMeth1(i2);
                i3 >>>= i3;
                for (d1 = 1; d1 < 1; ++d1) {
                    i14 += (int)(((d1 * Test.instanceCount) + Test.instanceCount) - i);
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-6);
                    i14 -= i14;
                }
                if (b1) break;
            }
            for (i15 = i1; i15 < 7; ++i15) {
                i3 = 13;
                i16 += i1;
            }
        } while (++i1 < 239);
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d1) + i14 + (b1 ? 1 : 0) + i15 + i16 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        float f3=-41.849F;
        int i17=119, i18=222, i19=-13, i20=17064, i21=-220, i22=21777, i23=46, i24=-57750, i25=-2, i26=150;

        Test.instanceCount *= ((iFld++) >> 3033489743L);
        vMeth(iFld);
        iFld = iFld;
        iFld -= iFld;
        Test.iArrFld[(179 >>> 1) % N] = (int)-9077797372314176750L;
        f3 -= f3;
        for (i17 = 291; i17 > 8; i17--) {
            for (i19 = 2; i19 < 89; ++i19) {
                dFld = Test.sFld;
                for (i21 = i17; i21 < 2; i21++) {
                    dArrFld[i19] = dArrFld[i21 + 1];
                    i18 -= -3;
                    dFld = f3;
                    f3 += (float)dFld;
                    Test.lArrFld[(i22 >>> 1) % N][i17 - 1] |= Test.sFld;
                    i18 = (int)Test.instanceCount;
                }
                for (i23 = 2; i23 > i19; --i23) {
                    if (bFld) {
                        Test.iArrFld[i19] = (int)Test.instanceCount;
                        Test.iArrFld[i17] = -7;
                    }
                    Test.iArrFld[i23] += (int)f3;
                    Test.instanceCount += (i23 | Test.byFld);
                    Test.instanceCount *= (long)f3;
                    Test.instanceCount -= Test.instanceCount;
                    Test.lArrFld[i23][i17] -= i19;
                    i20 = iFld;
                }
                Test.instanceCount += Test.instanceCount;
                for (i25 = 1; 2 > i25; i25++) {
                    i22 -= Test.byFld;
                    lFld = i19;
                }
            }
        }

        FuzzerUtils.out.println("f3 i17 i18 = " + Float.floatToIntBits(f3) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 = " + i25 + "," + i26);

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("dFld Test.sFld bFld = " + Double.doubleToLongBits(dFld) + "," + Test.sFld + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("lFld Test.bArrFld Test.lArrFld = " + lFld + "," + FuzzerUtils.checkSum(Test.bArrFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

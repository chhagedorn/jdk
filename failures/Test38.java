// Generated by Java* Fuzzer test generator (1.0.001). Wed Jul 26 03:05:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=145027220L;
    public static int iFld=9;
    public static float fFld=0.381F;
    public static boolean bFld=true;
    public byte byFld=42;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 52381);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i2=-43314, i3=3, i4=84, i5=82;
        double d1=26.64393;
        byte by1=127;
        short s=-29173;

        Test.iFld += 3;
        for (i2 = 10; 177 > i2; ++i2) {
            d1 *= i3;
            i3 <<= (int)Test.instanceCount;
            i3 >>= i3;
            for (i4 = 1; i4 < 9; ++i4) {
                i5 = (int)Test.instanceCount;
                Test.instanceCount *= by1;
                i3 += Test.iFld;
                Test.iFld -= (int)Test.instanceCount;
                by1 -= (byte)2.367F;
                Test.instanceCount += Test.instanceCount;
                Test.fFld += i4;
                if (Test.bFld) continue;
                Test.fFld += (i4 * s);
            }
        }
        vMeth_check_sum += i2 + i3 + Double.doubleToLongBits(d1) + i4 + i5 + by1 + s;
    }

    public static int iMeth1() {

        double d=0.102134;
        int i6=-4, i7=-11915, i8=-48182, i9=88, iArr1[]=new int[N];
        short s1=-21926;

        FuzzerUtils.init(iArr1, -11876);

        Test.iFld = (int)((--d) * (++Test.iFld));
        vMeth();
        for (i6 = 12; i6 < 375; ++i6) {
            switch (((i6 % 2) * 5) + 30) {
            case 32:
                for (i8 = 1; i8 < 5; i8++) {
                    i9 &= (int)Test.instanceCount;
                    d += d;
                    if (Test.bFld) {
                        switch ((i6 % 2) + 122) {
                        case 122:
                            Test.instanceCount -= Test.instanceCount;
                            if (i9 != 0) {
                            }
                            if (Test.bFld) continue;
                            s1 /= (short)(Test.instanceCount | 1);
                        case 123:
                            Test.instanceCount *= -4619576054024245360L;
                            i9 -= i7;
                        default:
                            iArr1[i6 - 1] <<= Test.iFld;
                        }
                    } else {
                        Test.iFld -= i9;
                    }
                }
                break;
            case 35:
                Test.iFld += (int)5L;
                break;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + s1 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        byte by=-104;
        int i10=-1, i11=-48, i12=-8, iArr[]=new int[N];
        double d2=124.15893;
        short s2=-4000, sArr[]=new short[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(sArr, (short)-7694);

        for (int i1 : iArr) {
            sArr[(i1 >>> 1) % N] = (short)((-233 - (i1++)) + ((i1 + i1) + (by - i1)));
            iMeth1();
            switch ((((-13 >>> 1) % 1) * 5) + 13) {
            case 18:
                i10 = 4;
                do {
                    for (i11 = 1; i11 < 1; ++i11) {
                        if (Test.bFld) break;
                        d2 += Test.fFld;
                        s2 |= (short)i10;
                        i1 = (int)Test.instanceCount;
                        if (Test.bFld) {
                            if (Test.bFld) break;
                            iArr[i11] -= (int)Test.instanceCount;
                            Test.fFld = i10;
                        }
                        i1 += i11;
                    }
                } while (--i10 > 0);
            default:
                s2 = s2;
            }
        }
        long meth_res = by + i10 + i11 + i12 + Double.doubleToLongBits(d2) + s2 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=65, i13=-40612, i14=8, i15=209, i16=-162, i17=-56485, i18=3, i19=-60635;
        float f=31.747F;
        double d3=24.76036;
        long lArr[][]=new long[N][N];
        byte byArr[]=new byte[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(byArr, (byte)-45);
        FuzzerUtils.init(bArr, false);

        i += iMeth();
        i += (int)Test.instanceCount;
        i *= i;
        for (f = 7; f < 391; f++) {
            Test.iFld = i13;
            i13 *= (int)Test.instanceCount;
            lArr[(int)(f - 1)][(int)(f + 1)] &= i13;
            i13 *= i;
            for (i14 = 2; i14 < 66; i14++) {
                for (i16 = 2; i16 > i14; i16--) {
                    byArr[i16 + 1] += (byte)Test.iFld;
                    Test.instanceCount += i16;
                    i17 *= Test.iFld;
                    i17 *= byFld;
                    Test.iFld *= -18252;
                    lArr[i16][i16 + 1] >>>= Test.instanceCount;
                    if (false) break;
                    Test.instanceCount = byFld;
                    Test.instanceCount += (long)f;
                }
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.bFld = Test.bFld;
                    i13 = 214;
                    Test.iFld += i18;
                    Test.iArrFld[(i14 >>> 1) % N] += (int)Test.instanceCount;
                    i13 = (int)f;
                    Test.iArrFld[i18] = (int)Test.instanceCount;
                }
            }
            Test.instanceCount += (long)(f * f);
            bArr[(int)(f + 1)][(int)(f)] = false;
            Test.instanceCount >>= byFld;
            d3 = Test.instanceCount;
        }

        FuzzerUtils.out.println("i f i13 = " + i + "," + Float.floatToIntBits(f) + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("d3 lArr byArr = " + Double.doubleToLongBits(d3) + "," + FuzzerUtils.checkSum(lArr) +
            "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld byFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + byFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

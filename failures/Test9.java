// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 08:26:46 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-846829434L;
    public static int iFld=22997;
    public static float fFld=1.11F;
    public static boolean bFld=true;
    public static double dFld=69.121212;
    public static short sFld=21806;
    public int iFld1=155;
    public static int iFld2=-163;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -164);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f, int i6, double d) {

        int i7=-148, i8=-19403, i9=13, i10=224, i11=-239, iArr1[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -38159);
        FuzzerUtils.init(fArr, 38.207F);

        i6 *= (int)Test.instanceCount;
        i7 = 1;
        while (++i7 < 280) {
            for (i8 = 1; i8 < 6; i8++) {
                i9 += i8;
                d *= i8;
                i9 = (int)f;
                iArr1[i8 + 1] *= (int)Test.instanceCount;
                fArr[i7 + 1] += i9;
                for (i10 = i7; i10 < 2; ++i10) {
                    if (i10 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + i6 + Double.doubleToLongBits(d) + i7 + i8 + i9 +
                            i10 + i11 + FuzzerUtils.checkSum(iArr1) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    f += i10;
                }
                i11 = (int)Test.instanceCount;
            }
        }
        fArr[(Test.iFld >>> 1) % N] += Test.iFld;
        Test.instanceCount = Test.instanceCount;
        i11 -= (int)f;
        vMeth_check_sum += Float.floatToIntBits(f) + i6 + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static short sMeth(int i5) {

        int i12=12, i13=225, i14=10507, i15=-3, i16=-33;
        byte by=94;

        i5 += (int)(++Test.instanceCount);
        vMeth(Test.fFld, Test.iFld, 0.84495);
        i5 *= i5;
        Test.iArrFld[(-25160 >>> 1) % N] += Test.iFld;
        i12 = 1;
        while (++i12 < 333) {
            if (Test.bFld) {
                switch ((((i5 >>> 1) % 6) * 5) + 50) {
                case 60:
                    Test.iArrFld[i12] = (int)Test.instanceCount;
                case 53:
                    if (false) continue;
                    Test.bFld = Test.bFld;
                    for (i13 = i12; i13 < 5; ++i13) {
                        Test.fFld = i13;
                        for (i15 = 1; 1 > i15; i15++) {
                            Test.iFld += i15;
                            by = (byte)Test.dFld;
                        }
                    }
                    break;
                case 55:
                    Test.iArrFld = Test.iArrFld;
                    break;
                case 59:
                    Test.bFld = true;
                    break;
                case 65:
                    Test.iArrFld[i12] -= -17210;
                    break;
                case 57:
                    Test.iFld = (int)-827663477826608179L;
                    break;
                }
            }
        }
        long meth_res = i5 + i12 + i13 + i14 + i15 + i16 + by;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(int i, int i1, int i2) {

        int i3=214, i4=-243, i17=16, i18=-57940;
        byte by1=54;

        for (i3 = 10; i3 < 393; ++i3) {
            sMeth(i3);
            i17 = 1;
            do {
                i18 = 1;
                while (++i18 < 2) {
                    Test.iArrFld = Test.iArrFld;
                    Test.sFld -= (short)Test.instanceCount;
                    switch ((i17 % 4) + 81) {
                    case 81:
                        i += (i18 | i18);
                        if (Test.bFld) continue;
                        by1 += (byte)i18;
                        break;
                    case 82:
                        Test.instanceCount += Test.iFld;
                        i2 += (((i18 * Test.iFld) + by1) - by1);
                        Test.instanceCount = i;
                        Test.fFld -= i18;
                    case 83:
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 84:
                        if (true) break;
                        break;
                    default:
                        Test.iArrFld[i3 - 1] *= i1;
                    }
                }
            } while ((i17 += 2) < 4);
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i17 + i18 + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f1=1.274F, fArr1[]=new float[N];
        int i19=12728, i20=-18713, i21=-36391, i22=-22355, i23=-9120, i24=-47120, i25=95, i26=-4, i27=-96, i28=-7,
            iArr[]=new int[N], iArr2[][]=new int[N][N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(lArr, 61642L);
        FuzzerUtils.init(fArr1, 39.533F);
        FuzzerUtils.init(iArr2, 1);

        iArr[(Test.iFld >>> 1) % N] >>>= iMeth(-243, -165, Test.iFld);
        for (f1 = 240; f1 > 13; --f1) {
            switch (((i19 >>> 1) % 1) + 72) {
            case 72:
                for (i20 = 2; 111 > i20; i20++) {
                    lArr[(int)(f1 + 1)][(int)(f1 - 1)] = iFld1;
                    Test.instanceCount = iFld1;
                    iArr[i20] += Test.iFld2;
                    lArr[(int)(f1 + 1)][(int)(f1 - 1)] -= i19;
                    i22 += (i20 - Test.iFld);
                    i19 ^= i20;
                }
                switch ((int)((f1 % 9) * 5)) {
                case 13:
                    Test.sFld *= (short)Test.dFld;
                case 20:
                    i22 -= (int)f1;
                    for (i23 = 1; i23 < 111; i23++) {
                        Test.iFld2 -= iFld1;
                        i22 = 27455;
                    }
                    break;
                case 36:
                    i22 += (int)f1;
                    for (i25 = 111; i25 > f1; --i25) {
                        i21 += (i25 ^ (long)f1);
                        Test.instanceCount = i21;
                        for (i27 = (int)(f1); i27 < 1; ++i27) {
                            Test.instanceCount = -73L;
                            Test.fFld = Test.sFld;
                            i28 -= i26;
                            Test.instanceCount = i25;
                            lArr[i27][i25] <<= 235;
                            if (Test.bFld) {
                                iFld1 += (i27 * i27);
                                i28 = (int)28013L;
                            } else if (true) {
                                Test.iFld >>= i22;
                            } else if (Test.bFld) {
                                Test.iFld += -4;
                            } else {
                                i26 += (i27 * i25);
                            }
                        }
                    }
                case 32:
                    Test.fFld += (f1 - i25);
                    break;
                case 41:
                    i19 >>= iFld1;
                    break;
                case 12:
                    i22 = -3918;
                    break;
                case 33:
                    Test.fFld -= i23;
                case 9:
                    iArr2 = FuzzerUtils.int2array(N, (int)-2);
                case 16:
                    if (Test.bFld) break;
                    break;
                default:
                    iArr[(int)(f1 + 1)] = i19;
                }
            default:
                try {
                    i26 = (-65 / i21);
                    i22 = (43979 % i22);
                    iArr[(int)(f1 + 1)] = (-223 / i22);
                } catch (ArithmeticException a_e) {}
            }
        }

        FuzzerUtils.out.println("f1 i19 i20 = " + Float.floatToIntBits(f1) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 iArr = " + i27 + "," + i28 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr fArr1 iArr2 = " + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.dFld Test.sFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("iFld1 Test.iFld2 Test.iArrFld = " + iFld1 + "," + Test.iFld2 + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

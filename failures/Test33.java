// Generated by Java* Fuzzer test generator (1.0.001). Wed Jul 19 02:46:28 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4888909937567654338L;
    public static volatile long lFld=1578566075L;
    public static short sFld=28462;
    public static boolean bFld=true;
    public int iFld=-40433;
    public static float fFld=33.542F;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 104);
        FuzzerUtils.init(Test.sArrFld, (short)14361);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i12, boolean b, int i13) {

        float f2=-111.665F, fArr[]=new float[N];
        double d=-10.20453;
        int i14=-3, i15=21350, i16=-180, i17=0, i18=12, i19=248, i20=-159;
        byte by2=-127;
        short s=28513;

        FuzzerUtils.init(fArr, -1.384F);

        Test.iArrFld = Test.iArrFld;
        f2 += (float)d;
        d -= i12;
        Test.iArrFld[(i12 >>> 1) % N] += i12;
        for (i14 = 4; i14 < 235; i14++) {
            i12 |= 10;
            Test.iArrFld[i14 - 1] -= i15;
            fArr = fArr;
            Test.sArrFld[i14 - 1] >>= by2;
        }
        i16 = 1;
        do {
            for (i17 = 7; i17 > i16; --i17) {
                Test.iArrFld[i17 + 1] += (int)Test.lFld;
                i19 = 1;
                while (++i19 < 1) {
                    Test.instanceCount += (((i19 * s) + Test.lFld) - i12);
                    Test.lFld += -119;
                }
                switch (((i16 % 1) * 5) + 42) {
                case 43:
                    Test.instanceCount -= i19;
                    f2 += i13;
                    i12 += (i17 * i20);
                    i20 = 121;
                    break;
                }
            }
        } while (++i16 < 248);
        long meth_res = i12 + (b ? 1 : 0) + i13 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i14 + i15 +
            by2 + i16 + i17 + i18 + i19 + s + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i8, int i9) {

        float f1=-1.618F;
        int i10=38488, i11=-12342, i21=-4, i22=-139, i23=10894, i24=177, i25=-132;
        boolean b1=true;
        byte by3=121;
        double d1=2.39572;

        Test.instanceCount = (long)((++i8) - ((--Test.instanceCount) - (f1++)));
        f1 += Test.instanceCount;
        for (i10 = 12; 320 > i10; ++i10) {
            f1 %= (iMeth(i11, b1, i10) | 1);
            by3 += (byte)3L;
            f1 -= Test.instanceCount;
            for (i21 = 1; i21 < 5; i21++) {
                f1 += (i21 - Test.sFld);
                i23 = 1;
                do {
                    i8 += i10;
                } while ((i23 += 3) < 2);
                f1 /= (i10 | 1);
                for (i24 = 1; i24 < 2; i24++) {
                    Test.lFld -= i9;
                    i8 *= (int)d1;
                }
                f1 *= 0.414F;
                i11 *= i23;
                Test.lFld >>= i8;
                Test.instanceCount = (long)60.102937;
                Test.iArrFld[i10 + 1] >>= -2;
            }
            i8 = (int)f1;
        }
        vMeth1_check_sum += i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + (b1 ? 1 : 0) + by3 + i21 + i22 + i23 + i24
            + i25 + Double.doubleToLongBits(d1);
    }

    public static long lMeth(int i1, int i2) {

        int i3=54654, i4=-32750, i5=-6, i6=-217, i7=-197;
        float f=2.89F, f3=62.171F;
        byte by1=-58;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -100L);

        for (i3 = 8; i3 < 179; ++i3) {
            Test.instanceCount *= Math.min(i4, (int)((Test.instanceCount * -10) * lArr[i3 - 1][i3 - 1]));
            for (i5 = 1; i5 < 9; i5 += 2) {
                for (f = 1; f < 3; f++) {
                    by1 += (byte)Short.reverseBytes((short)((i4 / 1.830F) + (i7 + 183L)));
                    vMeth1(18409, 3);
                    if (Test.bFld) continue;
                    lArr[i5 - 1] = lArr[(int)(f - 1)];
                    i1 = 6;
                    i1 *= -6;
                    if (Test.bFld) break;
                    Test.instanceCount -= i1;
                    Test.instanceCount += 24683;
                    switch ((i3 % 2) + 42) {
                    case 42:
                        i2 = (int)Test.lFld;
                        i2 += (int)f;
                        f3 += (-171L + (f * f));
                        Test.lFld >>= i2;
                        try {
                            Test.iArrFld[i3] = (i6 % i4);
                            i6 = (i6 / Test.iArrFld[i3 - 1]);
                            i7 = (Test.iArrFld[i5 - 1] / 63926);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 43:
                        i6 -= by1;
                        break;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + by1 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, long l1, byte by) {

        long l2=-2L, lArr1[]=new long[N], lArr2[][]=new long[N][N];
        int i=-16313, i26=134, i27=2, i28=37378, i29=-12;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.6947);
        FuzzerUtils.init(lArr1, 56566L);
        FuzzerUtils.init(lArr2, -67L);

        for (l2 = 7; l2 < 243; ++l2) {
            lMeth(i, 0);
            for (i26 = 1; i26 < 7; ++i26) {
                for (i28 = 1; i28 < 2; ++i28) {
                    switch (((i28 % 3) * 5) + 30) {
                    case 34:
                        dArr[(int)(l2)] *= Test.lFld;
                        Test.instanceCount = i27;
                        if (Test.bFld) {
                            Test.instanceCount -= i27;
                            lArr1 = lArr1;
                            lArr2 = lArr2;
                        } else if (Test.bFld) {
                            if (Test.bFld) continue;
                        }
                        by |= (byte)i28;
                        i += (-17596 + (i28 * i28));
                        break;
                    case 41:
                        Test.instanceCount = l1;
                        Test.lFld += -8;
                        lArr1[i28 + 1] = i29;
                        i27 += (int)l2;
                    case 43:
                        Test.bFld = Test.bFld;
                        i27 = -87;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += l + l1 + by + l2 + i + i26 + i27 + i28 + i29 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        long l3=54616L, lArr3[]=new long[N];
        int i30=60888, i31=-8267, i32=-2, i33=0, i34=-59314, iArr[]=new int[N];
        byte by4=62;
        double d2=-6.126094, dArr1[]=new double[N];

        FuzzerUtils.init(lArr3, 2102675588L);
        FuzzerUtils.init(iArr, -864);
        FuzzerUtils.init(dArr1, 0.86475);

        vMeth(Test.lFld, 30855L, (byte)(99));
        iFld = (int)Test.fFld;
        Test.fFld = iFld;
        for (l3 = 6; l3 < 386; l3++) {
            iFld %= (int)(Test.lFld | 1);
            iFld |= iFld;
            i31 = 66;
            while ((i31 -= 2) > 0) {
                if (Test.bFld) continue;
                switch ((int)((l3 % 7) + 125)) {
                case 125:
                case 126:
                    Test.iArrFld = Test.iArrFld;
                    for (i32 = 2; i32 > i31; i32 -= 3) {
                        iFld *= i33;
                        if (Test.bFld) continue;
                        Test.iArrFld[(int)(l3)] += (int)l3;
                        by4 -= (byte)i30;
                        switch (((i31 % 1) * 5) + 35) {
                        case 38:
                            lArr3[i31 - 1] = l3;
                            Test.sFld += (short)(((i32 * iFld) + Test.instanceCount) - iFld);
                            switch ((int)(((l3 % 2) * 5) + 24)) {
                            case 30:
                                Test.lFld = iFld;
                                Test.bFld = Test.bFld;
                                Test.sFld += (short)(i32 * Test.sFld);
                                i30 = -10;
                                iArr[(int)(l3 - 1)] = 709;
                                iArr[i31 + 1] -= i32;
                                break;
                            case 33:
                            default:
                                Test.fFld -= i31;
                                Test.iArrFld[i32 - 1] += (int)-2.576F;
                                Test.lFld = Test.lFld;
                                iFld = i32;
                                Test.bFld = Test.bFld;
                            }
                            break;
                        default:
                            Test.fFld += i32;
                            lArr3[i32] -= (long)Test.fFld;
                        }
                    }
                    i34 = 1;
                    do {
                        lArr3[i31] = i34;
                        Test.bFld = Test.bFld;
                        d2 = by4;
                        i30 <<= iFld;
                        dArr1 = FuzzerUtils.double1array(N, (double)-99.112608);
                        d2 = 4;
                        i30 = i31;
                    } while (++i34 < 2);
                case 127:
                    Test.fFld += Test.lFld;
                    break;
                case 128:
                    Test.instanceCount += (((i31 * l3) + Test.fFld) - Test.sFld);
                case 129:
                    Test.sFld *= (short)d2;
                    break;
                case 130:
                    iFld = (int)l3;
                    break;
                case 131:
                    i30 |= i30;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("l3 i30 i31 = " + l3 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 by4 = " + i32 + "," + i33 + "," + by4);
        FuzzerUtils.out.println("i34 d2 lArr3 = " + i34 + "," + Double.doubleToLongBits(d2) + "," +
            FuzzerUtils.checkSum(lArr3));
        FuzzerUtils.out.println("iArr dArr1 = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.sFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld iFld Test.fFld = " + (Test.bFld ? 1 : 0) + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

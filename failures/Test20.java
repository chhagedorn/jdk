// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul 10 04:56:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-62L;
    public static byte byFld=64;
    public static float fFld=0.333F;
    public static short sFld=-18075;
    public static byte byArrFld[]=new byte[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)106);
        FuzzerUtils.init(Test.dArrFld, 87.21390);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9) {

        float f=37.298F;
        int i10=-94, i11=14881, i12=8146, i13=6, i14=30781, i15=71, iArr1[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr1, 205);

        if (b) {
            iArr1[(i9 >>> 1) % N] = (int)Test.instanceCount;
            f %= (Test.instanceCount | 1);
            for (i10 = 14; i10 < 289; ++i10) {
                i11 += (i10 * Test.instanceCount);
                if (b) continue;
                i9 = i10;
                for (i12 = 1; i12 < 6; i12++) {
                    i13 >>= (int)2594658564798458900L;
                    Test.instanceCount += i12;
                    for (i14 = 1; 2 > i14; i14++) {
                        i13 = i13;
                        i9 = i10;
                        i15 ^= (int)-4L;
                    }
                    Test.byArrFld[(i13 >>> 1) % N] *= (byte)i14;
                }
            }
        } else if (b) {
            i13 += i15;
        }
        vMeth1_check_sum += i9 + Float.floatToIntBits(f) + i10 + i11 + (b ? 1 : 0) + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i6, int i7, int i8) {

        int i16=135, i17=14695, i18=9, i19=100, iArr2[][]=new int[N][N];
        double d1=-1.40646;
        short s=18150;

        FuzzerUtils.init(iArr2, 12);

        vMeth1(i6);
        for (i16 = 13; i16 < 234; i16++) {
            i6 = i6;
            Test.instanceCount += i6;
            d1 -= i6;
            i17 = i16;
            iArr2[i16 + 1][(i8 >>> 1) % N] -= i17;
            Test.instanceCount += 117;
            i8 <<= i16;
            iArr2[i16][i16] -= i8;
            for (i18 = i16; 7 > i18; ++i18) {
                i6 += i18;
                Test.dArrFld[i18] -= i8;
            }
        }
        i17 = (int)5297303395846219507L;
        Test.byFld -= (byte)s;
        long meth_res = i6 + i7 + i8 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + i19 + s +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=218, i1=-2, i2=149, i3=-104, i4=88, i5=-59379, iArr[]=new int[N];
        double d=-115.106138;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(fArr, -1.870F);
        FuzzerUtils.init(iArr, 222);

        lArr = lArr;
        for (i = 14; i < 234; i++) {
            for (i2 = i; i2 < 7; i2++) {
                d %= (Test.instanceCount | 1);
                for (i4 = 1; i4 < 1; ++i4) {
                    Test.instanceCount <<= i;
                    i5 = (int)(fArr[i - 1]++);
                    iArr[i4 + 1] &= ((iArr[i] * 42444) - Math.max(iMeth(i, -2, -222), 50));
                    i3 = (int)Test.fFld;
                    i1 -= (int)69.364F;
                    i1 = (int)Test.instanceCount;
                }
                Test.fFld = Test.sFld;
                i1 *= i5;
                i1 = -16549;
                Test.fFld -= Test.instanceCount;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=61259, i21=-27187, i22=-23382, i23=178, i24=-60795, i25=5, i26=-164, i27=32590, i28=1, iArr3[]=new
            int[N];
        boolean b1=false;
        double d2=-1.79337;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -6755135850137302366L);
        FuzzerUtils.init(iArr3, -8);

        vMeth();
        lArr1[(i20 >>> 1) % N] -= 0;
        for (i21 = 9; 272 > i21; i21++) {
            Test.instanceCount += i21;
            Test.instanceCount += (i21 * i21);
            i23 = 1;
            while (++i23 < 96) {
                i24 *= 235;
                Test.instanceCount += (i23 ^ i24);
                i20 += (((i23 * i23) + Test.instanceCount) - i23);
                b1 = b1;
                for (i25 = 1; i25 < 1; i25++) {
                    d2 += i25;
                    if (b1) continue;
                    try {
                        iArr3[i23] = (i23 / iArr3[i25 + 1]);
                        i22 = (i21 % i22);
                        i22 = (118 % iArr3[i21]);
                    } catch (ArithmeticException a_e) {}
                    if (b1) continue;
                    Test.instanceCount ^= i26;
                    b1 = b1;
                    i20 = (int)Test.instanceCount;
                    Test.fFld += Test.fFld;
                    i24 += i25;
                    iArr3[i25 + 1] &= i21;
                }
                iArr3[i23] = i21;
                iArr3[i23] = (int)0L;
                Test.sFld += (short)(((i23 * Test.instanceCount) + i24) - i25);
                for (i27 = 1; i27 > i23; i27 -= 3) {
                    if (b1) break;
                    Test.fFld += (i27 + Test.instanceCount);
                    iArr3[i27] <<= (int)Test.instanceCount;
                    i20 = (int)Test.instanceCount;
                    iArr3 = iArr3;
                }
            }
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 b1 = " + i23 + "," + i24 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i25 i26 d2 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i27 i28 lArr1 = " + i27 + "," + i28 + "," + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.byArrFld Test.dArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.byArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

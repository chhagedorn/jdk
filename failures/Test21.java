// Generated by Java* Fuzzer test generator (1.0.001). Tue Jul 11 00:23:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1450301208401987577L;
    public static volatile int iFld=11;
    public static boolean bFld=true;
    public float fFld=2.783F;
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -59.695F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i3, byte by1) {

        int i4=-41855, i5=24080, i6=0, i7=-77, i8=23818, iArr[]=new int[N], iArr1[][]=new int[N][N];
        float f1=-123.728F;
        short s=-17283;

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(iArr1, -9);

        i4 = 1;
        while (++i4 < 134) {
            for (i5 = 12; i5 > i4; i5 -= 2) {
                iArr[i4 + 1] ^= i4;
                i7 = 1;
                do {
                    Test.iFld -= (int)Test.instanceCount;
                    f1 = f1;
                    switch (((i6 >>> 1) % 7) + 65) {
                    case 65:
                        iArr[i4] = i3;
                        iArr1 = iArr1;
                        break;
                    case 66:
                        by1 += (byte)(i7 * Test.iFld);
                    case 67:
                        switch ((i5 % 7) + 43) {
                        case 43:
                            try {
                                Test.iFld = (10 % Test.iFld);
                                i6 = (Test.iFld / -64594);
                                i3 = (Test.iFld / 88);
                            } catch (ArithmeticException a_e) {}
                            iArr1 = iArr1;
                            break;
                        case 44:
                            iArr1[i7][i4 - 1] = Test.iFld;
                            break;
                        case 45:
                            l1 -= (long)-100.484F;
                            break;
                        case 46:
                            Test.iFld = i5;
                        case 47:
                            Test.iFld |= i6;
                            break;
                        case 48:
                            i6 = i3;
                            break;
                        case 49:
                            Test.iFld -= by1;
                        }
                        break;
                    case 68:
                        if (i8 != 0) {
                            vMeth1_check_sum += l1 + i3 + by1 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + s +
                                FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        break;
                    case 69:
                        l1 &= -11;
                    case 70:
                        i8 -= s;
                        break;
                    case 71:
                        by1 = (byte)-221;
                        break;
                    default:
                        iArr1[i5 + 1][i4 - 1] >>= s;
                    }
                } while (++i7 < 1);
            }
        }
        vMeth1_check_sum += l1 + i3 + by1 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + s +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l, int i2) {

        byte by2=-6, by3=59;
        float f2=-2.100F;
        int i9=0, i10=28590, iArr2[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr2, -247);

        vMeth1(l, Test.iFld, by2);
        Test.iFld = (int)f2;
        i2 >>= Test.iFld;
        i2 += (int)f2;
        iArr2[(i2 >>> 1) % N] += i2;
        by3 >>= (byte)Test.instanceCount;
        Test.iFld <<= i2;
        for (i9 = 6; i9 < 218; ++i9) {
            Test.iFld = (int)-1802655844L;
            if (b) break;
        }
        try {
            f2 = l;
        }
        catch (UserDefinedExceptionTest exc4) {
            if (b) {
                Test.iFld <<= -23;
            } else if (b) {
                i10 *= 11;
            }
        }
        catch (NegativeArraySizeException exc5) {
            i10 += 16178;
        }
        long meth_res = l + i2 + by2 + Float.floatToIntBits(f2) + by3 + i9 + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f) {

        int i=-10, i1=4, i11=-98, i12=12, i13=-228, i14=9, i15=-32815, iArr3[]=new int[N];
        double d1=0.96410, dArr[][]=new double[N][N];
        short s1=-10085;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4281131092L);
        FuzzerUtils.init(dArr, 17.25156);
        FuzzerUtils.init(iArr3, -10);

        for (i = 9; 161 > i; ++i) {
            lArr[i] = i;
        }
        iMeth(Test.instanceCount, i);
        i11 = 1;
        do {
            i1 += (((i11 * i) + i11) - i);
            dArr[i11][i11 + 1] *= f;
        } while (++i11 < 164);
        for (i12 = 354; i12 > 16; i12 -= 2) {
            try {
                i1 = (57153 % i11);
                i13 = (-118 / i);
                Test.iFld = (Test.iFld / -173);
            } catch (ArithmeticException a_e) {}
            iArr3[i12] = i;
            d1 -= i11;
        }
        Test.iFld = (int)Test.instanceCount;
        i13 ^= i12;
        for (i14 = 11; i14 < 398; ++i14) {
            s1 = (short)37742L;
            f += i14;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15
            + s1 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        byte by=74, by4=-28;
        double d=-112.70325;
        int i16=-33658, i17=-252, i18=0, i19=-194, i20=-12, i21=-5, i22=-1983, i23=1, i24=-160, iArr4[]=new int[N];
        long l2=119L;
        short s2=-21115;

        FuzzerUtils.init(iArr4, -51330);

        Test.iFld >>>= (int)(by * ((Test.fArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N]++) + (--Test.iFld)));
        d += Short.reverseBytes((short)(Test.fArrFld[(171 >>> 1) % N][(Test.iFld >>> 1) % N] * (Test.iFld &
            Test.instanceCount)));
        vMeth(62.272F);
        try {
            iArr4[(Test.iFld >>> 1) % N] = (int)d;
            for (i16 = 145; i16 > 9; i16 -= 2) {
                l2 = l2;
                if (Test.bFld) break;
                for (i18 = 10; i18 < 368; i18++) {
                    i17 += (i18 * Test.iFld);
                    i20 = 2;
                    do {
                        fFld += i19;
                        iArr4[i18 - 1] += by;
                        iArr4[i16 + 1] >>>= i20;
                    } while ((i20 -= 3) > 0);
                    Test.iFld ^= i20;
                    i19 *= i20;
                    try {
                        i19 = (i18 % 90);
                        i17 = (iArr4[i16] % 162);
                        Test.iFld = (-8351 / i17);
                    } catch (ArithmeticException a_e) {}
                    try {
                        i21 = (i20 / i21);
                        i19 = (i16 % i19);
                        i21 = (iArr4[i16] % i18);
                    } catch (ArithmeticException a_e) {}
                    switch ((i16 % 2) + 17) {
                    case 17:
                        l2 += i20;
                        break;
                    case 18:
                        Test.instanceCount -= i17;
                        for (i22 = 1; i22 < 2; i22++) {
                            Test.iFld += (i22 + fFld);
                            i21 = s2;
                            iArr4[i16] = (int)d;
                            switch ((i16 % 7) + 14) {
                            case 14:
                                Test.iFld += (i22 | by4);
                                break;
                            case 15:
                                Test.iFld += i23;
                                d += Test.instanceCount;
                                Test.iFld = i16;
                                break;
                            case 16:
                                i19 = (int)Test.instanceCount;
                            case 17:
                            case 18:
                            case 19:
                                i23 += i17;
                                break;
                            case 20:
                                i17 += i22;
                                break;
                            default:
                                l2 |= i20;
                            }
                        }
                        break;
                    default:
                    }
                }
            }
        }
        catch (ArithmeticException exc6) {
            d *= by;
        }
        catch (ArrayIndexOutOfBoundsException exc7) {
            Test.instanceCount = i24;
        }

        FuzzerUtils.out.println("by d i16 = " + by + "," + Double.doubleToLongBits(d) + "," + i16);
        FuzzerUtils.out.println("i17 l2 i18 = " + i17 + "," + l2 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 s2 = " + i22 + "," + i23 + "," + s2);
        FuzzerUtils.out.println("by4 i24 iArr4 = " + by4 + "," + i24 + "," + FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test.fArrFld = " + Float.floatToIntBits(fFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

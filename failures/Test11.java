// Generated by Java* Fuzzer test generator (1.0.001). Sun Jul  2 04:50:52 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-87L;
    public static float fFld=-109.174F;
    public double dFld=22.78480;
    public static volatile long lArrFld[][]=new long[N][N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 253L);
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b, int i2, int i3) {

        int i4=-5, i5=-2, i6=-21813, i7=-15139, i8=-8;
        byte by=-29;
        short s=14960, sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)-31940);
        FuzzerUtils.init(fArr, 45.874F);

        for (i4 = 11; i4 < 201; ++i4) {
            i3 ^= (int)Test.instanceCount;
            Test.lArrFld[i4 - 1][i4] -= (long)-1.85062;
            i3 -= (int)Test.instanceCount;
            sArr[i4] >>= by;
        }
        i5 -= i2;
        for (i6 = 10; i6 < 203; i6 += 3) {
            Test.instanceCount >>= by;
            i2 >>= i2;
            fArr[i6 - 1] = 206;
            if (i3 != 0) {
            }
        }
        Test.instanceCount = i6;
        i8 = 1;
        while (++i8 < 190) {
            Test.instanceCount <<= i3;
            s = (short)107;
        }
        long meth_res = (b ? 1 : 0) + i2 + i3 + i4 + i5 + by + i6 + i7 + i8 + s + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, long l) {

        boolean b1=true;
        double d=-2.37287, dArr[]=new double[N];
        int i9=-7, i10=169, i11=7, i12=-183, i13=-33001, i14=4, i15=46, i16=59894;
        byte by1=103;

        FuzzerUtils.init(dArr, 0.50804);

        i1 *= iMeth(b1, i1, -56022);
        d -= i1;
        Test.instanceCount *= i1;
        i9 = 1;
        while (++i9 < 297) {
            by1 += by1;
        }
        for (i10 = 17; 380 > i10; i10++) {
            switch (((i10 % 7) * 5) + 82) {
            case 86:
                d += i10;
                for (i12 = 1; i12 < 5; i12++) {
                    l = i11;
                    for (i14 = 1; i14 < 2; ++i14) {
                        short s1=-20139;
                        Test.iArrFld = Test.iArrFld;
                        if (b1) break;
                        if (i10 != 0) {
                            vMeth1_check_sum += i1 + l + (b1 ? 1 : 0) + Double.doubleToLongBits(d) + i9 + by1 + i10 +
                                i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        i15 += (((i14 * s1) + Test.instanceCount) - Test.fFld);
                    }
                }
                break;
            case 114:
                i11 <<= 69;
                break;
            case 88:
                i15 += i10;
                break;
            case 91:
                i11 = i15;
                break;
            case 84:
                Test.instanceCount = i1;
                break;
            case 105:
                dArr[i10 + 1] *= -32663;
                break;
            case 94:
                i1 -= i1;
            default:
                try {
                    i13 = (i1 / i16);
                    i11 = (i10 / i14);
                    i16 = (73163057 % i13);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth1_check_sum += i1 + l + (b1 ? 1 : 0) + Double.doubleToLongBits(d) + i9 + by1 + i10 + i11 + i12 + i13 + i14
            + i15 + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(float f, int i) {

        short s2=30915;
        int i17=196, i18=-8, i19=-95;
        double d1=-36.44064;

        Test.instanceCount -= ((~Integer.reverseBytes(i)) + (-(Test.instanceCount--)));
        vMeth1(i, Test.instanceCount);
        Test.iArrFld[(i >>> 1) % N][(i >>> 1) % N] = s2;
        Test.instanceCount <<= i;
        for (i17 = 2; 127 > i17; ++i17) {
            i = (int)Test.instanceCount;
            i19 = 1;
            do {
                Test.instanceCount = i;
                Test.instanceCount = (long)Test.fFld;
                i += (((i19 * i) + Test.instanceCount) - i17);
                i18 >>= 23822;
                f = i17;
                i18 = i19;
                i = (int)d1;
                Test.instanceCount = -2007792060045928938L;
            } while (++i19 < 13);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + s2 + i17 + i18 + i19 + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i20=10, i21=-1, i22=23657, i23=-38413, i24=-229, i25=-61, i26=-65032, i27=-1, i28=2594, i29=-11, i30=-221,
            i31=128;
        boolean b2=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)28);

        vMeth(Test.fFld, i20);
        i20 *= i20;
        i21 = 357;
        while (--i21 > 0) {
            for (i22 = 2; i22 < 71; i22++) {
                i23 &= 15882;
                for (i24 = i21; i24 < 2; i24++) {
                    dFld *= i25;
                    Test.instanceCount %= (i22 | 1);
                }
                i20 += (i22 - i24);
                Test.iArrFld[i22 - 1][i22] -= (int)Test.fFld;
                dFld *= i23;
                if (false) {
                    i25 = i20;
                } else if (b2) {
                    i20 += (i22 + i23);
                    i20 ^= 73;
                    for (i26 = 2; i26 > 1; i26--) {
                        i20 = (int)Test.instanceCount;
                        i25 *= i24;
                    }
                }
                Test.iArrFld[i22][i22] = i24;
                i27 -= i26;
                for (i28 = 2; i28 > i21; --i28) {
                    i25 %= (int)(i26 | 1);
                    switch (((i30 >>> 1) % 1) + 21) {
                    case 21:
                        Test.iArrFld[i28][i21 + 1] ^= (int)Test.instanceCount;
                        if (b2) continue;
                        try {
                            i29 = (-25 / i23);
                            i30 = (i29 % -37944);
                            i27 = (i31 / -338);
                        } catch (ArithmeticException a_e) {}
                        break;
                    default:
                        if (b2) break;
                        byArr[i28 - 1] += (byte)Test.instanceCount;
                        dFld -= i24;
                    }
                    i27 = i29;
                }
            }
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 b2 = " + i26 + "," + i27 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 byArr = " + i31 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

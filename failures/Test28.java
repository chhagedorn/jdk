// Generated by Java* Fuzzer test generator (1.0.001). Thu Jul 13 03:16:51 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static float fFld=1.250F;
    public static double dFld=94.93334;
    public static double dFld1=0.45605;
    public static boolean bFld=false;
    public short sFld=-20396;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, int i3) {

        int i4=84, i5=-10, i6=-33649, i7=3, i8=41, i9=-131, i10=63423, iArr1[]=new int[N];
        byte by=-71;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -53409);
        FuzzerUtils.init(lArr, 1L);
        FuzzerUtils.init(fArr, 0.700F);

        Test.fFld = i3;
        for (i4 = 13; i4 < 338; ++i4) {
            for (i6 = i4; i6 < 5; i6++) {
                try {
                    i2 = (i4 / i6);
                    i3 = (240 % i6);
                    iArr1[i4 - 1] = (-15 % i4);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += i4;
                lArr[i4 + 1] = i5;
                for (i8 = 1; i8 < 1; i8++) {
                    Test.fFld -= -14692;
                    lArr[i8] += i10;
                    i3 += i8;
                    Test.fFld = by;
                    Test.dFld = i10;
                    iArr1 = iArr1;
                    iArr1[i6] <<= (int)Test.instanceCount;
                }
                fArr[i4 + 1] *= i10;
            }
        }
        vMeth2_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + by + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(float f2, int i1) {


        vMeth2(i1, -218);
        vMeth1_check_sum += Float.floatToIntBits(f2) + i1;
    }

    public void vMeth(int i, float f, float f1) {

        int i11=-44, i12=-13, iArr[]=new int[N];
        boolean b=true;
        byte by1=-99;
        long l=-12L;

        FuzzerUtils.init(iArr, -214);

        i = iArr[(173 >>> 1) % N];
        vMeth1(f, -145);
        Test.instanceCount += (long)Test.dFld;
        for (i11 = 7; i11 < 233; i11++) {
            if (b) {
                i12 += (int)Test.instanceCount;
                i12 += (i11 - f1);
            } else {
                i += (i11 * i11);
            }
            by1 += (byte)(i11 * i11);
            Test.dFld1 *= i12;
            f -= Test.instanceCount;
        }
        b = true;
        i |= (int)l;
        f = i12;
        Test.fFld += i11;
        vMeth_check_sum += i + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i11 + i12 + (b ? 1 : 0) + by1 + l +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=50575, i14=18877, i15=-126, i16=-180, i17=-11, i18=-43499, i19=7, i20=62770, i21=7, i22=-141,
            iArr2[]=new int[N];
        float f3=2.224F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr2, -2);
        FuzzerUtils.init(fArr1, 79.718F);

        vMeth(i13, Test.fFld, Test.fFld);
        iArr2[(56713 >>> 1) % N] -= i13;
        i13 += i13;
        i13 <<= i13;
        i14 = 1;
        do {
            if (Test.bFld) continue;
            i13 += (-172 + (i14 * i14));
            if (Test.bFld) continue;
            for (i15 = 76; 3 < i15; i15--) {
                i13 = i15;
                i16 = i14;
                for (i17 = 2; i17 > i15; i17 -= 2) {
                    i18 += (int)Test.dFld;
                    if (Test.bFld) break;
                    iArr2[i17 - 1] -= (int)Test.instanceCount;
                    i16 -= i13;
                    Test.instanceCount += i14;
                    iArr2 = iArr2;
                    Test.instanceCount = -64347L;
                    i16 <<= i14;
                    Test.instanceCount *= i13;
                }
            }
            for (i19 = 2; i19 < 76; ++i19) {
                Test.instanceCount += i16;
                Test.fFld += (((i19 * i21) + sFld) - Test.instanceCount);
                Test.dFld -= i18;
                Test.fFld += sFld;
                for (f3 = 2; f3 > 1; f3 -= 2) {
                    fArr1[(int)(f3 + 1)] += i15;
                    Test.bFld = Test.bFld;
                    iArr2[(int)(f3 + 1)] -= (int)Test.instanceCount;
                }
            }
        } while (++i14 < 331);

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("f3 i22 iArr2 = " + Float.floatToIntBits(f3) + "," + i22 + "," +
            FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.dFld1 Test.bFld sFld = " + Double.doubleToLongBits(Test.dFld1) + "," + (Test.bFld
            ? 1 : 0) + "," + sFld);

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

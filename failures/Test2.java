// Generated by Java* Fuzzer test generator (1.0.001). Wed May 10 06:44:43 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static float fFld=2.564F;
    public static double dFld=0.88122;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -119);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static float fMeth(int i1, float f1, long l1) {


        i1 *= (int)l1;
        long meth_res = i1 + Float.floatToIntBits(f1) + l1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        int i11=28652, i12=12571, i13=4, i14=-44, i15=13054, iArr1[]=new int[N];
        short s=-22002;
        byte by=53;
        double d=0.112266;

        FuzzerUtils.init(iArr1, 13);

        for (i11 = 10; i11 < 175; ++i11) {
            switch (((i11 >>> 1) % 5) + 7) {
            case 7:
            case 8:
                for (i13 = 1; i13 < 10; i13++) {
                    Test.instanceCount = 9;
                    try {
                        iArr1[i11] = (-125 / i12);
                        i12 = (i11 / 49821);
                        i14 = (-86 / i11);
                    } catch (ArithmeticException a_e) {}
                    if (true) continue;
                    i15 = 1;
                    do {
                        switch (((52424 >>> 1) % 9) + 92) {
                        case 92:
                            i14 = i13;
                            i14 ^= i11;
                            break;
                        case 93:
                        case 94:
                            Test.instanceCount -= (long)Test.fFld;
                            s = (short)i14;
                            i14 -= (int)Test.instanceCount;
                            break;
                        case 95:
                            iArr1[i15] *= i15;
                            i12 += 28420;
                            break;
                        case 96:
                        case 97:
                            by = by;
                            break;
                        case 98:
                            i12 = (int)Test.instanceCount;
                            break;
                        case 99:
                            i12 += i14;
                            break;
                        case 100:
                            i12 = (int)d;
                            break;
                        default:
                            i14 = i13;
                        }
                    } while (++i15 < 2);
                }
            case 9:
                i12 -= i14;
            case 10:
                d /= (i13 | 1);
                break;
            case 11:
                i14 = i12;
                break;
            }
        }
        vMeth_check_sum += i11 + i12 + i13 + i14 + i15 + s + by + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(int i7, long l2, int i8) {

        int i9=753, i10=172, i16=23768, i17=-26134, i18=-11, iArr2[]=new int[N];
        float f2=14.483F;
        boolean b=false;
        byte by1=46;

        FuzzerUtils.init(iArr2, 7);

        for (i9 = 5; i9 < 169; i9++) {
            Test.instanceCount = (i8 *= (int)(-(l2 - i9)));
            vMeth();
            for (i16 = 1; 10 > i16; i16++) {
                for (f2 = 1; f2 < 2; f2++) {
                    i10 |= (int)l2;
                    if (b) break;
                    i18 = i7;
                    switch ((i16 % 2) + 21) {
                    case 21:
                        by1 *= (byte)i8;
                        i10 = i16;
                        i17 -= i17;
                        break;
                    case 22:
                        i8 <<= -11;
                        iArr2[(int)(f2)] &= i16;
                        break;
                    default:
                        Test.iArrFld = Test.iArrFld;
                    }
                }
            }
        }
        long meth_res = i7 + l2 + i8 + i9 + i10 + i16 + i17 + Float.floatToIntBits(f2) + i18 + (b ? 1 : 0) + by1 +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f, long l) {

        int i=-142, i2=-7, i3=-217, i4=32457, i5=0, i6=-224, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 57046);
        FuzzerUtils.init(lArr, -15073L);

        iArr[(i >>> 1) % N] -= (int)(((i += (int)f) - fMeth(i, f, Test.instanceCount)) + ((i - 2.124347) * i));
        i2 = 198;
        while ((i2 -= 3) > 0) {
            i >>= (i2 + (iArr[i2 + 1] - -245));
            Test.instanceCount -= (((-54879 + Math.abs(i)) * l) + 16615);
            for (i3 = 1; i3 < 23; i3++) {
                l += (((i3 * f) + i) - i3);
                for (i5 = i2; 2 > i5; ++i5) {
                    l *= iMeth1(-18354, l, i2);
                    Test.instanceCount = -5;
                    try {
                        i = (i2 / i6);
                        i4 = (Test.iArrFld[i3 - 1][i3 - 1] % 16);
                        i6 = (i / -1);
                    } catch (ArithmeticException a_e) {}
                    i *= i3;
                    i4 = i3;
                    i4 <<= i3;
                    i6 += (int)l;
                    lArr[i5] = i6;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + l + i + i2 + i3 + i4 + i5 + i6 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i19=-1715, i20=29556, i21=20731, i22=-186, i23=-254, i24=130, i25=8873, i26=-12, i27=-64597, i28=-237,
            i29=185;
        byte by2=-56;
        double d1=-1.52311;
        short s1=12210;

        iMeth(Test.fFld, Test.instanceCount);
        i19 = (int)-3457490554990706754L;
        for (i20 = 256; i20 > 3; --i20) {
            Test.instanceCount -= i19;
            i21 = i20;
        }
        i22 = 1;
        while (++i22 < 334) {
            boolean b1=false;
            i19 -= 51;
            for (i23 = 75; i23 > 2; i23--) {
                i24 *= (int)Test.instanceCount;
                i21 = (int)Test.fFld;
                i21 += (-102 + (i23 * i23));
                Test.iArrFld[i22 + 1][i22 - 1] &= i24;
            }
            if (b1) continue;
            i21 = by2;
            i21 += (int)Test.fFld;
            d1 = 1;
            while (++d1 < 75) {
                for (i25 = 1; i25 > i22; i25--) {
                    i19 *= i21;
                    s1 = (short)i24;
                    i24 = i24;
                    Test.iArrFld[i25 + 1][i22] += (int)-1634767387140531947L;
                    i19 *= i24;
                    i24 += i25;
                    i21 += (int)-82.592F;
                    i21 += i26;
                    Test.dFld -= Test.instanceCount;
                }
                i21 /= (int)(i25 | 1);
                for (i27 = 1; i27 < 1; i27++) {
                    i29 = i21;
                    i26 += (((i27 * Test.instanceCount) + by2) - i19);
                }
            }
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("by2 d1 i25 = " + by2 + "," + Double.doubleToLongBits(d1) + "," + i25);
        FuzzerUtils.out.println("i26 s1 i27 = " + i26 + "," + s1 + "," + i27);
        FuzzerUtils.out.println("i28 i29 = " + i28 + "," + i29);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

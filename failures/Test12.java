// Generated by Java* Fuzzer test generator (1.0.001). Sun Jul  2 11:28:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=76L;
    public static volatile short sFld=-28302;
    public static boolean bFld=false;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(byte by, long l1, int i7) {

        int i8=-2222, i9=13, i10=10, i11=51445, i12=3185, iArr[]=new int[N];
        boolean b1=false;
        float f2=-111.456F;
        double d=-2.60260;

        FuzzerUtils.init(iArr, -11);

        i8 = 1;
        while (++i8 < 348) {
            if (b1) break;
            i9 = 1;
            do {
                i7 -= (int)-5L;
            } while (++i9 < 5);
            i10 = 1;
            while (++i10 < 5) {
                i11 = 1;
                do {
                    f2 += (((i11 * l1) + Test.sFld) - i11);
                    i7 = (int)Test.instanceCount;
                    Test.sFld = (short)d;
                    l1 = Test.instanceCount;
                    try {
                        i7 = (i11 / -227);
                        iArr[i10 - 1] = (i10 / -239);
                        iArr[i11] = (22782 % i12);
                    } catch (ArithmeticException a_e) {}
                    i7 -= -13;
                } while (++i11 < 1);
                i7 -= (int)-3467591941L;
                f2 = i7;
                i7 += 110;
            }
        }
        vMeth1_check_sum += by + l1 + i7 + i8 + (b1 ? 1 : 0) + i9 + i10 + i11 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d) + i12 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, float f, float f1) {

        int i5=34675, i6=-11, i13=-8655, i14=14567, iArr1[][]=new int[N][N];
        byte by1=-115;
        double d1=104.20620;

        FuzzerUtils.init(iArr1, 37414);

        for (i5 = 6; i5 < 366; i5++) {
            vMeth1(by1, l, i5);
            try {
                iArr1[i5][i5 + 1] = (i6 % 23331);
                i6 = (i5 / i6);
                i6 = (i6 / 14274);
            } catch (ArithmeticException a_e) {}
            Test.sFld >>= (short)84;
            for (i13 = 1; i13 < 5; i13++) {
                if (Test.bFld) {
                    i14 = (int)d1;
                    iArr1[i5 + 1][i13 + 1] = i5;
                    iArr1[i13 + 1][i5] &= (int)l;
                    Test.bFld = Test.bFld;
                } else if (Test.bFld) {
                    Test.instanceCount >>>= i14;
                } else {
                    d1 += Test.sFld;
                    i6 = i5;
                    f1 = i6;
                    i14 -= i5;
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i5 + i6 + by1 + i13 + i14 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(boolean b, int i) {

        int i1=-8981, i2=-9, i3=177, i4=-6, i15=0, iArr2[]=new int[N];
        float f3=-80.642F;
        long l2=4432270324689235972L;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, 53);
        FuzzerUtils.init(sArr, (short)-9235);

        for (i1 = 11; i1 < 330; i1++) {
            for (i3 = i1; 5 > i3; ++i3) {
                vMeth(35255L, f3, 0.744F);
                b = b;
            }
        }
        i4 -= (int)f3;
        iArr2[(i3 >>> 1) % N] = 1395;
        for (l2 = 9; 282 > l2; ++l2) {
            Test.instanceCount -= i2;
            i4 >>>= i2;
            i2 >>= (int)-1L;
            i15 += (int)f3;
            i4 *= i3;
            i += (int)f3;
            sArr = FuzzerUtils.short1array(N, (short)4579);
            iArr2 = iArr2;
        }
        long meth_res = (b ? 1 : 0) + i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f3) + l2 + i15 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=2, i17=-11, i18=27442, i19=44, i20=-12, i21=5, i22=144, i23=-56649, i24=183, iArr3[]=new int[N];
        float f4=0.680F;
        double d2=86.53938;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr3, 8);
        FuzzerUtils.init(lArr, 13L);

        iMeth(Test.bFld, i16);
        i17 = 1;
        while (++i17 < 239) {
            f4 -= i17;
            Test.instanceCount = Test.instanceCount;
            try {
                i16 = (36385 / i17);
                i16 = (i16 / -41633);
                i16 = (-24220 / i17);
            } catch (ArithmeticException a_e) {}
        }
        i16 <<= i16;
        for (i18 = 1; i18 < 390; ++i18) {
            i16 = i18;
            Test.instanceCount = i17;
            i16 -= (int)f4;
            i20 = 1;
            while (++i20 < 65) {
                iArr3[i20 - 1] = (int)55545L;
                switch (((i19 >>> 1) % 3) + 36) {
                case 36:
                    i19 = -147;
                    for (i21 = i18; i21 < 1; ++i21) {
                        Test.instanceCount = i18;
                    }
                    i16 += i16;
                    i16 = -51517;
                    break;
                case 37:
                    for (i23 = 1; i23 > i20; --i23) {
                        i16 -= (int)-5L;
                        d2 *= -3;
                        i16 >>= (int)Test.instanceCount;
                        i19 -= i24;
                        switch (((i20 % 2) * 5) + 81) {
                        case 88:
                            iArr3[i18] += i17;
                        case 84:
                            Test.instanceCount *= -4L;
                            i16 += i23;
                            break;
                        }
                        lArr[i23 + 1][i20 + 1] = i18;
                        i22 >>= (int)Test.instanceCount;
                        i19 <<= i17;
                    }
                    break;
                case 38:
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 f4 = " + i16 + "," + i17 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 d2 iArr3 = " + i24 + "," + Double.doubleToLongBits(d2) + "," +
            FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Sun Aug 20 07:55:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1208803703L;
    public static boolean bFld=false;
    public float fFld=124.519F;
    public int iArrFld[][]=new int[N][N];
    public float fArrFld[]=new float[N];
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-35);
        FuzzerUtils.init(Test.iArrFld1, 211);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, int i7, int i8) {

        int i9=-23635, i10=52827, i11=130, i12=-231, i13=-106, i14=-43542, i15=-160, iArr[]=new int[N];
        float f1=-7.812F;
        double d=0.97403;

        FuzzerUtils.init(iArr, -38);

        i8 += i6;
        i9 = 1;
        while (++i9 < 182) {
            iArr[i9 + 1] >>>= i6;
            iArr[i9 - 1] |= (int)Test.instanceCount;
        }
        f1 += Test.instanceCount;
        for (i10 = 220; i10 > 4; i10 -= 3) {
            i6 += (int)f1;
            Test.byArrFld[i10 - 1] = (byte)i11;
            i7 += i10;
            Test.instanceCount += (long)d;
            for (i12 = i10; i12 < 21; ++i12) {
                for (i14 = 1; i14 < 1; i14++) {
                    iArr[i10 + 1] = i7;
                    i15 >>= i6;
                    iArr[i14 - 1] = i12;
                }
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + Double.doubleToLongBits(d) + i12
            + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr);
    }

    public static boolean bMeth(int i5) {

        int i16=-2545, i17=-34, i18=-4383, i19=-90, i20=-1;
        float f2=-52.567F, f3=-2.108F;
        double d1=-65.98286;

        vMeth(i5, i5, i5);
        i16 = 1;
        while (++i16 < 301) {
            i5 += (i16 - f2);
        }
        for (i17 = 7; 167 > i17; i17++) {
            f2 -= f2;
            i5 = i5;
        }
        switch (((i18 >>> 1) % 2) + 61) {
        case 61:
            i5 += (int)Test.instanceCount;
            Test.instanceCount += (long)d1;
            i19 = 1;
            do {
                for (f3 = 1; f3 < 5; ++f3) {
                    if (Test.bFld) break;
                }
                if (Test.bFld) {
                    i20 >>= (int)Test.instanceCount;
                    return ((int)(i5 + i16 + Float.floatToIntBits(f2) + i17 + i18 + Double.doubleToLongBits(d1) + i19 +
                        Float.floatToIntBits(f3) + i20)) % 2 > 0;
                } else if (true) {
                    d1 += i16;
                } else if (false) {
                    i18 = i20;
                }
            } while (++i19 < 354);
            break;
        case 62:
        }
        long meth_res = i5 + i16 + Float.floatToIntBits(f2) + i17 + i18 + Double.doubleToLongBits(d1) + i19 +
            Float.floatToIntBits(f3) + i20;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(byte by, int i1, float f) {

        int i2=10, i3=-1, i4=-159, i21=-232, i22=-9;
        short s=-19492;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 42.757F);

        for (i2 = 3; 321 > i2; i2++) {
            i4 = 1;
            do {
                if (bMeth(-13)) break;
                i3 = (int)f;
                i3 = i3;
                for (i21 = 1; i21 < 1; i21++) {
                    i1 += (int)f;
                    if (Test.bFld) break;
                    fArr[i2] = i2;
                    i3 >>= i22;
                    Test.iArrFld1[i2] += (int)Test.instanceCount;
                    Test.instanceCount ^= i22;
                }
                s -= (short)0;
                i3 = i4;
                i1 += (-1 + (i4 * i4));
            } while (++i4 < 5);
        }
        long meth_res = by + i1 + Float.floatToIntBits(f) + i2 + i3 + i4 + i21 + i22 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i23=-12, i24=46385, i25=-13, i26=-30490, i27=-110, i28=0, i29=13, i30=7, i31=-12, i32=-33544;
        byte by1=-21;
        short s1=-26967;

        iArrFld[(i >>> 1) % N][(i >>> 1) % N] <<= (int)(i = (int)((-(Test.instanceCount * Test.instanceCount)) -
            (-(fArrFld[(i >>> 1) % N]--))));
        i += (int)((i = (int)(Test.instanceCount - i)) + i);
        iArrFld[(i >>> 1) % N][(4 >>> 1) % N] -= iMeth(by1, i, fFld);
        for (i23 = 7; i23 < 260; ++i23) {
            try {
                i = (i24 / 40225);
                i25 = (i23 % 122);
                i25 = (849428589 % i24);
            } catch (ArithmeticException a_e) {}
            iArrFld[i23 + 1][i23 - 1] = i23;
            i24 += -49272;
            i24 += s1;
            Test.instanceCount += (((i23 * i24) + i24) - fFld);
            for (i26 = 3; 99 > i26; i26++) {
                double d2=-1.110244;
                d2 *= Test.instanceCount;
                iArrFld[i23][i26] = s1;
                i24 = (int)Test.instanceCount;
                i25 *= (int)Test.instanceCount;
                Test.instanceCount -= i26;
            }
        }
        for (i28 = 7; i28 < 377; ++i28) {
            i = (int)6313405633761545105L;
            i30 = 1;
            while (++i30 < 68) {
                for (i31 = 1; i31 > i30; i31 -= 2) {
                    Test.bFld = Test.bFld;
                    iArrFld[i30 - 1][i30 + 1] -= (int)Test.instanceCount;
                    i = (int)Test.instanceCount;
                    i24 -= i24;
                    if (Test.bFld) break;
                    iArrFld[i31][i30 - 1] >>= (int)Test.instanceCount;
                    i24 += i31;
                    Test.instanceCount -= i31;
                    i -= (int)fFld;
                    fFld *= i26;
                }
            }
            if (Test.bFld) break;
        }

        FuzzerUtils.out.println("i by1 i23 = " + i + "," + by1 + "," + i23);
        FuzzerUtils.out.println("i24 i25 s1 = " + i24 + "," + i25 + "," + s1);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 = " + i32);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld fFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("iArrFld fArrFld Test.byArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Tue Sep 12 07:53:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2262151686L;
    public float fFld=0.185F;
    public static float fFld1=0.39F;
    public static int iFld=3797;
    public static volatile boolean bFld=false;
    public int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static double dArrFld[][]=new double[N][N];
    public static boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-72);
        FuzzerUtils.init(Test.dArrFld, -58.3717);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth(long l2, int i9) {

        boolean b=true;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 44023);

        b = ((Math.abs(Test.fFld1) * (Test.instanceCount++)) != iArr1[(i9 >>> 1) % N]);
        long meth_res = l2 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, long l1, int i8) {


        Test.fFld1 = ((l1 + iMeth(l1, i8)) - ((Test.fFld1 * -38) - (i8 - i8)));
        vMeth1_check_sum += l + l1 + i8;
    }

    public static int iMeth2(int i11, int i12) {

        int i13=-7, i14=14, i15=17, i16=-13, i17=14, i18=-80, i19=185, i20=13;
        float f=0.180F;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1L);

        for (i13 = 9; i13 < 167; ++i13) {
            Test.instanceCount += (long)(0.1012F + (i13 * i13));
            try {
                i11 = (i11 % i12);
                i12 = (i11 % i14);
                i11 = (i14 % -778340453);
            } catch (ArithmeticException a_e) {}
        }
        i15 = 1;
        do {
            vMeth1(Test.instanceCount, Test.instanceCount, -218);
            for (f = i15; f < 5; ++f) {
                if (b1) continue;
                i14 += (int)Test.instanceCount;
            }
            for (i17 = 5; i17 > 1; i17--) {
                double d1=2.86888;
                b1 = b1;
                i16 = i13;
                switch ((i17 % 9) + 121) {
                case 121:
                    i16 += (int)d1;
                    for (i19 = 1; i19 < 2; ++i19) {
                        switch (((i19 % 1) * 5) + 92) {
                        case 95:
                            if (i18 != 0) {
                            }
                            i16 = i18;
                            break;
                        }
                        i12 += (i19 + i12);
                    }
                    break;
                case 122:
                    i14 += (((i17 * Test.instanceCount) + Test.instanceCount) - i16);
                    i16 = (int)Test.instanceCount;
                    break;
                case 123:
                    lArr = lArr;
                    break;
                case 124:
                case 125:
                    i11 += (i17 - Test.instanceCount);
                    break;
                case 126:
                    if (b1) continue;
                    break;
                case 127:
                    Test.fFld1 += (i17 * i17);
                    break;
                case 128:
                    i20 >>>= i12;
                    break;
                case 129:
                    b1 = b1;
                    break;
                default:
                    Test.iFld *= i20;
                }
            }
        } while (++i15 < 316);
        long meth_res = i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f) + i16 + (b1 ? 1 : 0) + i17 + i18 + i19 +
            i20 + FuzzerUtils.checkSum(lArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        int i10=21814, i21=179, i22=-6, i23=-58012, i24=30125, i25=-165, i26=-63419, iArr2[]=new int[N];
        byte by=23;
        double d2=1.116184;
        boolean b2=true;
        short s=-5231;
        float fArr[]=new float[N];
        long lArr1[]=new long[N], lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 47.509F);
        FuzzerUtils.init(lArr1, 88L);
        FuzzerUtils.init(iArr2, 137);
        FuzzerUtils.init(lArr2, 177L);

        i10 = Test.byArrFld[(i10 >>> 1) % N];
        iMeth2(i10, i10);
        for (i21 = 12; i21 < 312; ++i21) {
            for (i23 = 1; 6 > i23; i23++) {
                i22 = (int)Test.instanceCount;
                for (i25 = 1; 2 > i25; i25++) {
                    Test.instanceCount = by;
                    d2 = i23;
                    fArr = FuzzerUtils.float1array(N, (float)117.1010F);
                    lArr1 = lArr1;
                    switch (i23 + 80) {
                    case 80:
                        i24 += i24;
                        try {
                            iArr2[i21] = (i24 / 28810);
                            i26 = (-229 % i25);
                            i24 = (28 / i23);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += i25;
                        break;
                    case 81:
                        b2 = b2;
                        break;
                    case 82:
                        Test.iFld += i25;
                        lArr1[i23] >>= i22;
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 83:
                        Test.instanceCount += (i25 * i25);
                        if (i23 != 0) {
                        }
                        break;
                    case 84:
                        b2 = false;
                        break;
                    case 85:
                        i22 = s;
                        break;
                    case 86:
                        i24 = 130;
                        break;
                    case 87:
                        Test.dArrFld[i25 - 1] = Test.dArrFld[i21 - 1];
                    case 88:
                        Test.fFld1 = i25;
                        break;
                    case 89:
                        lArr2[i21] = s;
                        break;
                    case 90:
                        i24 = i25;
                    case 91:
                        i22 += (int)d2;
                        break;
                    case 92:
                        lArr1[i23 - 1] >>= 54521;
                    case 93:
                        Test.fFld1 -= i21;
                        break;
                    case 94:
                        i24 += (i25 - i10);
                        break;
                    case 95:
                        Test.fFld1 -= Test.instanceCount;
                        break;
                    case 96:
                        i10 = i26;
                        break;
                    case 97:
                    case 98:
                    case 99:
                        d2 = i25;
                        break;
                    case 100:
                        Test.bArrFld[i25] = Test.bArrFld[i23];
                        break;
                    case 101:
                        i10 <<= i22;
                        break;
                    case 102:
                        Test.instanceCount = Test.instanceCount;
                    case 103:
                    case 104:
                        lArr2[i23 - 1] += (long)d2;
                        break;
                    case 105:
                        iArr2 = iArr2;
                        break;
                    case 106:
                        by += (byte)(((i25 * i25) + Test.instanceCount) - i25);
                    case 107:
                        i22 = -12;
                        break;
                    case 108:
                        Test.iFld += (i25 * i21);
                        break;
                    case 109:
                        s = (short)Test.instanceCount;
                        break;
                    case 110:
                        Test.instanceCount /= 51178;
                        break;
                    case 111:
                        Test.instanceCount += i25;
                    case 112:
                        d2 = i25;
                        break;
                    case 113:
                    case 114:
                        Test.instanceCount *= 89;
                        break;
                    case 115:
                        i22 = (int)Test.instanceCount;
                        break;
                    case 116:
                    case 117:
                        iArr2[i25 - 1] *= i21;
                        break;
                    case 118:
                        b2 = b2;
                        break;
                    case 119:
                        lArr2 = FuzzerUtils.long1array(N, (long)71L);
                        break;
                    case 120:
                        Test.fFld1 *= -2.575F;
                    case 121:
                        i22 *= 52983;
                        break;
                    case 122:
                        try {
                            i24 = (i26 / i10);
                            Test.iFld = (i23 % i23);
                            i10 = (i23 % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 123:
                        d2 = 14061;
                        break;
                    case 124:
                    case 125:
                        try {
                            Test.iFld = (45048 / i24);
                            i26 = (i10 / i10);
                            i22 = (37152 / iArr2[i25 + 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 126:
                        Test.dArrFld[i21 - 1][(Test.iFld >>> 1) % N] -= d2;
                        break;
                    case 127:
                        iArr2[i23] = (int)d2;
                        break;
                    case 128:
                        iArr2[i23 - 1] += (int)Test.fFld1;
                        break;
                    case 129:
                        fArr[i21] *= i21;
                        break;
                    case 130:
                        d2 += by;
                        break;
                    case 131:
                        Test.iFld = i26;
                        break;
                    case 132:
                        if (i21 != 0) {
                        }
                    case 133:
                        i22 += (int)Test.instanceCount;
                        break;
                    case 134:
                        Test.instanceCount += (i25 * by);
                        break;
                    case 135:
                        b2 = b2;
                        break;
                    case 136:
                        d2 += 2.862F;
                        break;
                    case 137:
                        Test.instanceCount += (i25 * i25);
                        break;
                    case 138:
                        Test.instanceCount += i21;
                        break;
                    case 139:
                        if (i10 != 0) {
                        }
                        break;
                    case 140:
                        Test.instanceCount = i22;
                        break;
                    case 141:
                        Test.fFld1 = i24;
                        break;
                    case 142:
                        if (b2) continue;
                        break;
                    case 143:
                        Test.fFld1 -= i26;
                    case 144:
                        s += (short)i25;
                    case 145:
                        if (b2) break;
                        break;
                    case 146:
                    case 147:
                        i22 -= i22;
                        break;
                    case 148:
                        i22 += i25;
                    case 149:
                        Test.instanceCount -= (long)Test.fFld1;
                        break;
                    default:
                        Test.instanceCount -= Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = i10 + i21 + i22 + i23 + i24 + i25 + i26 + by + Double.doubleToLongBits(d2) + (b2 ? 1 : 0) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=0, i2=7, i3=13759, i4=14, i5=88, i6=24578, i7=1, i27=-206, i28=-13, i29=26342, i30=12, i31=114,
            i32=22696, i33=-50062, iArr[]=new int[N];
        double d3=-1.127452;

        FuzzerUtils.init(iArr, -28563);

        Test.instanceCount >>>= (++iArr[(i1 >>> 1) % N]);
        for (i2 = 329; i2 > 20; i2--) {
            try {
                i1 = (36246326 % i3);
                iArr[i2 - 1] = (iArr[i2] % i3);
                i3 = (-56 / iArr[i2]);
            } catch (ArithmeticException a_e) {}
            for (i4 = 1; 5 > i4; i4++) {
                i5 += i4;
                i3 += (-49 + (i4 * i4));
            }
        }
        for (i6 = 9; i6 < 240; i6++) {
            vMeth1(Test.instanceCount, (i1 = (-197 + iMeth1())) - i7, 47);
        }
        i27 = 1;
        while (++i27 < 160) {
            for (i28 = 1; i28 < 10; i28 += 2) {
                i3 *= (int)d3;
                iArr = iArr;
                for (i30 = i27; i30 < 3; ++i30) {
                    try {
                        i29 = (i4 / 2469);
                        iArr[i27] = (121 / i6);
                        iArr[i27] = (i30 / i28);
                    } catch (ArithmeticException a_e) {}
                }
                Test.bFld = Test.bFld;
                d3 = Test.instanceCount;
            }
            d3 = Test.instanceCount;
            for (i32 = 1; i32 < 10; i32++) {
                i33 = (int)2.793F;
                Test.fFld1 = i7;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + i27 + i28 + i29 + Double.doubleToLongBits(d3) + i30 + i31
            + i32 + i33 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d=-126.9341;
        int i=-5, i34=-41425, i35=12, i36=-7, i37=7, i38=-92, i39=110, i40=-25071, i41=-59122, i42=10, i43=-14588,
            i44=-185;
        short s1=17797;
        byte by1=-21;
        float f1=104.540F;
        long lArr3[][]=new long[N][N];

        FuzzerUtils.init(lArr3, -1196999416880349330L);

        fFld += (float)(d % (Math.min(i + i, i += i) | 1));
        fFld %= (iArrFld[(i >>> 1) % N] | 1);
        i += (int)Test.instanceCount;
        vMeth();
        lArr3[(Test.iFld >>> 1) % N][(i34 >>> 1) % N] = -3;
        for (i35 = 17; i35 < 368; ++i35) {
            iArrFld[i35 + 1] = Test.iFld;
            s1 = (short)31888;
            for (i37 = 2; 72 > i37; i37++) {
                for (i39 = 1; 2 > i39; i39 += 3) {
                    Test.bFld = true;
                    i40 += (-36266 + (i39 * i39));
                    if (Test.bFld) break;
                    d = Test.instanceCount;
                    i *= by1;
                    i38 = by1;
                }
                i36 *= Test.iFld;
                fFld = s1;
                Test.instanceCount >>= Test.instanceCount;
                for (i41 = 2; 1 < i41; i41--) {
                    try {
                        i34 = (22 % i39);
                        iArrFld[i35 - 1] = (-2700 / i40);
                        i = (-1506349706 % i34);
                    } catch (ArithmeticException a_e) {}
                }
                i38 -= -52398;
                for (i43 = 2; i43 > i35; --i43) {
                    Test.instanceCount ^= -53;
                    i36 = i37;
                    i42 = i42;
                    Test.instanceCount *= i34;
                    Test.iFld = (int)d;
                    Test.instanceCount -= i35;
                    d -= i41;
                    Test.dArrFld[i43][i37 - 1] = d;
                    iArrFld[i37] *= i35;
                }
                switch (((i35 % 3) * 5) + 121) {
                case 136:
                    i40 = i35;
                    Test.iFld = i39;
                    Test.instanceCount = i34;
                    break;
                case 132:
                    Test.iFld = (int)Test.instanceCount;
                    f1 = 3L;
                    i36 -= 63138;
                    lArr3[i35 - 1] = lArr3[i37];
                    break;
                case 127:
                    i44 <<= i43;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("d i i34 = " + Double.doubleToLongBits(d) + "," + i + "," + i34);
        FuzzerUtils.out.println("i35 i36 s1 = " + i35 + "," + i36 + "," + s1);
        FuzzerUtils.out.println("i37 i38 i39 = " + i37 + "," + i38 + "," + i39);
        FuzzerUtils.out.println("i40 by1 i41 = " + i40 + "," + by1 + "," + i41);
        FuzzerUtils.out.println("i42 i43 i44 = " + i42 + "," + i43 + "," + i44);
        FuzzerUtils.out.println("f1 lArr3 = " + Float.floatToIntBits(f1) + "," + FuzzerUtils.checkSum(lArr3));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.fFld1 = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("Test.iFld Test.bFld iArrFld = " + Test.iFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.byArrFld Test.dArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest iMeth2 iMeth1
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest iMeth2 iMeth1
//DEBUG  iMeth1 ->  iMeth1 vMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 vMeth mainTest
//DEBUG  Depth = 5
//DEBUG  Classes = 1
//DEBUG  static objects = {}

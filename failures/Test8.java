// Generated by Java* Fuzzer test generator (1.0.001). Wed Jun 28 23:12:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static byte byFld=-67;
    public static int iFld=102;
    public static long lFld=2583729211L;
    public static byte byArrFld[]=new byte[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-42);
        FuzzerUtils.init(Test.lArrFld, 9591L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9, long l) {

        int i10=-152, i11=10, i12=-11, i13=12, i14=67, i15=-38167, iArr[]=new int[N];
        double d1=-127.27811, dArr[]=new double[N];
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 5393778250642523996L);
        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(dArr, 34.99192);

        for (i10 = 323; i10 > 5; i10 -= 2) {
            Test.byArrFld[i10 - 1] = (byte)135;
            i11 = i9;
            for (i12 = 10; i12 > 1; i12--) {
                float f2=-70.704F;
                i9 *= (int)f2;
                if (b) {
                    Test.instanceCount -= i13;
                    if (false) {
                        for (i14 = 1; 2 > i14; ++i14) {
                            iArr[i14] *= i12;
                            d1 = Test.instanceCount;
                            i11 += (int)(97L + (i14 * i14));
                            i13 = i10;
                            i13 = i15;
                            i9 = i12;
                        }
                    } else if (true) {
                        Test.instanceCount += (i12 + i10);
                    } else {
                        i13 &= i13;
                    }
                } else if (b) {
                    i15 += i14;
                } else {
                    dArr[i10] += d1;
                }
            }
        }
        long meth_res = i9 + l + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5) {

        int i6=48210, i7=2, i8=127, i16=97, i17=-14, iArr1[]=new int[N];
        float f3=-2.838F, fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr1, 44173);
        FuzzerUtils.init(fArr, 99.422F);

        i6 = 1;
        do {
            for (i7 = 5; 1 < i7; i7 -= 2) {
                i8 = (int)(((i8 * Test.byFld) * Test.instanceCount) - ((i8--) % (iMeth1(43209, 8823890047938563365L) |
                    1)));
                i5 &= Test.iFld;
                Test.iFld = -40323;
                try {
                    i5 = (1563219020 % Test.iFld);
                    Test.iFld = (i6 / i8);
                    i5 = (-1952941683 % i8);
                } catch (ArithmeticException a_e) {}
                iArr1[i6] |= i6;
                if (true) continue;
                for (i16 = 1; 3 > i16; i16++) {
                    fArr[i16][i16] = Test.iFld;
                }
                iArr1[i7] += 18415;
            }
            f3 -= i7;
            i17 = (int)Test.instanceCount;
            Test.instanceCount = -3267304897L;
            Test.instanceCount *= i17;
        } while (++i6 < 313);
        vMeth_check_sum += i5 + i6 + i7 + i8 + i16 + i17 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {

        int i3=-12, i4=111, i18=-163, i19=10220, i20=14, i21=-120, i22=-37283, iArr2[]=new int[N];
        double d=1.33305;
        float f1=-2.385F;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4116479830L);
        FuzzerUtils.init(iArr2, -9);

        for (i3 = 2; i3 < 153; i3++) {
            lArr[i3 - 1] *= i3;
            if (true) {
                d %= ((i4--) | 1);
                Test.instanceCount += (long)((Math.max(Test.instanceCount, Test.instanceCount) + f1) *
                    (Math.max(Test.instanceCount, Test.instanceCount) - (-(i3 + Test.byFld))));
            } else if (b1) {
                vMeth(43398);
                switch (((i3 % 8) * 5) + 100) {
                case 131:
                    iArr2[i3] = (int)-1L;
                    break;
                case 140:
                    for (i18 = 1; i18 < 10; i18++) {
                        i4 <<= -190;
                        Test.iFld += -2997;
                    }
                    for (i20 = 1; 10 > i20; ++i20) {
                        i19 = i4;
                        i21 += (((i20 * i22) + i21) - Test.instanceCount);
                        Test.instanceCount = i3;
                    }
                    break;
                case 123:
                    i22 += (((i3 * i21) + i4) - Test.iFld);
                    break;
                case 125:
                    Test.byFld >>= (byte)i20;
                    break;
                case 114:
                    i19 -= i21;
                    break;
                case 108:
                case 136:
                    i21 = i18;
                case 107:
                    i4 = -61115;
                    break;
                default:
                    b1 = false;
                }
            } else {
                i4 = (int)d;
            }
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i18 + i19 + i20 + i21 + i22 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=63, i2=-64955, i23=-17, i24=136, i25=-4, iArr3[]=new int[N];
        float f=45.838F, f4=-2.998F;
        double d2=-1.99224, dArr1[][]=new double[N][N];
        boolean b2=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr3, 207);
        FuzzerUtils.init(dArr1, 2.67186);
        FuzzerUtils.init(bArr, false);

        for (i = 9; i < 288; ++i) {
            i2 = 1;
            do {
                i1 -= (int)((Short.reverseBytes((short)(-28777)) - (Test.instanceCount * f)) - (Test.instanceCount--));
                i1 += (int)(Long.reverseBytes(-(i1 - i2)) * (-(i1 + i2)));
                switch ((i2 % 2) + 3) {
                case 3:
                    i1 += (i2 - i);
                    f -= iMeth();
                    if (false) {
                        try {
                            i1 = (i1 % Test.iFld);
                            iArr3[i2 + 1] = (151 / i2);
                            i1 = (-62273 % i2);
                        } catch (ArithmeticException a_e) {}
                        i1 *= (int)d2;
                    } else {
                        for (f4 = 1; f4 < 1; ++f4) {
                            i1 += (int)(f4 * Test.instanceCount);
                            Test.instanceCount += (long)f4;
                            i23 = i1;
                        }
                        d2 += f4;
                        for (i24 = 1; i2 < i24; --i24) {
                            i1 %= (int)(i2 | 1);
                            dArr1[i24 + 1][i - 1] += i25;
                            Test.iFld = Test.byFld;
                            b2 = b2;
                            switch ((((i23 >>> 1) % 8) * 5) + 20) {
                            case 40:
                                bArr[i] = false;
                                Test.instanceCount += (((i24 * Test.iFld) + i24) - i23);
                                Test.instanceCount <<= 23798;
                                b2 = b2;
                                break;
                            case 56:
                                i1 -= (int)Test.instanceCount;
                                Test.lArrFld[i2] >>= i23;
                                i1 -= i24;
                                break;
                            case 51:
                                Test.lFld += (i24 * i23);
                                Test.lFld |= Test.instanceCount;
                            case 34:
                                Test.iFld += 6;
                                break;
                            case 32:
                                f = Test.lFld;
                            case 50:
                            case 35:
                                Test.iFld = Test.byFld;
                                break;
                            case 23:
                                i1 <<= i24;
                                break;
                            default:
                                i1 &= i;
                            }
                        }
                    }
                    break;
                case 4:
                    Test.iFld = (int)f;
                default:
                    i1 -= i2;
                }
            } while (++i2 < 90);
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f d2 f4 = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d2) + "," +
            Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("b2 iArr3 dArr1 = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr3) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.lFld Test.byArrFld Test.lArrFld = " + Test.lFld + "," +
            FuzzerUtils.checkSum(Test.byArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

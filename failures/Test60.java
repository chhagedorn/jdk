// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 21 03:16:19 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=0L;
    public static float fFld=6.385F;
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, int i6) {

        short s1=-9101;
        double d=4.19227;
        int i7=31156, i8=-44493, iArr1[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 55164);
        FuzzerUtils.init(lArr, -181L);

        iArr1[(i6 >>> 1) % N][(13413 >>> 1) % N] -= i6;
        s1 -= (short)d;
        for (i7 = 6; i7 < 230; ++i7) {
            i5 -= i8;
            i6 = s1;
            lArr[i7] += (long)Test.fFld;
        }
        vMeth2_check_sum += i5 + i6 + s1 + Double.doubleToLongBits(d) + i7 + i8 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l1, byte by) {

        int i4=14, i9=55, i10=-6, i11=-9, iArr[]=new int[N];
        short s=-28840;
        boolean b=true, bArr[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr1, 2223983802L);

        iArr[(i4 >>> 1) % N] -= s;
        vMeth2(i4, i4);
        s = (short)i4;
        iArr[(i4 >>> 1) % N] = (int)Test.fFld;
        for (i9 = 6; i9 < 370; ++i9) {
            try {
                i4 = (i10 % -16);
                i4 = (i9 / i10);
                i4 = (i10 % i9);
            } catch (ArithmeticException a_e) {}
            bArr[i9] = b;
            i10 = i11;
            i4 *= (int)l1;
            Test.instanceCount += (i9 | i10);
            lArr1[i9 - 1] += i9;
            i11 += i9;
            i4 -= 55283;
        }
        i4 *= 72;
        i11 *= 42935;
        vMeth1_check_sum += l1 + by + i4 + s + i9 + i10 + (b ? 1 : 0) + i11 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(float f) {

        byte by1=80;
        int i12=9590, i13=163, i14=0, i15=-129, i16=13;
        double d1=76.10051;
        long l2=45L;
        short s2=21394;

        vMeth1(Test.instanceCount, by1);
        for (i12 = 5; i12 < 131; ++i12) {
            i13 = i12;
            i14 = 1;
            while (++i14 < 12) {
                i13 = (int)-8994950064326120223L;
                f = (float)d1;
                i13 += (((i14 * i12) + i12) - i12);
                Test.instanceCount += (i14 * i14);
                if (false) break;
                l2 += i14;
                i13 += i13;
                i13 ^= s2;
            }
            for (i15 = 1; i15 < 12; ++i15) {
                i16 += i15;
            }
            l2 += (i12 * i12);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + by1 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + l2 + s2 +
            i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        int i=-41, i1=-7, i2=-49808, i3=-239, i17=113, i18=-14, i19=-7, i20=-206, iArr2[]=new int[N];
        long l=5084979434673259017L, lArr2[]=new long[N];
        byte by2=-26, byArr[]=new byte[N];
        boolean b1=false;
        short s3=-6606;

        FuzzerUtils.init(lArr2, -8L);
        FuzzerUtils.init(byArr, (byte)-73);
        FuzzerUtils.init(iArr2, 4890);

        i = 1;
        do {
            for (l = i; l < 191; ++l) {
                for (i2 = 1; i2 > 1; i2--) {
                    Test.instanceCount += i2;
                    vMeth(Test.fFld);
                    lArr2 = lArr2;
                    i3 = i1;
                    i1 |= (int)Test.instanceCount;
                    i1 *= (int)Test.instanceCount;
                    i1 += (((i2 * by2) + i1) - i1);
                    i1 >>= -53121;
                }
                i1 -= i3;
                i1 += (int)(l * l);
                i1 += by2;
            }
            i17 = 1;
            do {
                i1 += (i17 ^ l);
                byArr[i17 - 1] += (byte)i2;
                i3 += i17;
                for (i18 = 1; i18 > i; i18 -= 2) {
                    if (b1) break;
                    i3 *= -2;
                    i19 = i;
                    iArr2[i - 1] = 6;
                    iArr2[i18 - 1] += i18;
                    i20 = s3;
                    i20 = i2;
                }
            } while (++i17 < 191);
            fArrFld[i - 1] = i3;
            i3 = (int)l;
            Test.fFld %= (Test.instanceCount | 1);
            Test.fFld -= i20;
        } while (++i < 131);

        FuzzerUtils.out.println("i l i1 = " + i + "," + l + "," + i1);
        FuzzerUtils.out.println("i2 i3 by2 = " + i2 + "," + i3 + "," + by2);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("b1 i20 s3 = " + (b1 ? 1 : 0) + "," + i20 + "," + s3);
        FuzzerUtils.out.println("lArr2 byArr iArr2 = " + FuzzerUtils.checkSum(lArr2) + "," +
            FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld fArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

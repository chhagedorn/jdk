// Generated by Java* Fuzzer test generator (1.0.001). Sun Aug 20 10:24:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-56005L;
    public static boolean bFld=true;
    public short sFld=-8134;

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i5) {

        double d1=-85.124097;
        int i6=-2, i7=-20993, i8=75, i9=-5412, i10=-13, i11=-119, iArr1[]=new int[N];
        float f1=-22.694F;
        byte by=-68;

        FuzzerUtils.init(iArr1, -6);

        d1 = Test.instanceCount;
        for (i6 = 3; i6 < 150; ++i6) {
            for (i8 = 1; i8 < 11; i8++) {
                iArr1[i8 + 1] >>>= i6;
                try {
                    i7 = (i7 % -51);
                    i9 = (-4749 % i7);
                    i5 = (i7 / -1423387229);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = Test.instanceCount;
            }
            i7 &= (int)Test.instanceCount;
            f1 = Test.instanceCount;
            switch ((((i5 >>> 1) % 9) * 5) + 12) {
            case 49:
            case 31:
                Test.instanceCount = -20769;
                break;
            case 16:
                for (i10 = i6; i10 < 11; ++i10) {
                    iArr1[i10 + 1] /= (int)(i7 | 1);
                }
                break;
            case 46:
                i9 += by;
                f1 /= (i5 | 1);
                i11 += i5;
            case 42:
                Test.instanceCount += (((i6 * i10) + i7) - f1);
                break;
            case 34:
            case 37:
                i9 = i8;
                break;
            case 27:
                Test.instanceCount >>>= i10;
            case 24:
                i11 += (((i6 * i11) + i6) - f1);
                break;
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 +
            by + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth() {

        int i3=62465, i4=174, i12=-14540, i13=5, i14=214, i15=-8, iArr[]=new int[N];
        double d2=-1.10831, dArr[]=new double[N];
        boolean b=true;
        short sArr[]=new short[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 84);
        FuzzerUtils.init(sArr, (short)-14422);
        FuzzerUtils.init(dArr, 2.33494);
        FuzzerUtils.init(byArr, (byte)-58);

        for (i3 = 375; i3 > 23; --i3) {
            float f=-2.1022F;
            iArr[i3] >>>= (int)(Test.instanceCount--);
            iArr[(i3 >>> 1) % N] -= (iArr[i3]--);
            sArr[i3 - 1] = (short)(((--i4) * (++dArr[i3])) - (f = byMeth(14673)));
            switch ((i3 % 6) + 2) {
            case 2:
                Test.instanceCount = i3;
                f = f;
                i4 |= -1;
                iArr[i3 + 1] += 5;
                break;
            case 3:
                try {
                    i4 = (-65385 / i4);
                    i4 = (-156 / iArr[i3 - 1]);
                    i4 = (i4 / -24934);
                } catch (ArithmeticException a_e) {}
                for (d2 = 1; d2 < 5; ++d2) {
                    iArr[i3] = i12;
                    for (i13 = 1; i13 < 2; i13++) {
                        i15 += i14;
                    }
                    iArr[(int)(d2)] = (int)Test.instanceCount;
                }
                break;
            case 4:
                byArr[i3] += (byte)f;
                break;
            case 5:
                iArr[i3 - 1] -= i4;
                break;
            case 6:
                iArr[i3] = i12;
            case 7:
                i12 += (((i3 * i15) + f) - i3);
                break;
            default:
                if (b) break;
            }
        }
        vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d2) + i12 + i13 + i14 + i15 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static long lMeth(int i1, int i2, long l) {

        int i16=-57, i17=-44367, i18=-63817, i19=-103, i20=149, iArr2[]=new int[N];
        long l1=-217L, lArr[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, -15L);
        FuzzerUtils.init(iArr2, -40108);
        FuzzerUtils.init(dArr1, 0.84816);

        vMeth();
        i1 <<= i2;
        lArr[(i1 >>> 1) % N] <<= i2;
        l = (long)-71.195F;
        for (i16 = 10; i16 < 190; i16++) {
            i18 = 1;
            do {
                for (l1 = 1; l1 < 3; l1++) {
                    try {
                        i1 = (iArr2[i18 - 1] / i16);
                        i2 = (56536 / iArr2[(int)(l1 + 1)]);
                        iArr2[i16 - 1] = (i20 / 123);
                    } catch (ArithmeticException a_e) {}
                    i1 |= i20;
                    i20 = i2;
                    i20 |= (int)l1;
                    dArr1[i16 + 1] = i18;
                    if (Test.bFld) {
                        lArr[i16 - 1] *= (long)55.731F;
                    }
                    Test.bFld = false;
                }
            } while ((i18 += 3) < 9);
        }
        long meth_res = i1 + i2 + l + i16 + i17 + i18 + l1 + i19 + i20 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=0.35943;
        int i=-7649, i21=-145, i22=34, i23=14, i24=-48796, i25=2, i26=-13, i27=5, iArr3[][]=new int[N][N];
        float f2=2.230F;
        byte by1=-11, byArr1[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr1, (byte)12);
        FuzzerUtils.init(iArr3, 65);
        FuzzerUtils.init(lArr1, 3301671921L);

        d += (-((i + Test.instanceCount) * lMeth(i, i, Test.instanceCount)));
        for (i21 = 19; i21 < 382; i21++) {
            i22 += (int)(-2.188F + (i21 * i21));
            for (i23 = 3; 69 > i23; i23++) {
                i = i21;
                i24 -= i22;
                f2 -= 237;
                i25 = 1;
                while (++i25 < 2) {
                    byArr1[i23 + 1] <<= (byte)i23;
                    f2 += (i25 - i);
                    i22 += (((i25 * sFld) + Test.instanceCount) - i23);
                    Test.instanceCount = i23;
                    i = (int)Test.instanceCount;
                    i = -115;
                    Test.instanceCount += (-101 + (i25 * i25));
                    f2 += (float)d;
                    i *= i24;
                }
                iArr3[i21 + 1][i23 - 1] = i22;
                Test.instanceCount = -42506L;
                by1 = (byte)i23;
                for (i26 = 2; i26 > i23; i26 -= 3) {
                    if (Test.bFld) break;
                    iArr3[i26 - 1][i21] = (int)f2;
                    i22 += (int)-1.45212;
                    Test.instanceCount += i25;
                    lArr1[i21 + 1] = i23;
                    f2 += sFld;
                    Test.instanceCount += (i26 ^ Test.instanceCount);
                }
                d += f2;
                try {
                    i27 = (-90 % i24);
                    i22 = (19376 % iArr3[i21][i23 - 1]);
                    iArr3[i21 - 1][i21] = (i23 / iArr3[i21][i23]);
                } catch (ArithmeticException a_e) {}
            }
        }

        FuzzerUtils.out.println("d i i21 = " + Double.doubleToLongBits(d) + "," + i + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("f2 i25 by1 = " + Float.floatToIntBits(f2) + "," + i25 + "," + by1);
        FuzzerUtils.out.println("i26 i27 byArr1 = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(byArr1));
        FuzzerUtils.out.println("iArr3 lArr1 = " + FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld sFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + sFld);

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

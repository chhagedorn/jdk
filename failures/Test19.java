// Generated by Java* Fuzzer test generator (1.0.001). Sun Jul  9 04:38:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static float fFld=72.94F;
    public byte byFld=-75;
    public static double dFld=13.32566;
    public float fFld1=21.49F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10, boolean b1) {

        int i11=-43855, i12=5, i13=-176, i14=154, i15=-10, i16=59758, iArr1[]=new int[N];
        double d1=0.102220;
        byte by=-50, byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)118);
        FuzzerUtils.init(iArr1, 28017);
        FuzzerUtils.init(lArr, -3954769942L);

        for (i11 = 7; i11 < 186; ++i11) {
            b1 = b1;
            if (b1) {
                Test.fFld += i11;
                for (i13 = i11; 9 > i13; ++i13) {
                    byArr[i13 - 1] >>= (byte)i13;
                    iArr1[i13 + 1] = (int)d1;
                    iArr1[i11] += i10;
                    if (b1) break;
                }
                i10 -= (int)Test.instanceCount;
                vMeth1_check_sum += i10 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + i15 +
                    i16 + by + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
                return;
            }
            for (i15 = 9; i15 > 1; i15--) {
                by += (byte)Test.fFld;
                d1 = i14;
                lArr[(i11 >>> 1) % N] >>>= i11;
                Test.instanceCount -= (long)Test.fFld;
            }
        }
        vMeth1_check_sum += i10 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + i15 + i16 + by +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l, double d) {

        int i8=12058, i9=-6524, iArr[]=new int[N];
        boolean b2=true;

        FuzzerUtils.init(iArr, 73);

        Test.fFld += (((-(i8 = 233)) >> iArr[(i8 >>> 1) % N]) * ((-43201 - (1.50F + (Test.instanceCount * i9))) + l));
        vMeth1(i9, b2);
        long meth_res = l + Double.doubleToLongBits(d) + i8 + i9 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b, float f) {

        int i4=212, i5=-24357, i6=-1, i7=-203, iArr2[]=new int[N];
        double d2=-2.13014;
        byte by1=-117;
        short s=-18735;

        FuzzerUtils.init(iArr2, 7769);

        i4 = 1;
        do {
            i5 >>>= i5;
            i6 = 7;
            do {
                i7 = 1;
                while (++i7 < 1) {
                    Test.instanceCount += i7;
                    i5 = (int)((Test.instanceCount = iMeth(-18036L, d2)) - i5);
                    if (b) break;
                    iArr2[i6 - 1] = (int)41343L;
                }
                i5 = (int)Test.instanceCount;
                i5 = -13;
                switch ((i6 % 10) + 120) {
                case 120:
                    Test.instanceCount = 0;
                    by1 <<= (byte)i7;
                    if (b) continue;
                    break;
                case 121:
                    try {
                        i5 = (9 % i5);
                        iArr2[i4 - 1] = (iArr2[i4] % 215);
                        iArr2[i6] = (i6 % 32042);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 122:
                case 123:
                case 124:
                    d2 -= -8;
                    break;
                case 125:
                    i5 += (int)f;
                    break;
                case 126:
                    i5 *= i4;
                    break;
                case 127:
                    s = (short)i7;
                    break;
                case 128:
                    iArr2[i4 - 1] <<= i7;
                    break;
                case 129:
                    i5 -= i6;
                default:
                    i5 = (int)4126225663606990465L;
                }
            } while (--i6 > 0);
        } while (++i4 < 232);
        vMeth_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d2) +
            by1 + s + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=6, i2=-140, i3=54792, i17=77, i18=13959, i19=21, i20=-9;
        boolean b3=false, bArr[]=new boolean[N];
        long l1=-8787L;
        short s1=-26472;

        FuzzerUtils.init(bArr, true);

        i = 1;
        do {
            Test.instanceCount += i;
            i1 = 1;
            while (++i1 < 374) {
                for (i2 = 1; i2 > 1; i2 -= 2) {
                    vMeth(b3, Test.fFld);
                    i3 = byFld;
                    switch (((6148 >>> 1) % 2) + 26) {
                    case 26:
                        Test.iArrFld[i2] = i;
                        break;
                    case 27:
                        i3 = (int)51.85686;
                        Test.fFld += -62008;
                        i3 = i2;
                        l1 = i2;
                    default:
                        s1 += (short)Test.dFld;
                    }
                    b3 = b3;
                    i3 += (int)fFld1;
                }
            }
            byFld |= (byte)i2;
            Test.fFld += i;
            for (i17 = 14; i17 < 374; i17++) {
                bArr = bArr;
                Test.fFld += i17;
                i18 = (int)l1;
                Test.iArrFld[i - 1] += (int)l1;
                for (i19 = 2; i19 > i; i19 -= 3) {
                    i20 = (int)Test.dFld;
                    if (b3) {
                        i20 -= -12;
                        Test.iArrFld[i - 1] <<= 12;
                    }
                    if (b3) break;
                    try {
                        i3 = (i3 % Test.iArrFld[i17 - 1]);
                        i20 = (77726185 / i20);
                        i18 = (Test.iArrFld[i19] % -33551);
                    } catch (ArithmeticException a_e) {}
                }
            }
            i20 = (int)fFld1;
        } while ((i += 2) < 134);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 b3 l1 = " + i3 + "," + (b3 ? 1 : 0) + "," + l1);
        FuzzerUtils.out.println("s1 i17 i18 = " + s1 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 bArr = " + i19 + "," + i20 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + byFld);
        FuzzerUtils.out.println("Test.dFld fFld1 Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Float.floatToIntBits(fFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

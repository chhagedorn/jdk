// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug  2 18:35:10 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3193372530L;
    public int iFld=92;
    public static double dFld=109.39495;
    public static boolean bFld=true;
    public static float fFld=2.729F;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i4, int i5) {

        float f2=0.234F, f3=2.345F, fArr[]=new float[N];
        int i6=1, i7=134, i8=13, i9=-2498;
        long l1=8654711288815807487L, l2=1336L, lArr1[]=new long[N];
        byte by=-75;

        FuzzerUtils.init(fArr, 61.170F);
        FuzzerUtils.init(lArr1, 2549235665L);

        try {
            i4 = i4;
            for (f2 = 2; 157 > f2; f2++) {
                for (l1 = (long)(f2); 10 > l1; l1++) {
                    i7 = i5;
                    for (l2 = 1; l2 < 1; ++l2) {
                        i7 = i4;
                    }
                    for (f3 = 1; f3 > 1; f3 -= 3) {
                        by ^= (byte)195L;
                    }
                    i4 += (int)(((l1 * l2) + i8) - i9);
                }
                fArr[(int)(f2 - 1)] += (float)Test.dFld;
                i6 += i4;
                fArr[(int)(f2 + 1)] += Test.instanceCount;
                lArr1[(int)(f2)] = i6;
                Test.dFld = f1;
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            i8 = i7;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i4 + i5 + Float.floatToIntBits(f2) + i6 + l1 + i7 + l2 + i8 +
            Float.floatToIntBits(f3) + i9 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth() {

        float f4=0.361F, f5=54.701F;
        int i10=-200, i11=46198, i12=35715, i13=-1, iArr1[]=new int[N];
        byte by1=-61;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 177L);
        FuzzerUtils.init(iArr1, -19);

        for (long l : lArr) {
            vMeth1(f4, i10, i10);
            f4 = f4;
            for (i11 = 1; i11 < 4; i11++) {
                for (f5 = 1; f5 < 2; f5++) {
                    if (Test.bFld) {
                        i12 += (int)f5;
                    }
                    lArr[(int)(f5)] -= l;
                    Test.instanceCount &= by1;
                    switch ((int)(((f5 % 4) * 5) + 78)) {
                    case 97:
                        if (true) break;
                        break;
                    case 98:
                        iArr1[i11] += i12;
                        break;
                    case 90:
                        i12 -= 30494;
                        if (Test.bFld) continue;
                        break;
                    case 94:
                        i12 += (int)l;
                        break;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f4) + i10 + i11 + i12 + Float.floatToIntBits(f5) + i13 + by1 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i2=0, i3=-4, i14=-4, i15=13, i16=-6, iArr2[]=new int[N];
        float f=0.823F, f6=82.565F;
        short s=11682;

        FuzzerUtils.init(iArr2, 50350);

        for (i2 = 3; 219 > i2; i2 += 2) {
            f += (i2 + i3);
        }
        i3 = Integer.reverseBytes(iMeth());
        iArr2[(i >>> 1) % N] -= -73;
        f -= 4569243256935582900L;
        for (i14 = 12; 304 > i14; ++i14) {
            i += (i14 + Test.instanceCount);
            Test.instanceCount = i14;
            Test.instanceCount = s;
            if (Test.bFld) break;
        }
        for (f6 = 7; f6 < 352; ++f6) {
            i = i;
            i16 >>= -107;
            s -= s;
            f /= (Test.instanceCount | 1);
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Float.floatToIntBits(f) + i14 + i15 + s + Float.floatToIntBits(f6) + i16
            + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i17=23, i18=40734, i19=59, i20=-141, i21=2, i22=8, i23=-9, i24=29021, i25=-198, iArr[]=new int[N];
        byte by2=58;
        short s1=10027;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, 4837);
        FuzzerUtils.init(lArr2, -8824595538095389900L);

        iFld |= iArr[(iFld >>> 1) % N];
        vMeth(iFld, iFld);
        i17 = 382;
        while (--i17 > 0) {
            by2 -= (byte)i17;
            Test.fFld = i17;
            iFld = i17;
            iFld = (int)Test.instanceCount;
            Test.instanceCount += i17;
        }
        iArr[(iFld >>> 1) % N] *= i17;
        i18 = 1;
        while (++i18 < 335) {
            Test.instanceCount += i18;
            for (i19 = 3; 75 > i19; i19++) {
                iFld += i19;
                switch ((i18 % 5) + 37) {
                case 37:
                    iArr[i19] -= i21;
                    Test.dFld -= Test.instanceCount;
                    i20 = i17;
                    for (i22 = 1; i22 < 2; i22++) {
                        Test.dFld = i21;
                        Test.fFld += (i22 - Test.fFld);
                    }
                    break;
                case 38:
                    lArr2[i19] = i17;
                    for (i24 = 2; i24 > i19; i24 -= 3) {
                        iArr[i18] += i17;
                        if (Test.bFld) break;
                        i25 -= i22;
                        Test.fFld += i24;
                        iArr[i18] -= i19;
                        iArr[i24 + 1] >>>= i20;
                    }
                    break;
                case 39:
                    i23 >>= s1;
                    lArr2[i18] += i18;
                    break;
                case 40:
                    i23 &= (int)Test.instanceCount;
                    break;
                case 41:
                    iArr[i18] = (int)Test.instanceCount;
                    break;
                default:
                    i20 /= -196;
                }
            }
        }

        FuzzerUtils.out.println("i17 by2 i18 = " + i17 + "," + by2 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 s1 iArr = " + i25 + "," + s1 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr2 = " + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.fFld = " + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(Test.fFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

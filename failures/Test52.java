// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 17 01:03:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6428370958251771297L;
    public static int iFld=17012;
    public static double dFld=-67.53496;
    public static int iFld1=12;
    public static float fFld=-1.57F;
    public boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1L);
        FuzzerUtils.init(Test.fArrFld, 2.118F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7, int i8) {

        int i9=-9, i10=21, i11=-19535, i12=56868, i13=-11570, iArr1[]=new int[N];
        long l1=-12L;
        float f1=0.59F;
        short s=-30236;

        FuzzerUtils.init(iArr1, 132);

        Test.instanceCount = Test.instanceCount;
        for (i9 = 19; 338 > i9; i9++) {
            for (l1 = 1; l1 < 5; l1++) {
                i10 = i11;
                Test.iFld -= (int)Test.dFld;
                switch ((i9 % 9) + 10) {
                case 10:
                    Test.instanceCount ^= i11;
                    break;
                case 11:
                    f1 = 58306L;
                    i8 = Test.iFld;
                    break;
                case 12:
                    Test.instanceCount = i10;
                    if (Test.iFld != 0) {
                    }
                case 13:
                    for (i12 = 1; 2 > i12; i12 += 2) {
                        Test.lArrFld = Test.lArrFld;
                        try {
                            iArr1[i12 + 1] = (i13 % iArr1[i12 - 1]);
                            i10 = (i11 % i11);
                            iArr1[i12 + 1] = (iArr1[(int)(l1 + 1)] / i8);
                        } catch (ArithmeticException a_e) {}
                        i7 = i8;
                    }
                    break;
                case 14:
                case 15:
                    i10 += (int)f1;
                case 16:
                    i7 = i9;
                    break;
                case 17:
                    s = (short)i10;
                case 18:
                    Test.iFld1 -= i9;
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + l1 + i11 + Float.floatToIntBits(f1) + i12 + i13 + s +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1() {

        int i14=-10, i15=219, iArr2[]=new int[N];
        boolean b=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, 173);
        FuzzerUtils.init(byArr, (byte)99);

        Test.instanceCount = (long)(((-(-1.83832 - Float.intBitsToFloat(62820))) * (Test.iFld + Test.instanceCount)) *
            Test.fArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N]);
        lMeth(Test.iFld1, Test.iFld1);
        iArr2[(Test.iFld >>> 1) % N] |= Test.iFld1;
        Test.instanceCount = Test.iFld;
        Test.instanceCount = Test.iFld;
        for (i14 = 11; i14 < 232; i14++) {
            Test.lArrFld[i14] += (long)Test.dFld;
            Test.instanceCount += (i14 - Test.iFld1);
            if (b) continue;
            byArr[i14 - 1] |= (byte)i15;
            i15 = Test.iFld1;
            Test.lArrFld[i14 + 1] += Test.iFld1;
            Test.fArrFld[i14 - 1][i14] *= -239L;
            i15 = i15;
            Test.fFld += (i14 * i14);
        }
        long meth_res = i14 + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, long l, int i3) {

        float f=2.396F;
        int i4=-56, i5=-27779, i6=-33902, iArr[]=new int[N];
        double d=97.13829;
        byte by=-127;

        FuzzerUtils.init(iArr, 27327);

        l = (Test.instanceCount + Test.instanceCount);
        f = 1;
        while (++f < 291) {
            i4 = 1;
            while (++i4 < 6) {
                Test.lArrFld[(int)(f + 1)] = (long)(-((-7980185630156452498L - (i3 - f)) * (i4 * d)));
                l ^= (i3--);
                iArr = iArr;
                by <<= (byte)(i2 -= (int)(Math.max(i4, 199) + f));
                for (i5 = (int)(f); i5 < 1; i5++) {
                    l >>= (Test.instanceCount + Math.min(Math.min(i6, Test.iFld), iMeth1()));
                    i6 -= (int)f;
                    if (false) continue;
                    i6 *= by;
                    l <<= i6;
                    iArr[i5] = i6;
                    Test.iFld1 -= i3;
                }
            }
        }
        long meth_res = i2 + l + i3 + Float.floatToIntBits(f) + i4 + Double.doubleToLongBits(d) + by + i5 + i6 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i1=-230, i16=-5, i17=233, i18=-72, i19=64391, i20=34, i21=-6, i22=4, i23=0, i24=26, iArr3[]=new
            int[N];
        byte by1=-16;

        FuzzerUtils.init(iArr3, -91);

        i += (int)Float.intBitsToFloat(i);
        i1 = 1;
        do {
            if (bFld) {
                i += (10 + (i1 * i1));
            } else if (bFld) {
                iMeth(i, Test.instanceCount, Test.iFld);
                Test.instanceCount *= Test.iFld1;
                i += i1;
            } else {
                Test.iFld += i1;
                for (i16 = 5; i16 < 174; ++i16) {
                    iArr3[i16] -= -4;
                    for (i18 = 2; i18 > i1; --i18) {
                        by1 *= (byte)6;
                        Test.fArrFld[i18][i16 + 1] -= -1;
                        Test.instanceCount += (i18 ^ Test.iFld);
                    }
                    Test.instanceCount *= Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                }
            }
            Test.instanceCount -= i18;
            switch ((i1 % 3) + 33) {
            case 33:
                Test.lArrFld[i1] -= i17;
                i20 = 1;
                do {
                    Test.instanceCount >>= i;
                } while (++i20 < 174);
                break;
            case 34:
                for (i21 = 10; i21 < 174; ++i21) {
                    iArr3[i1] += i22;
                    Test.iFld1 += (((i21 * Test.instanceCount) + Test.fFld) - i);
                    for (i23 = 1; i23 < 2; ++i23) {
                        i19 += i23;
                        Test.iFld = Test.iFld1;
                        i22 -= (int)Test.dFld;
                        i22 >>= -6;
                        Test.instanceCount += i23;
                    }
                }
                break;
            case 35:
                if (bFld) break;
                break;
            }
        } while ((i1 += 2) < 289);

        FuzzerUtils.out.println("i i1 i16 = " + i + "," + i1 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("by1 i20 i21 = " + by1 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld1 Test.fFld bFld = " + Test.iFld1 + "," + Float.floatToIntBits(Test.fFld) +
            "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

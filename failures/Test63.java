// Generated by Java* Fuzzer test generator (1.0.001). Tue Sep  5 22:01:29 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=78L;
    public static volatile short sFld=-6097;
    public static byte byFld=-60;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 96);
        FuzzerUtils.init(Test.fArrFld, 112.933F);
        FuzzerUtils.init(Test.sArrFld, (short)-31779);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=-6, i4=1, i5=-231, i6=-77;
        long l=0L, lArr2[]=new long[N];
        boolean b=false;
        float f1=2.124F;

        FuzzerUtils.init(lArr2, 6891512010415728775L);

        i3 -= i3;
        i4 = 1;
        do {
            i3 += (((i4 * Test.instanceCount) + i3) - i3);
        } while ((i4 += 3) < 359);
        if (b) {
            for (l = 16; l < 317; ++l) {
                Test.instanceCount = Test.instanceCount;
                i3 += (int)l;
                Test.iArrFld[(i5 >>> 1) % N] *= 131;
                if (b) {
                    Test.instanceCount = -11706;
                    Test.instanceCount = i3;
                    Test.sArrFld[(int)(l - 1)] -= Test.sFld;
                    Test.instanceCount = i5;
                    i6 = 1;
                    do {
                        i5 += (-7 + (i6 * i6));
                        if (b) break;
                        Test.instanceCount >>>= 4;
                        lArr2[(int)(l)] = (long)f1;
                        if (i5 != 0) {
                        }
                        Test.iArrFld[(int)(l + 1)] -= -36002;
                    } while (++i6 < 5);
                } else if (true) {
                    f1 += Test.instanceCount;
                } else {
                    i5 += (int)(l - i6);
                }
            }
        } else {
        }
        long meth_res = i3 + i4 + l + i5 + i6 + (b ? 1 : 0) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(byte by, float f, short s) {

        int i=-114, i1=80, i2=-52, i7=53543, i8=11, i9=8;
        long l1=242L, lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr1, -13L);
        FuzzerUtils.init(bArr, false);

        i = 1;
        do {
            i1 = 1;
            do {
                i2 <<= (--s);
                lArr1[i] = (long)(((-205 - (--Test.instanceCount)) * (i2--)) + (f--));
                try {
                    i2 = (27295 / i2);
                    i2 = (Test.iArrFld[i1] % 127);
                    i2 = (i1 % 217);
                } catch (ArithmeticException a_e) {}
                i2 = (int)Test.instanceCount;
                Test.instanceCount += (i1 * i1);
            } while (++i1 < 11);
            Test.iArrFld[(i1 >>> 1) % N] = (int)(Test.instanceCount++);
            Test.fArrFld[i] *= (iMeth() + i1);
            i2 += (i ^ Test.instanceCount);
            bArr = bArr;
            for (i7 = 1; i7 < 11; i7 += 2) {
                for (l1 = 1; l1 < 3; l1++) {
                    try {
                        i8 = (i7 % Test.iArrFld[i7]);
                        i8 = (i7 / Test.iArrFld[(int)(l1 - 1)]);
                        Test.iArrFld[(int)(l1)] = (Test.iArrFld[i] / i9);
                    } catch (ArithmeticException a_e) {}
                    if (false) break;
                    i9 += (int)(((l1 * i1) + Test.instanceCount) - l1);
                    Test.sFld = (short)39L;
                    Test.iArrFld[i7] -= (int)-4.730F;
                    i2 += (int)l1;
                }
                i9 += (i7 * i7);
            }
        } while (++i < 139);
        vMeth2_check_sum += by + Float.floatToIntBits(f) + s + i + i1 + i2 + i7 + i8 + l1 + i9 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1() {

        float f2=-11.365F;
        int i10=162, i11=-153, i12=15840, i13=-5, i14=217, i15=-5, i16=161, i17=17978;
        long l2=160L, lArr[][]=new long[N][N];
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 409461415L);
        FuzzerUtils.init(dArr, -116.111163);

        lArr = (lArr = (lArr = (lArr = lArr)));
        vMeth2(Test.byFld, f2, Test.sFld);
        i10 = 1;
        do {
            for (i11 = 1; 6 > i11; ++i11) {
                for (i13 = 1; i13 < 2; i13++) {
                    i12 = (int)Test.instanceCount;
                }
                i14 += i12;
                for (i15 = 2; i15 > i11; --i15) {
                    f2 *= 141;
                    lArr[i15][i10 - 1] -= Test.instanceCount;
                    i12 *= i10;
                    Test.instanceCount &= 12;
                    Test.instanceCount += (-1508861857L + (i15 * i15));
                    Test.instanceCount = 41;
                    l2 |= 5L;
                }
                i17 = 1;
                while (++i17 < 2) {
                    Test.instanceCount -= (long)f2;
                    if (b1) break;
                    Test.iArrFld[i11] >>>= i16;
                    dArr = dArr;
                }
            }
        } while (++i10 < 271);
        vMeth1_check_sum += Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + l2 + i17 + (b1 ? 1 :
            0) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {

        int i18=22228, i19=92, i20=-185, i21=-14;
        long l3=-38859L;
        double d=-2.93848;
        float f3=0.869F;
        boolean b2=true;

        vMeth1();
        i18 = 1;
        do {
            i19 = 10;
            while (--i19 > 0) {
                l3 = 1;
                do {
                    switch ((int)(((l3 % 4) * 5) + 88)) {
                    case 102:
                        i20 >>>= i18;
                        d -= 56L;
                        i20 -= Test.byFld;
                        f3 -= i20;
                        Test.fArrFld = Test.fArrFld;
                        i20 += (int)(l3 * Test.instanceCount);
                        break;
                    case 89:
                        switch ((i19 % 2) + 121) {
                        case 121:
                            Test.fArrFld[i19 + 1] = i20;
                            i20 += (int)l3;
                        case 122:
                            i20 += (int)122.950F;
                            i20 = -3;
                            b2 = b2;
                            Test.instanceCount += i19;
                            f3 += (((l3 * i19) + i21) - f3);
                            i21 -= i20;
                            break;
                        default:
                            Test.instanceCount -= i21;
                        }
                        break;
                    case 99:
                        f3 -= i21;
                        break;
                    case 105:
                        Test.iArrFld[i18 + 1] ^= (int)Test.instanceCount;
                    }
                } while (++l3 < 1);
            }
        } while (++i18 < 155);
        vMeth_check_sum += i18 + i19 + l3 + i20 + Double.doubleToLongBits(d) + Float.floatToIntBits(f3) + (b2 ? 1 : 0)
            + i21;
    }

    public void mainTest(String[] strArr1) {

        int i22=-158, i23=46242, i24=7, i25=60808, i26=-14, i27=106, i28=-8;
        boolean b3=true, bArr1[]=new boolean[N];
        float f4=49.694F;
        short s1=-2588;
        long lArr3[]=new long[N];

        FuzzerUtils.init(lArr3, 219L);
        FuzzerUtils.init(bArr1, true);

        vMeth();
        i22 -= i22;
        i23 = 1;
        do {
            for (i24 = 9; i24 < 278; ++i24) {
                b3 = b3;
                i26 = 1;
                do {
                    i25 = (int)2113976437L;
                    Test.iArrFld = Test.iArrFld;
                    i22 += (int)f4;
                    Test.iArrFld[i23] = (int)Test.instanceCount;
                    i22 -= i24;
                    Test.instanceCount ^= 14;
                    Test.iArrFld = Test.iArrFld;
                } while (++i26 < 2);
                i22 = i25;
                if (true) continue;
                lArr3[i23 - 1] >>>= s1;
                Test.instanceCount += i25;
                Test.instanceCount *= i22;
                i25 ^= i23;
                i22 -= -38243;
                i22 = i26;
                bArr1 = FuzzerUtils.boolean1array(N, (boolean)true);
                for (i27 = 1; i27 < 2; i27++) {
                    Test.byFld = (byte)-1;
                    switch (((i27 % 6) * 5) + 77) {
                    case 86:
                        i22 = (int)Test.instanceCount;
                        if (b3) {
                            i25 = i22;
                            try {
                                i28 = (i27 % -4719);
                                i25 = (209 % Test.iArrFld[i24]);
                                Test.iArrFld[i23] = (-35189 / i23);
                            } catch (ArithmeticException a_e) {}
                            i22 = (int)Test.instanceCount;
                        } else {
                            Test.instanceCount += (((i27 * f4) + i27) - Test.instanceCount);
                            try {
                                Test.iArrFld[i24] = (532999180 / Test.iArrFld[i23]);
                                i28 = (i28 / 58);
                                i22 = (1485058524 % i23);
                            } catch (ArithmeticException a_e) {}
                            i22 = -55349;
                            Test.iArrFld[i23] ^= 0;
                            switch (((i27 >>> 1) % 6) + 117) {
                            case 117:
                                i22 = (int)2.296F;
                                f4 += i24;
                                try {
                                    Test.iArrFld[i24 - 1] = (22 % i24);
                                    i25 = (i25 / -1359772020);
                                    i28 = (i28 / -166);
                                } catch (ArithmeticException a_e) {}
                                i28 = i23;
                                i22 = i27;
                                break;
                            case 118:
                            case 119:
                                Test.instanceCount += i27;
                                break;
                            case 120:
                                lArr3 = lArr3;
                                break;
                            case 121:
                            case 122:
                                Test.iArrFld = Test.iArrFld;
                                break;
                            default:
                                i22 %= 41;
                            }
                        }
                        break;
                    case 94:
                        Test.iArrFld[i24 - 1] = (int)Test.instanceCount;
                        break;
                    case 99:
                    case 85:
                        Test.instanceCount += (i27 ^ i24);
                        break;
                    case 106:
                        Test.instanceCount -= Test.instanceCount;
                        break;
                    case 84:
                        Test.instanceCount -= (long)2.93948;
                        break;
                    }
                }
            }
        } while ((i23 += 3) < 270);

        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 b3 i26 = " + i25 + "," + (b3 ? 1 : 0) + "," + i26);
        FuzzerUtils.out.println("f4 s1 i27 = " + Float.floatToIntBits(f4) + "," + s1 + "," + i27);
        FuzzerUtils.out.println("i28 lArr3 bArr1 = " + i28 + "," + FuzzerUtils.checkSum(lArr3) + "," +
            FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

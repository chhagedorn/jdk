// Generated by Java* Fuzzer test generator (1.0.001). Wed Jul 26 05:40:40 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=59245L;
    public volatile int iFld=51323;
    public double dFld=24.33994;
    public static boolean bFld=false;
    public static int iFld1=60593;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 54321);
        FuzzerUtils.init(Test.lArrFld, 27046L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i1, short s) {

        long l=-2005728030L;
        int i2=64499, i3=39964, i4=-254, i5=-64;
        float f=96.1023F;
        boolean b=false;

        for (l = 307; l > 12; l--) {
            for (i3 = 1; i3 < 6; ++i3) {
                f *= l;
                i4 += i3;
                b = b;
                switch ((i3 % 1) + 117) {
                case 117:
                    if (b) {
                        switch ((((-15 >>> 1) % 1) * 5) + 117) {
                        case 121:
                            i1 = i4;
                            switch ((((i3 >>> 1) % 2) * 5) + 84) {
                            case 88:
                                i5 = 1;
                                do {
                                    i1 += (i5 * i5);
                                    Test.instanceCount += (((i5 * l) + i1) - i2);
                                } while (++i5 < 2);
                                Test.instanceCount += i3;
                                break;
                            case 90:
                                s &= (short)i1;
                                break;
                            default:
                                f = i1;
                            }
                            break;
                        }
                    } else {
                        f += (i3 + i5);
                    }
                    break;
                default:
                    i1 ^= i4;
                }
            }
        }
        long meth_res = i1 + s + l + i2 + i3 + i4 + Float.floatToIntBits(f) + (b ? 1 : 0) + i5;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        double d1=0.4393;
        short s1=-7113;
        int i6=-188, i7=12, i8=196, i9=208, i10=91;
        boolean b1=true;
        byte by=73;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -49.539F);

        for (int i : Test.iArrFld) {
            d1 = (iMeth1(i, s1) << i);
        }
        Test.instanceCount ^= i6;
        for (float f1 : fArr) {
            if (false) {
                for (i7 = 1; i7 < 4; ++i7) {
                    i9 = 1;
                    do {
                        if (b1) break;
                        i6 = (int)Test.instanceCount;
                        switch (((i8 >>> 1) % 9) + 110) {
                        case 110:
                            Test.lArrFld[i7 + 1] >>>= i6;
                            d1 *= Test.instanceCount;
                            i8 -= (int)Test.instanceCount;
                            i8 %= (int)(by | 1);
                            break;
                        case 111:
                            i6 *= (int)Test.instanceCount;
                            break;
                        case 112:
                            if (false) continue;
                            break;
                        case 113:
                            Test.iArrFld[i7] = i6;
                        case 114:
                            Test.instanceCount += i9;
                            break;
                        case 115:
                            i6 -= i6;
                        case 116:
                            i6 = i10;
                            break;
                        case 117:
                            Test.instanceCount <<= Test.instanceCount;
                            break;
                        case 118:
                            i10 = i8;
                            break;
                        }
                    } while (++i9 < 2);
                }
            } else if (true) {
                i10 |= (int)Test.instanceCount;
            } else if (b1) {
                f1 = i9;
            } else {
                i6 += i8;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + s1 + i6 + i7 + i8 + i9 + (b1 ? 1 : 0) + by + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(double d) {

        boolean b2=true;
        float f2=48.533F, fArr1[]=new float[N];
        int i11=-11, i12=-209;

        FuzzerUtils.init(fArr1, 2.930F);

        iFld = (iFld + iMeth());
        b2 = b2;
        iFld += (int)f2;
        f2 = -83;
        for (i11 = 3; 149 > i11; i11++) {
            i12 += (int)(127L + (i11 * i11));
            Test.lArrFld[i11] = (long)dFld;
            i12 += i11;
            Test.iArrFld[i11] = iFld;
            fArr1[i11 - 1] *= i12;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + (b2 ? 1 : 0) + Float.floatToIntBits(f2) + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i13=-10, i14=-16918, i15=-2, i16=-13, i17=-11, i18=-42072, i19=11, i20=191;
        float f3=101.833F;
        byte by1=37;
        double dArr[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 2.34400);
        FuzzerUtils.init(sArr, (short)-19156);

        iFld = (int)(((iFld * 9463) - (--iFld)) * (dFld++));
        vMeth(dFld);
        dArr[(197 >>> 1) % N] += -51613L;
        Test.lArrFld[(8 >>> 1) % N] = 50;
        Test.instanceCount -= iFld;
        Test.lArrFld[(iFld >>> 1) % N] = iFld;
        iFld += -45431;
        iFld <<= iFld;
        for (i13 = 234; 6 < i13; i13 -= 3) {
            for (i15 = 3; 329 > i15; i15++) {
                i16 >>= iFld;
                try {
                    i16 = (i14 % i14);
                    i14 = (-254 % i14);
                    iFld = (-49 / i13);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (((i15 * Test.instanceCount) + i16) - i14);
                for (i17 = 2; i17 > i13; i17 -= 2) {
                    f3 += (i17 * by1);
                    sArr = sArr;
                    if (Test.bFld) break;
                    Test.lArrFld[i17] >>>= i14;
                    i18 += (int)f3;
                }
                by1 >>>= (byte)147;
                i18 >>= Test.iFld1;
                Test.iArrFld[i15 + 1] = (int)Test.instanceCount;
                i16 -= (int)dFld;
            }
            switch (((i16 >>> 1) % 1) + 100) {
            case 100:
                Test.iFld1 += (int)(-1303685125L + (i13 * i13));
                i14 *= 5;
                break;
            default:
                if (Test.bFld) continue;
                for (i19 = 11; i19 < 329; ++i19) {
                    i16 = Test.iFld1;
                    Test.instanceCount = 14;
                }
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("f3 by1 i19 = " + Float.floatToIntBits(f3) + "," + by1 + "," + i19);
        FuzzerUtils.out.println("i20 dArr sArr = " + i20 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount iFld dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.bFld Test.iFld1 Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

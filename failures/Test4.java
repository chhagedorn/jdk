// Generated by Java* Fuzzer test generator (1.0.001). Fri Jun  2 20:41:20 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-108L;
    public static int iFld=10;
    public static volatile short sFld=-7558;
    public static float fFld=24.229F;
    public volatile byte byFld=103;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 195);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, long l) {

        int i3=0, i4=13, i5=32, i6=91, i7=12, i8=12624;
        float f=0.546F;
        byte by=108;

        i3 = 1;
        while (++i3 < 249) {
            i2 += (i3 | i3);
            Test.iArrFld = FuzzerUtils.int1array(N, (int)57359);
            for (i4 = 7; i3 < i4; i4 -= 2) {
                i2 = (int)l;
                i6 = 1;
                do {
                    l <<= l;
                    f = i6;
                    i5 += (i6 + l);
                    i2 = i5;
                    by += (byte)(-6L + (i6 * i6));
                } while (++i6 < 1);
                f += i5;
                for (i7 = i4; 1 > i7; i7++) {
                    Test.iArrFld[i7 - 1] *= i2;
                }
                i2 ^= i6;
            }
        }
        long meth_res = i2 + l + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + by + i7 + i8;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        float f1=1.736F;
        int i9=11, i10=-9, i11=10, i12=-13, iArr[]=new int[N];
        short s=-16917;
        boolean b=true;
        byte by1=-90;

        FuzzerUtils.init(iArr, -13940);

        iArr[(253 >>> 1) % N] += (Integer.reverseBytes(iMeth(Test.iFld, Test.instanceCount)) * -4482);
        f1 = 184;
        for (i9 = 5; i9 < 384; ++i9) {
            for (i11 = 1; i11 < 4; ++i11) {
                if (b) {
                    s = (short)i10;
                    i12 = Test.iFld;
                }
                Test.iFld -= i10;
                Test.instanceCount *= Test.instanceCount;
                Test.iFld = i12;
            }
            Test.instanceCount *= i9;
            if (false) {
                iArr[i9] *= i12;
                vMeth1_check_sum += Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + s + (b ? 1 : 0) + by1 +
                    FuzzerUtils.checkSum(iArr);
                return;
            } else if (false) {
                iArr[i9] = 150;
                by1 = (byte)Test.instanceCount;
            } else {
                if (Test.iFld != 0) {
                    vMeth1_check_sum += Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + s + (b ? 1 : 0) + by1 +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + s + (b ? 1 : 0) + by1 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i) {

        int i1=-147, i13=-39895, i14=47931, i15=-102, i16=-20;
        short s1=28588;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 63.99894);
        FuzzerUtils.init(lArr, -41029L);

        dArr[(207 >>> 1) % N] -= (((i <<= (int)Test.instanceCount) - (i1++)) * i1);
        if (true) {
            Test.instanceCount = (i1--);
            vMeth1();
            i1 = Test.iFld;
        }
        i = s1;
        for (i13 = 9; i13 < 193; ++i13) {
            i = (int)13L;
            Test.sFld = Test.sFld;
            Test.fFld *= i;
            i1 += (i13 * i13);
            for (i15 = 1; i15 < 9; i15++) {
                Test.iFld = (int)Test.fFld;
            }
            Test.instanceCount += i13;
            i14 += i14;
        }
        vMeth_check_sum += i + i1 + s1 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i17=62, i18=0, i19=-52847, i20=-13627, i21=183, i22=-17398;
        boolean b1=true;
        double d=-2.57941;
        long l2=1281719966L, lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, -10L);
        FuzzerUtils.init(fArr, 50.772F);

        if (b1) {
            vMeth(i17);
            Test.instanceCount = Test.iFld;
        } else if (false) {
            i17 *= i17;
        } else {
            d += Test.iFld;
        }
        i18 = 1;
        do {
            boolean b2=true;
            if (b2) {
                Test.instanceCount &= Test.iFld;
                Test.fFld -= (float)d;
                Test.iFld += i17;
                Test.iArrFld[i18] += i18;
            } else {
                for (i19 = 103; i19 > 6; --i19) {
                    for (l2 = 1; l2 < 2; l2++) {
                        Test.iFld += (int)l2;
                        switch ((i18 % 2) + 23) {
                        case 23:
                        case 24:
                        }
                        lArr1[i19 - 1] = byFld;
                        Test.fFld += l2;
                        if (b1) {
                            Test.instanceCount <<= i19;
                            fArr[i19] *= Test.instanceCount;
                        } else {
                            Test.iArrFld[i19] += -19;
                            Test.iArrFld[(int)(l2)] = i22;
                            try {
                                Test.iArrFld[i18] = (74 % i20);
                                i20 = (i17 / i20);
                                i20 = (-24 / i19);
                            } catch (ArithmeticException a_e) {}
                            Test.iFld = byFld;
                        }
                    }
                }
                switch ((i18 % 2) + 83) {
                case 83:
                    switch (((i19 >>> 1) % 2) + 83) {
                    case 83:
                        switch (((i18 % 2) * 5) + 63) {
                        case 69:
                            d -= i21;
                            Test.instanceCount >>>= i22;
                            i21 /= (int)(i18 | 1);
                            break;
                        case 73:
                            Test.instanceCount >>= i21;
                            break;
                        default:
                            Test.iFld += (i18 | i21);
                        }
                        break;
                    case 84:
                        b2 = b1;
                        break;
                    default:
                        Test.fFld *= Test.fFld;
                    }
                    break;
                case 84:
                    Test.iFld >>= i19;
                    break;
                }
            }
        } while (++i18 < 243);

        FuzzerUtils.out.println("i17 b1 d = " + i17 + "," + (b1 ? 1 : 0) + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("l2 i21 i22 = " + l2 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("lArr1 fArr = " + FuzzerUtils.checkSum(lArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld byFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + byFld + ","
            + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

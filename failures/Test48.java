// Generated by Java* Fuzzer test generator (1.0.001). Fri Aug 25 10:19:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-15553L;
    public static int iFld=-59944;
    public static byte byFld=77;
    public static boolean bFld=false;
    public int iFld1=-6;
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -18.515F);
        FuzzerUtils.init(Test.dArrFld, 1.15064);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=109, i4=39, i5=-133, i6=160, i7=13, i8=47, i9=-149, iArr[]=new int[N];
        float f=-100.360F;
        boolean b1=false, bArr[]=new boolean[N];
        short s1=-9381;
        double d=0.40349, dArr1[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, 64);
        FuzzerUtils.init(dArr1, 0.51961);
        FuzzerUtils.init(lArr, -172L);

        i3 = 1;
        while (++i3 < 299) {
            for (i4 = 6; i4 > i3; i4 -= 2) {
                f += i4;
                for (i6 = 1; i6 < 1; ++i6) {
                    b1 = b1;
                    Test.instanceCount *= Test.instanceCount;
                    s1 -= Test.byFld;
                    f = i4;
                    i7 -= i3;
                    i7 >>= (int)Test.instanceCount;
                }
                i7 <<= Test.iFld;
                switch ((i4 % 1) + 92) {
                case 92:
                    Test.iFld = (int)Test.instanceCount;
                    for (i8 = i4; 1 > i8; i8++) {
                        bArr[i3 - 1] = b1;
                        i5 += (i8 * i8);
                        iArr[i8 - 1] -= i5;
                        dArr1[i3 - 1] = i3;
                        lArr = lArr;
                        Test.iFld += (int)d;
                    }
                    break;
                }
            }
        }
        vMeth2_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + (b1 ? 1 : 0) + s1 + i8 + i9 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(short s, int i1) {

        int i2=20537, i10=-7, i11=42412, i12=0, iArr1[]=new int[N];
        long l1=9L, lArr1[]=new long[N];
        double d1=-1.13715;
        boolean b2=true, bArr1[][]=new boolean[N][N];

        FuzzerUtils.init(lArr1, -13L);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(iArr1, -171);

        i2 = 1;
        do {
            if (b2) {
                vMeth2();
                for (l1 = 10; l1 > i2; l1 -= 2) {
                    lArr1[(int)(l1)] *= (long)d1;
                    for (i11 = 1; i11 < 1; i11++) {
                        i10 = i1;
                        switch ((int)((l1 % 4) + 109)) {
                        case 109:
                            Test.instanceCount = (long)-1.107610;
                            break;
                        case 110:
                            d1 = Test.byFld;
                            Test.iFld += i11;
                            Test.iFld = (int)Test.instanceCount;
                        case 111:
                            s -= (short)i12;
                            if (b2) {
                                Test.instanceCount += (-135L + (i11 * i11));
                                bArr1[(int)(l1 - 1)] = bArr1[i2 + 1];
                                try {
                                    i12 = (-51697 / i2);
                                    iArr1[i2] = (i2 / 277866645);
                                    i10 = (i1 % 63186);
                                } catch (ArithmeticException a_e) {}
                                iArr1[i2] |= (int)l1;
                            } else {
                                b2 = b2;
                                try {
                                    i1 = (104 % i11);
                                    i1 = (i11 % i2);
                                    i1 = (i12 % i2);
                                } catch (ArithmeticException a_e) {}
                            }
                            break;
                        case 112:
                            Test.iFld += (i11 - i2);
                        default:
                            i10 += (i11 | l1);
                        }
                    }
                }
            }
        } while ((i2 += 2) < 327);
        long meth_res = s + i1 + i2 + l1 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(boolean b) {

        short s2=-1512;
        int i13=0, i14=-66, i15=1, i16=15478, i17=-53380, i18=-57840, i19=-57046, i20=130, iArr2[]=new int[N];
        float f1=-2.405F;
        double dArr[]=new double[N];
        boolean bArr2[]=new boolean[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(dArr, -1.30527);
        FuzzerUtils.init(bArr2, true);
        FuzzerUtils.init(iArr2, 9);
        FuzzerUtils.init(lArr2, -7748153716381667531L);

        dArr[(Test.iFld >>> 1) % N] = (fMeth(s2, Test.iFld) - Test.instanceCount);
        i13 = 1;
        do {
            for (i14 = 1; i14 < 5; ++i14) {
                i16 >>= 13742;
            }
            bArr2 = bArr2;
            iArr2[i13] ^= (int)-6103744034050646728L;
            lArr2 = FuzzerUtils.long1array(N, (long)-8083440663201316170L);
            Test.byFld >>>= (byte)12;
            i15 += (i13 + f1);
            Test.instanceCount += (i13 * i13);
        } while (++i13 < 366);
        for (i17 = 382; i17 > 23; i17--) {
            try {
                i18 = (-151 % iArr2[i17]);
                i18 = (i17 % i13);
                Test.iFld = (i15 / i15);
            } catch (ArithmeticException a_e) {}
            for (i19 = i17; i19 < 5; i19++) {
                i20 = i16;
                lArr2 = FuzzerUtils.long1array(N, (long)1L);
                i18 = i15;
                i18 += (10966 + (i19 * i19));
                i16 = (int)Test.instanceCount;
                Test.fArrFld[i17 + 1] -= f1;
                i18 = (int)f1;
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + s2 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + i17 + i18 + i19 + i20
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr2) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr2);
    }

    public static void vMeth(int i, long l) {

        int i21=57646, i22=-49841, i23=-63646, i24=-67, iArr3[]=new int[N], iArr4[]=new int[N];
        float f2=-1.978F;
        double d2=-77.59179;
        short s3=-11362;

        FuzzerUtils.init(iArr3, -30818);
        FuzzerUtils.init(iArr4, -38953);

        Test.iFld -= (-i);
        vMeth1(Test.bFld);
        i21 = 1;
        while (++i21 < 390) {
            iArr3[i21] *= i21;
            i22 = 1;
            while (++i22 < 4) {
                iArr3[i21] *= i21;
                iArr3[i21 - 1] = -4;
                try {
                    i = (i22 % -29473);
                    Test.iFld = (129 % Test.iFld);
                    iArr3[i21] = (iArr3[i21] / i);
                } catch (ArithmeticException a_e) {}
                i = i22;
                Test.iFld += (((i22 * i22) + i) - f2);
                if (i != 0) {
                    vMeth_check_sum += i + l + i21 + i22 + Float.floatToIntBits(f2) + i23 + i24 +
                        Double.doubleToLongBits(d2) + s3 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(iArr4);
                    return;
                }
                for (i23 = 1; i23 < 1; ++i23) {
                    d2 -= s3;
                    i |= i22;
                    l += i23;
                    l -= -3;
                    iArr4[i23 + 1] &= (int)Test.instanceCount;
                    iArr3 = iArr3;
                    l ^= i21;
                    try {
                        Test.iFld = (Test.iFld % iArr4[i23 + 1]);
                        Test.iFld = (i / -16747);
                        iArr3[(13 >>> 1) % N] = (iArr3[i23 + 1] % i24);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i + l + i21 + i22 + Float.floatToIntBits(f2) + i23 + i24 + Double.doubleToLongBits(d2) + s3
            + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(iArr4);
    }

    public void mainTest(String[] strArr1) {

        int i25=-5, i26=-251, i27=15706, i28=-22362, i29=57794, i30=-13, i31=124, i32=3, i33=138, i34=-151, i35=231,
            i36=-59, iArr5[]=new int[N], iArr6[][]=new int[N][N];
        double d3=-14.65201, d4=1.112924;
        float f3=-2.809F;
        short s4=-13878;

        FuzzerUtils.init(iArr5, 82);
        FuzzerUtils.init(iArr6, -76);

        vMeth(Test.iFld, Test.instanceCount);
        for (i25 = 9; i25 < 150; i25++) {
            for (d3 = i25; 178 > d3; ++d3) {
                iArr5[i25 + 1] -= (int)d3;
                iArr6 = FuzzerUtils.int2array(N, (int)-10);
                if (Test.bFld) continue;
                switch ((int)((d3 % 1) + 58)) {
                case 58:
                    switch (((Test.iFld >>> 1) % 7) + 77) {
                    case 77:
                        d4 = i25;
                        f3 = i25;
                        Test.iFld = i27;
                        for (i28 = i25; 1 > i28; i28++) {
                            Test.instanceCount = -6733810742138155430L;
                            s4 |= (short)i25;
                            Test.instanceCount += (((i28 * i27) + i25) - i25);
                            Test.iFld = i28;
                            if (Test.bFld) continue;
                            Test.bFld = Test.bFld;
                        }
                    case 78:
                    case 79:
                        for (i30 = 1; i30 < 1; i30++) {
                            i27 = (int)Test.instanceCount;
                            lArrFld = lArrFld;
                            f3 -= (float)2.110338;
                            i31 += (((i30 * i28) + i25) - f3);
                            Test.bFld = Test.bFld;
                            Test.iFld = (int)Test.instanceCount;
                        }
                        try {
                            i26 = (-207 / i27);
                            i31 = (iFld1 / 250);
                            iFld1 = (i29 % -69);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = Test.iFld;
                        for (i32 = 1; i32 > 1; --i32) {
                            i29 = (int)-3557878263L;
                            Test.fArrFld = Test.fArrFld;
                            lArrFld = lArrFld;
                            try {
                                i31 = (i34 % i32);
                                iArr6[i25][i25 + 1] = (iArr5[(int)(d3)] % 40900);
                                i29 = (12756 % iArr5[i32 + 1]);
                            } catch (ArithmeticException a_e) {}
                            if (false) continue;
                            Test.bFld = Test.bFld;
                        }
                        break;
                    case 80:
                        Test.dArrFld[(int)(d3)][(int)(d3)] = Test.instanceCount;
                        break;
                    case 81:
                        for (i35 = i25; 1 > i35; ++i35) {
                            d4 *= i25;
                            iFld1 *= (int)5984073374680919960L;
                            Test.iFld += (((i35 * Test.instanceCount) + f3) - i30);
                            Test.bFld = Test.bFld;
                        }
                        break;
                    case 82:
                    case 83:
                        iArr5 = FuzzerUtils.int1array(N, (int)0);
                        break;
                    default:
                        iFld1 &= Test.byFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i25 i26 d3 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i27 d4 f3 = " + i27 + "," + Double.doubleToLongBits(d4) + "," +
            Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i28 i29 s4 = " + i28 + "," + i29 + "," + s4);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 iArr5 iArr6 = " + i36 + "," + FuzzerUtils.checkSum(iArr5) + "," +
            FuzzerUtils.checkSum(iArr6));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld iFld1 Test.fArrFld = " + (Test.bFld ? 1 : 0) + "," + iFld1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lArrFld Test.dArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

// Generated by Java* Fuzzer test generator (1.0.001). Sat Aug 19 21:01:27 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=80L;
    public static volatile float fFld=2.443F;
    public static long lFld=2293054660419850912L;
    public int iFld=-13;

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1) {

        int i5=-43332, i6=249, i7=189, i8=-3, i9=-3768, i10=240, i11=-14, iArr1[][]=new int[N][N];
        float f=2.429F;
        byte by1=-25;
        double d=2.5959;
        boolean b=false;

        FuzzerUtils.init(iArr1, 57394);

        for (i5 = 3; i5 < 168; i5++) {
            iArr1[i5][i5] |= (int)l1;
            i6 |= i6;
            f += by1;
            try {
                iArr1[i5][i5] = (i5 / i6);
                i6 = (i5 / -20);
                iArr1[i5 - 1][i5] = (27463 % i6);
            } catch (ArithmeticException a_e) {}
            try {
                i6 = (iArr1[i5][i5] % -175);
                i6 = (-168 / i5);
                i6 = (i5 % i6);
            } catch (ArithmeticException a_e) {}
            i7 *= (int)l1;
            switch ((((i7 >>> 1) % 7) * 5) + 121) {
            case 146:
                for (i8 = 10; 1 < i8; i8--) {
                    for (i10 = 1; i10 < 2; i10++) {
                        d -= by1;
                        i7 -= 5754;
                        if (b) break;
                        f += i5;
                        i7 = (int)l1;
                    }
                }
            case 126:
                try {
                    i6 = (-576013131 / i7);
                    i11 = (iArr1[i5 + 1][i5 - 1] % iArr1[i5 - 1][i5 + 1]);
                    i11 = (-174 % i9);
                } catch (ArithmeticException a_e) {}
                break;
            case 125:
                i7 -= -56;
                break;
            case 129:
                i7 <<= i6;
                break;
            case 130:
                if (b) break;
                break;
            case 131:
                i9 = i11;
            case 142:
                iArr1[i5 + 1] = iArr1[i5 - 1];
                break;
            }
        }
        vMeth_check_sum += l1 + i5 + i6 + Float.floatToIntBits(f) + by1 + i7 + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(d) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(int i3, long l, int i4) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -4433);

        iArr[(i4 >>> 1) % N] = (int)Test.instanceCount;
        vMeth(Test.instanceCount);
        Test.fFld *= i3;
        long meth_res = i3 + l + i4 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        int i1=99, i2=-5, i12=2, i13=-3, i14=-6, i15=-53889, iArr2[]=new int[N];
        double d1=-103.68097;

        FuzzerUtils.init(iArr2, -10);

        for (i1 = 7; i1 < 133; i1++) {
            short s=-24676;
            s = (short)iMeth1(-13, Test.lFld, i1);
            for (i12 = 12; i12 > 1; i12 -= 3) {
                i2 |= i13;
                for (i14 = 1; i14 < 4; ++i14) {
                    i *= 70;
                    i13 = i2;
                    Test.instanceCount = Test.lFld;
                    d1 /= (Test.instanceCount | 1);
                    Test.lFld = i;
                    switch (((i15 >>> 1) % 4) + 61) {
                    case 61:
                        iArr2[i1] = -5;
                        i15 = (int)Test.fFld;
                        i = (int)Test.instanceCount;
                        i15 = i2;
                    case 62:
                        i2 /= (int)(Test.lFld | 1);
                        break;
                    case 63:
                    case 64:
                        i2 &= -19514;
                        break;
                    default:
                        d1 -= i15;
                    }
                }
            }
        }
        long meth_res = i + i1 + i2 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=-27;
        int i16=-55369, i17=42805, i18=-24, i19=-7, i20=24404, i21=-3, i22=62327, i23=-62774, i24=-86, iArr3[]=new
            int[N];
        boolean b1=true;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 2.126499);
        FuzzerUtils.init(iArr3, -8);
        FuzzerUtils.init(lArr, 89L);

        by = (byte)((-iMeth(iFld)) % (iFld | 1));
        for (double d2 : dArr) {
            for (i16 = 2; i16 < 63; ++i16) {
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.fFld += i18;
                    iArr3[i16 + 1] -= (int)Test.lFld;
                    i19 = i16;
                    iFld = i19;
                    iFld >>= (int)-7956L;
                    lArr[i16 - 1] >>= i16;
                }
                i17 += (int)13853L;
                i17 = -2;
                iArr3[i16 + 1] *= i19;
                i19 += iFld;
            }
            i17 *= (int)Test.lFld;
            d2 = i16;
            iArr3[(i19 >>> 1) % N] = i19;
        }
        iFld += 64119;
        i20 = 1;
        do {
            for (i21 = 85; 5 < i21; i21 -= 3) {
                try {
                    i22 = (i22 / -168);
                    i19 = (i16 / 51589);
                    i17 = (i20 % i22);
                } catch (ArithmeticException a_e) {}
                iFld = i19;
                for (i23 = 4; i21 < i23; i23 -= 3) {
                    if (b1) break;
                    Test.instanceCount += i19;
                    i22 += (int)Test.fFld;
                    i22 += i23;
                    iArr3 = iArr3;
                    iArr3[i23] = i18;
                    iFld += (-134 + (i23 * i23));
                }
            }
        } while (++i20 < 296);

        FuzzerUtils.out.println("by i16 i17 = " + by + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 b1 dArr = " + i24 + "," + (b1 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("iArr3 lArr = " + FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.lFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.lFld);
        FuzzerUtils.out.println("iFld = " + iFld);

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

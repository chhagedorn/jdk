// Generated by Java* Fuzzer test generator (1.0.001). Wed Jul 19 13:02:34 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5825495860992347524L;
    public static double dFld=1.103288;
    public static float fFld=-79.181F;
    public static short sFld=-22453;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 200661231L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i3=6071, i4=0, i5=-15846, iArr[]=new int[N];
        double d=-2.122483;
        float f=67.210F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(lArr, -3049147837L);

        i3 *= i3;
        iArr[(6 >>> 1) % N] = (int)41081L;
        i3 >>>= i3;
        for (i4 = 3; i4 < 121; i4++) {
            Test.instanceCount = i5;
            i5 += (((i4 * i3) + i3) - i4);
            if (false) break;
        }
        i3 -= (int)Test.dFld;
        i3 = i5;
        d = 263;
        do {
            Test.dFld = f;
            switch (((i4 >>> 1) % 1) + 89) {
            case 89:
                f += (float)(d - i3);
                break;
            }
            Test.dFld = f;
            lArr[(int)(d)] *= i5;
        } while (--d > 0);
        long meth_res = i3 + i4 + i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=47923, i6=-55, i7=-3, i8=63321, i9=-14, i10=117, iArr1[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 41.646F);
        FuzzerUtils.init(iArr1, 44936);

        i2 = (int)((iMeth1() * Test.dFld) + i2);
        i2 -= 55149;
        i2 = i2;
        i6 = 1;
        while (++i6 < 390) {
            i2 = i6;
            fArr = fArr;
            for (i7 = 1; i7 < 4; i7++) {
                i2 = i6;
                Test.instanceCount = -13;
                Test.instanceCount = -123;
                i8 += (i7 * i7);
            }
            for (i9 = 1; i9 < 4; ++i9) {
                fArr[i6 - 1] = i9;
            }
            i2 = i9;
            iArr1 = iArr1;
        }
        vMeth_check_sum += i2 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l, int i1) {

        int i11=-8, i12=187, i13=11, i14=-11099, i15=11, i16=236;

        vMeth();
        for (i11 = 201; i11 > 3; i11--) {
            i1 *= i1;
            i1 += (((i11 * i1) + i1) - i1);
            for (i13 = i11; i13 < 8; i13++) {
                Test.fFld += i1;
                switch (((i13 >>> 1) % 1) + 88) {
                case 88:
                    l += i11;
                    i12 += i12;
                    Test.lArrFld[i13] = Test.instanceCount;
                    l += (i13 - i1);
                    break;
                }
                for (i15 = 1; 1 > i15; i15++) {
                    Test.fFld += i13;
                    Test.lArrFld = Test.lArrFld;
                    Test.fFld += (i15 * Test.fFld);
                }
            }
        }
        long meth_res = l + i1 + i11 + i12 + i13 + i14 + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=11, i17=-155, i18=-13832, i19=216, i20=7, i21=-31, i22=57138, i23=0, iArr2[][]=new int[N][N];
        byte by=-84, by1=-102;
        float f1=0.418F;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.123700);
        FuzzerUtils.init(iArr2, -8);

        i ^= (iMeth(Test.instanceCount, i) | i);
        i17 = 1;
        while (++i17 < 196) {
            by *= (byte)Test.fFld;
            i += (i17 ^ i17);
            i18 = 1;
            while (++i18 < 128) {
                i = (int)Test.fFld;
            }
            i += by;
            if (b) {
                dArr[i17] = Test.instanceCount;
                by += (byte)i18;
                for (f1 = 128; f1 > 6; --f1) {
                    for (i20 = 2; i20 > i17; i20--) {
                        i21 = i19;
                        Test.instanceCount += (i20 * i21);
                        i19 += i20;
                        by1 = (byte)i17;
                        if (b) continue;
                        i21 *= Test.sFld;
                        iArr2[i20][i17] = (int)Test.instanceCount;
                    }
                    i19 = i21;
                    Test.instanceCount = i17;
                    Test.sFld = (short)Test.instanceCount;
                    for (i22 = 2; i22 > 1; --i22) {
                        i -= i23;
                        iArr2[i22] = iArr2[i22 - 1];
                        i21 = i23;
                    }
                    i = (int)Test.dFld;
                    i19 -= (int)f1;
                    by <<= (byte)Test.instanceCount;
                    dArr[(int)(f1 + 1)] %= -4;
                }
            } else {
                Test.instanceCount = i19;
            }
        }

        FuzzerUtils.out.println("i i17 by = " + i + "," + i17 + "," + by);
        FuzzerUtils.out.println("i18 f1 i19 = " + i18 + "," + Float.floatToIntBits(f1) + "," + i19);
        FuzzerUtils.out.println("i20 i21 by1 = " + i20 + "," + i21 + "," + by1);
        FuzzerUtils.out.println("b i22 i23 = " + (b ? 1 : 0) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("dArr iArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.lArrFld = " + Test.sFld + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

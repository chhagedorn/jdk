// Generated by Java* Fuzzer test generator (1.0.001). Sat Jul  8 03:40:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=229L;
    public static float fFld=2.909F;
    public static short sFld=-16132;
    public static byte byFld=101;
    public static double dFld=-30.60101;
    public static int iFld=-56055;
    public int iFld1=128;
    public static int iFld2=-47949;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -451L);
        FuzzerUtils.init(Test.iArrFld, -6);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=10073, i3=7, i4=-1, i5=12, iArr[]=new int[N];
        short s=3188;
        float f1=-1.492F, f2=19.137F;
        double d=-1.101620;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 84);
        FuzzerUtils.init(lArr, -1796788366961606017L);

        i2 -= i2;
        i3 = 1;
        do {
            s -= (short)i2;
            iArr[i3] >>>= i3;
            lArr = lArr;
            for (f1 = 1; f1 < 7; f1++) {
                if (b) {
                    for (f2 = 1; f2 < 2; ++f2) {
                        try {
                            iArr[(int)(f2 - 1)] = (i5 / i3);
                            iArr[(int)(f2 - 1)] = (i5 / iArr[(int)(f2 - 1)]);
                            i4 = (2065184104 / i4);
                        } catch (ArithmeticException a_e) {}
                        i2 *= 9;
                        i5 *= (int)Test.fFld;
                        lArr[(int)(f1)] = Test.instanceCount;
                        lArr[(int)(f1 + 1)] -= i3;
                        iArr[(int)(f1 - 1)] |= (int)Test.instanceCount;
                    }
                    Test.fFld = (float)d;
                } else if (false) {
                    i5 += (int)Test.fFld;
                } else {
                    iArr[(int)(f1 - 1)] = i4;
                }
            }
        } while (++i3 < 224);
        long meth_res = i2 + i3 + s + Float.floatToIntBits(f1) + i4 + Float.floatToIntBits(f2) + i5 +
            Double.doubleToLongBits(d) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, float f, int i1) {

        int i6=22, i7=-102, i8=53676, i9=4, i10=-213, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 2740996451894870197L);
        FuzzerUtils.init(iArr1, 11);

        iMeth();
        Test.sFld += (short)i1;
        for (i6 = 13; 316 > i6; ++i6) {
            lArr1 = lArr1;
            i7 = i;
            iArr1[i6] *= i7;
            Test.instanceCount = i6;
        }
        i1 = Test.byFld;
        i8 = 1;
        do {
            i += (i8 * i6);
            switch ((i8 % 2) + 105) {
            case 105:
                for (i9 = 1; 8 > i9; ++i9) {
                    i *= i9;
                    i1 += i9;
                    i1 >>>= i10;
                }
                break;
            case 106:
                Test.instanceCount *= Test.instanceCount;
                break;
            default:
                Test.dFld *= i7;
            }
        } while (++i8 < 209);
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(long l) {

        int i11=-213;

        Test.fFld = (float)-1.112197;
        vMeth(i11, Test.fFld, Test.iFld);
        vSmallMeth_check_sum += l + i11;
    }

    public void mainTest(String[] strArr1) {

        int i12=54348, i13=126, i14=-8;
        long l2=58212L;
        boolean b1=true;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)6);

        for (int smallinvoc=0; smallinvoc<641; smallinvoc++) vSmallMeth(Test.instanceCount);
        Test.byFld += Test.byFld;
        for (long l1 : Test.lArrFld) {
            byArr[(167 >>> 1) % N][(Test.iFld >>> 1) % N] >>= (byte)Test.iFld;
            i12 = 1;
            do {
                l2 = 1;
                do {
                    l1 += -1186644290694583780L;
                    Test.iFld = (int)Test.instanceCount;
                    Test.iFld = (int)Test.dFld;
                    Test.iArrFld[(int)(l2 + 1)] <<= i12;
                    try {
                        Test.iArrFld[i12 - 1] = (i12 % i12);
                        Test.iFld = (i12 / 49264);
                        Test.iFld = (-15 % iFld1);
                    } catch (ArithmeticException a_e) {}
                    l1 += (l2 * l2);
                    Test.iFld += (int)(((l2 * Test.iFld) + i12) - Test.instanceCount);
                    Test.iFld = i12;
                } while (++l2 < 1);
                try {
                    iFld1 = (iFld1 % -362667110);
                    Test.iFld2 = (iFld1 % 132);
                    iFld1 = (Test.iArrFld[i12] % iFld1);
                } catch (ArithmeticException a_e) {}
                for (i13 = 1; i13 > i12; i13 -= 3) {
                    Test.iFld2 -= Test.iFld2;
                    i14 -= Test.byFld;
                    Test.dFld *= -4716;
                    iFld1 += i13;
                    i14 += (int)(3556169004L + (i13 * i13));
                    Test.iArrFld[i13] = Test.iFld;
                    if (b1) continue;
                    Test.iFld2 += (i13 * i13);
                    iFld1 = (int)Test.dFld;
                    Test.iFld2 += (i13 * i13);
                }
                i14 = (int)3.105380;
                Test.lArrFld[i12] = l2;
                Test.iFld2 = iFld1;
            } while (++i12 < 63);
            if (false) continue;
        }

        FuzzerUtils.out.println("i12 l2 i13 = " + i12 + "," + l2 + "," + i13);
        FuzzerUtils.out.println("i14 b1 byArr = " + i14 + "," + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld Test.dFld Test.iFld = " + Test.byFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("iFld1 Test.iFld2 Test.lArrFld = " + iFld1 + "," + Test.iFld2 + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

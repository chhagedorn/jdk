// Generated by Java* Fuzzer test generator (1.0.001). Tue Jul 11 06:08:48 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=192L;
    public int iFld=158;
    public static float fFld=-2.669F;
    public static byte byFld=103;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public boolean bArrFld[][]=new boolean[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, int i5) {

        int i6=106, i7=0, i8=28, i9=11014;
        boolean b=false, bArr[]=new boolean[N];
        double d=0.63257;
        short s=-9496;

        FuzzerUtils.init(bArr, true);

        i6 = 1;
        while (++i6 < 317) {
            i5 ^= i6;
            Test.instanceCount ^= -3L;
            i7 = 5;
            while ((i7 -= 3) > 0) {
                i5 += (20595 + (i7 * i7));
                i5 -= (int)Test.instanceCount;
                if (i6 != 0) {
                    vMeth1_check_sum += Float.floatToIntBits(f) + i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 +
                        Double.doubleToLongBits(d) + s + FuzzerUtils.checkSum(bArr);
                    return;
                }
            }
            Test.instanceCount += (i6 | i6);
            bArr[i6 + 1] = b;
            i5 = (int)Test.instanceCount;
            for (i8 = 1; i8 < 5; i8++) {
                i9 = i6;
                d -= -7;
                Test.iArrFld = Test.iArrFld;
                Test.instanceCount *= -30856L;
                Test.iArrFld = Test.iArrFld;
                bArr[i6] = b;
                f += s;
                i9 >>= i7;
                bArr[i8] = false;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + Double.doubleToLongBits(d)
            + s + FuzzerUtils.checkSum(bArr);
    }

    public static double dMeth1(int i4, long l1) {

        double d1=2.100528;
        int i11=-253, i12=28, i13=1, iArr[][]=new int[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(lArr1, 172L);

        iArr = (iArr = (iArr = iArr));
        vMeth1(Test.fFld, i4);
        for (int i10 : Test.iArrFld) {
            i4 -= i10;
            i4 = (int)-1.304F;
            l1 = i4;
            i4 = (int)1.279F;
            for (d1 = 1; d1 < 4; d1 += 3) {
                l1 = i10;
                i12 = 1;
                do {
                    boolean b1=false;
                    Test.instanceCount >>= l1;
                    l1 >>= Test.instanceCount;
                    Test.fFld += (i12 + i4);
                    Test.instanceCount >>= i13;
                    Test.instanceCount += (3L + (i12 * i12));
                    if (i13 != 0) {
                    }
                    lArr1[i12] = i4;
                    i11 >>= Test.byFld;
                    Test.fFld = Test.instanceCount;
                    if (b1) continue;
                } while (++i12 < 4);
            }
        }
        long meth_res = i4 + l1 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        dMeth1_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(long l, int i3) {

        int i14=-171, i15=13, i16=-19461, i17=-177, i18=3, i19=-218, i20=20735, i21=-10;
        boolean b2=true, bArr1[][]=new boolean[N][N];
        double d2=40.112189;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 3146739235L);
        FuzzerUtils.init(bArr1, false);

        dMeth1(5, Test.instanceCount);
        for (i14 = 339; 7 < i14; i14 -= 3) {
            switch ((i14 % 6) + 26) {
            case 26:
                Test.instanceCount += i14;
                b2 = b2;
                for (i16 = 1; i16 < 14; ++i16) {
                    for (i18 = 1; i18 < 2; i18++) {
                        b2 = b2;
                        l = i16;
                        i19 += (i18 * i15);
                        Test.instanceCount += (i18 * i18);
                    }
                }
                bArr1[i14][i14 - 1] = b2;
                i17 += (-9 + (i14 * i14));
                break;
            case 27:
                Test.iArrFld[i14 - 1] += i16;
                for (i20 = 14; i14 < i20; i20 -= 3) {
                    if (i17 != 0) {
                        vMeth_check_sum += l + i3 + i14 + i15 + (b2 ? 1 : 0) + i16 + i17 + i18 + i19 + i20 + i21 +
                            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(bArr1);
                        return;
                    }
                    lArr2[i20] = -73;
                    Test.instanceCount = Test.instanceCount;
                }
                l -= (long)-105.906F;
                Test.instanceCount += (13L + (i14 * i14));
                break;
            case 28:
                i3 -= i19;
                break;
            case 29:
                i15 <<= 139;
                break;
            case 30:
                i3 = (int)d2;
            case 31:
                b2 = false;
                break;
            }
        }
        vMeth_check_sum += l + i3 + i14 + i15 + (b2 ? 1 : 0) + i16 + i17 + i18 + i19 + i20 + i21 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(bArr1);
    }

    public static double dMeth() {

        int i=18065, i1=77, i2=6, i22=13, i23=-35089, i24=-49503, i25=-5;
        double d3=-21.31129;
        boolean b3=true;
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)-554);
        FuzzerUtils.init(lArr, 2357465057618361092L);

        i &= (int)(((Test.instanceCount - Test.instanceCount) + Math.min(i, i)) + (Math.abs(i) - (++sArr[(i >>> 1) %
            N])));
        lArr = FuzzerUtils.long1array(N, (long)168L);
        for (i1 = 6; i1 < 130; i1++) {
            i2 += (20237 + (i1 * i1));
            vMeth(Test.instanceCount, i1);
            i += (((i1 * i2) + i) - Test.fFld);
            for (i22 = 1; i22 < 13; i22++) {
                Test.iArrFld[i22 + 1] <<= 100;
                i ^= (int)Test.instanceCount;
                Test.byFld = (byte)Test.instanceCount;
                for (i24 = 1; i24 < 2; i24++) {
                    i23 <<= (int)Test.instanceCount;
                    Test.fFld = (float)d3;
                    Test.fFld += (-1 + (i24 * i24));
                    b3 = b3;
                    i2 >>>= i23;
                    i ^= Test.byFld;
                    Test.instanceCount *= (long)1.2718;
                    Test.fFld *= Test.fFld;
                    Test.fFld = i22;
                }
            }
        }
        long meth_res = i + i1 + i2 + i22 + i23 + i24 + i25 + Double.doubleToLongBits(d3) + (b3 ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i26=-122, i27=-87, i28=-56151, i29=4, i30=-23639, i31=-2596, i32=90, i33=-33615;
        short s1=-6682;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-56);

        iFld |= (int)(Test.instanceCount++);
        Test.iArrFld[(iFld >>> 1) % N] = (int)(Test.instanceCount * (Float.intBitsToFloat(33847) - dMeth()));
        Test.iArrFld[(iFld >>> 1) % N] -= iFld;
        i26 = 1;
        while (++i26 < 154) {
            iFld = 88;
        }
        Test.bFld = Test.bFld;
        lArrFld = lArrFld;
        for (i27 = 339; i27 > 11; i27 -= 3) {
            i29 = 230;
            do {
                bArrFld[i27][i27] = true;
                Test.iArrFld = Test.iArrFld;
                iFld = i26;
                iFld += i28;
                i28 += i29;
                Test.instanceCount += -4L;
                iFld -= i27;
                Test.bFld = Test.bFld;
            } while ((i29 -= 3) > 0);
            iFld += i27;
            for (i30 = 8; i30 < 230; i30++) {
                if (Test.bFld) {
                    s1 = (short)Test.instanceCount;
                    switch ((i30 % 6) + 45) {
                    case 45:
                        i28 += i26;
                        i31 = i27;
                        byArr = byArr;
                    case 46:
                        Test.byFld = (byte)i31;
                        fArrFld = fArrFld;
                    case 47:
                    case 48:
                        i31 <<= i26;
                        for (i32 = 1; 2 > i32; i32++) {
                            Test.instanceCount -= -113;
                            Test.instanceCount = Test.instanceCount;
                            bArrFld[i30 + 1][i30] = false;
                            byArr[i30] = (byte)i33;
                        }
                        switch (((i33 >>> 1) % 2) + 126) {
                        case 126:
                            i33 += -65051;
                            if (Test.bFld) {
                                try {
                                    i28 = (-92 % iFld);
                                    iFld = (42400 % Test.iArrFld[i30]);
                                    Test.iArrFld[i27 - 1] = (i32 % -42471);
                                } catch (ArithmeticException a_e) {}
                            }
                            break;
                        case 127:
                            Test.bFld = Test.bFld;
                            try {
                                iFld = (i32 / 252);
                                Test.iArrFld[i30 - 1] = (19720 % i26);
                                i28 = (i28 % Test.iArrFld[i30]);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            Test.instanceCount = Test.instanceCount;
                        }
                        break;
                    case 49:
                        Test.iArrFld[i27] = (int)Test.instanceCount;
                        break;
                    case 50:
                        lArrFld[i27 + 1] = i30;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("s1 i32 i33 = " + s1 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.bFld Test.iArrFld = " + Test.byFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld bArrFld fArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("dMeth1_check_sum: " + dMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  dMeth1 ->  dMeth1 vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}

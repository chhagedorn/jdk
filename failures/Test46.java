// Generated by Java* Fuzzer test generator (1.0.001). Wed Aug 16 05:17:02 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8868809278453421417L;
    public static double dFld=-1.120704;
    public static int iFld=74;
    public static int iFld1=51115;
    public static boolean bFld=true;
    public float fFld=74.506F;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.11096);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        int i5=-10, i6=-7, i7=-50988, i8=28;
        boolean b1=true;
        float f2=-124.191F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1782915677265084804L);

        for (i5 = 4; i5 < 175; ++i5) {
            for (i7 = 1; i7 < 9; i7++) {
                switch ((((i4 >>> 1) % 4) * 5) + 36) {
                case 45:
                    i4 = i7;
                    i8 = i4;
                    break;
                case 42:
                    i6 = i5;
                    switch ((((i5 >>> 1) % 1) * 5) + 28) {
                    case 30:
                        lArr[i7 - 1] = i5;
                        Test.iFld += (i7 ^ Test.iFld);
                    }
                    if (false) {
                        Test.instanceCount += i7;
                        Test.instanceCount = (long)-62.118F;
                        i8 += (i7 - i7);
                    } else if (b1) {
                        Test.dFld = Test.iFld;
                    }
                    break;
                case 52:
                    f2 %= (Test.instanceCount | 1);
                    break;
                case 47:
                    i6 += (i7 + i5);
                default:
                    Test.instanceCount *= 46907;
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l, boolean b) {

        int i3=-21399, i9=9, i10=-145, i12=57040, i13=-10, iArr[]=new int[N];
        short s1=-23914;
        byte by1=-68;
        float f3=-1.522F;

        FuzzerUtils.init(iArr, -4);

        iArr[(i3 >>> 1) % N] = (s1++);
        vMeth2(i3);
        try {
            i9 = 346;
            do {
                Test.iFld += i9;
                Test.iFld = Test.iFld;
                by1 -= (byte)Test.iFld1;
                Test.iFld1 += Test.iFld1;
                i3 = i9;
            } while ((i9 -= 2) > 0);
        }
        catch (ArithmeticException exc1) {
            for (f3 = 3; f3 < 375; f3++) {
                try {
                    i3 = (-1081639592 % Test.iFld);
                    Test.iFld = (iArr[(int)(f3)] % i9);
                    i10 = (i9 % iArr[(int)(f3)]);
                } catch (ArithmeticException a_e) {}
                if (i3 != 0) {
                    vMeth1_check_sum += l + (b ? 1 : 0) + i3 + s1 + i9 + by1 + Float.floatToIntBits(f3) + i10 + i12 +
                        i13 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                for (i12 = 1; i12 < 5; i12++) {
                    i13 += i13;
                    iArr[i12 + 1] += by1;
                }
            }
        }
        vMeth1_check_sum += l + (b ? 1 : 0) + i3 + s1 + i9 + by1 + Float.floatToIntBits(f3) + i10 + i12 + i13 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f, int i, int i1) {

        byte by=-114;
        short s=17994;
        float f1=107.273F, fArr[]=new float[N];
        int i2=-46042, i14=0, i15=7, i16=14, i17=19, i18=11044, iArr1[]=new int[N];

        FuzzerUtils.init(fArr, 2.636F);
        FuzzerUtils.init(iArr1, 37780);

        i = (int)(((i1 * Test.dFld) - by) * ((i = i1) / ((i1--) | 1)));
        i1 = i;
        i >>>= (int)((++i) - ((i1 + 7968L) * (i1 - s)));
        f -= fArr[(i >>> 1) % N];
        for (f1 = 250; f1 > 8; f1 -= 3) {
            vMeth1(Test.instanceCount, Test.bFld);
            iArr1[(int)(f1 + 1)] += (int)Test.dFld;
            iArr1[(int)(f1 - 1)] <<= i;
        }
        for (i14 = 3; i14 < 170; i14 += 2) {
            Test.iFld *= (int)-35.32940;
            for (i16 = i14; i16 < 19; ++i16) {
                Test.iFld = s;
                iArr1[i14 - 1] = (int)Test.instanceCount;
                try {
                    iArr1[i14 - 1] = (iArr1[i16] % 38566);
                    Test.iFld = (i1 % 211);
                    i = (i14 / -611166214);
                } catch (ArithmeticException a_e) {}
                Test.iFld += (((i16 * i14) + i18) - f1);
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + by + s + Float.floatToIntBits(f1) + i2 + i14 + i15 + i16
            + i17 + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i19=-205, i20=-9, i21=58, iArr2[]=new int[N], iArr3[]=new int[N];
        short s2=40, sArr[]=new short[N];
        byte by2=62;
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)1804);
        FuzzerUtils.init(iArr2, -12);
        FuzzerUtils.init(lArr1, 1365313282L);
        FuzzerUtils.init(iArr3, 0);

        vMeth(fFld, -28, Test.iFld);
        Test.iFld -= (int)Test.instanceCount;
        sArr[(Test.iFld >>> 1) % N] = (short)Test.iFld;
        Test.iFld -= Test.iFld1;
        for (double d : Test.dArrFld) {
            Test.bFld = Test.bFld;
            Test.instanceCount = Test.instanceCount;
            i19 = 1;
            while (++i19 < 63) {
                Test.iFld1 = (int)fFld;
                s2 = (short)36;
                Test.iFld1 = i19;
                for (i20 = 1; i20 > i19; i20 -= 3) {
                    Test.dFld -= Test.instanceCount;
                    Test.bFld = Test.bFld;
                    Test.iFld += (i20 | Test.iFld1);
                    Test.dFld -= i19;
                    Test.iFld1 >>>= i19;
                    i21 = (int)Test.instanceCount;
                    d -= Test.iFld1;
                    if (Test.bFld) {
                        switch (((-4 >>> 1) % 8) + 89) {
                        case 89:
                            Test.iFld1 = i21;
                            Test.iFld *= (int)-9004225268155438816L;
                            switch ((i20 % 9) + 73) {
                            case 73:
                                try {
                                    Test.iFld1 = (i21 / 64496);
                                    i21 = (iArr2[i19] / -45066);
                                    i21 = (i19 % i19);
                                } catch (ArithmeticException a_e) {}
                                Test.iFld1 -= (int)Test.instanceCount;
                                by2 += (byte)(((i20 * Test.iFld1) + Test.iFld) - i21);
                                break;
                            case 74:
                                Test.iFld1 += (((i20 * i20) + i19) - i19);
                                break;
                            case 75:
                                Test.instanceCount = i21;
                                lArr1[i19 - 1] = Test.iFld;
                                break;
                            case 76:
                                Test.iFld1 += (i20 * i21);
                                break;
                            case 77:
                                by2 >>= (byte)Test.instanceCount;
                                break;
                            case 78:
                                Test.iFld1 = -23;
                                break;
                            case 79:
                                by2 += (byte)(((i20 * Test.iFld) + i21) - i21);
                                break;
                            case 80:
                                iArr2[i19 - 1] >>= Test.iFld;
                                break;
                            case 81:
                                Test.iFld -= i21;
                                break;
                            default:
                                iArr3[i19 - 1] -= (int)Test.instanceCount;
                            }
                            break;
                        case 90:
                            Test.iFld1 += i20;
                            break;
                        case 91:
                            by2 = (byte)3;
                            break;
                        case 92:
                            Test.iFld *= -17702;
                            break;
                        case 93:
                        case 94:
                            fFld = (float)-49.119016;
                        case 95:
                            iArr2[i20 + 1] = Test.iFld;
                            break;
                        case 96:
                            i21 = (int)7L;
                            break;
                        }
                    } else {
                        Test.iFld1 = i19;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i19 s2 i20 = " + i19 + "," + s2 + "," + i20);
        FuzzerUtils.out.println("i21 by2 sArr = " + i21 + "," + by2 + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("iArr2 lArr1 iArr3 = " + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.iFld1 Test.bFld fFld = " + Test.iFld1 + "," + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
